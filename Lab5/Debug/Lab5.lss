
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000928  000009bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000928  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800166  00800166  00000a22  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cde  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e9  00000000  00000000  00001826  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000308  00000000  00000000  00001b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000387  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000428  00000000  00000000  000022df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002707  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	20 c0       	rjmp	.+64     	; 0x42 <__ctors_end>
   2:	3a c0       	rjmp	.+116    	; 0x78 <__bad_interrupt>
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	38 c0       	rjmp	.+112    	; 0x78 <__bad_interrupt>
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	36 c0       	rjmp	.+108    	; 0x78 <__bad_interrupt>
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	34 c0       	rjmp	.+104    	; 0x78 <__bad_interrupt>
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	32 c0       	rjmp	.+100    	; 0x78 <__bad_interrupt>
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	30 c0       	rjmp	.+96     	; 0x78 <__bad_interrupt>
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	2e c0       	rjmp	.+92     	; 0x78 <__bad_interrupt>
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	2c c0       	rjmp	.+88     	; 0x78 <__bad_interrupt>
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	2a c0       	rjmp	.+84     	; 0x78 <__bad_interrupt>
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	28 c0       	rjmp	.+80     	; 0x78 <__bad_interrupt>
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	26 c0       	rjmp	.+76     	; 0x78 <__bad_interrupt>
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	24 c0       	rjmp	.+72     	; 0x78 <__bad_interrupt>
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	22 c0       	rjmp	.+68     	; 0x78 <__bad_interrupt>

00000034 <__trampolines_end>:
  34:	46 6c       	ori	r20, 0xC6	; 198
  36:	61 73       	andi	r22, 0x31	; 49
  38:	68 20       	and	r6, r8
  3a:	47 6f       	ori	r20, 0xF7	; 247
  3c:	72 64       	ori	r23, 0x42	; 66
  3e:	6f 6e       	ori	r22, 0xEF	; 239
  40:	0a 00       	.word	0x000a	; ????

00000042 <__ctors_end>:
  42:	11 24       	eor	r1, r1
  44:	1f be       	out	0x3f, r1	; 63
  46:	cf ef       	ldi	r28, 0xFF	; 255
  48:	d4 e0       	ldi	r29, 0x04	; 4
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	cd bf       	out	0x3d, r28	; 61

0000004e <__do_copy_data>:
  4e:	11 e0       	ldi	r17, 0x01	; 1
  50:	a0 e0       	ldi	r26, 0x00	; 0
  52:	b1 e0       	ldi	r27, 0x01	; 1
  54:	e8 e2       	ldi	r30, 0x28	; 40
  56:	f9 e0       	ldi	r31, 0x09	; 9
  58:	02 c0       	rjmp	.+4      	; 0x5e <__do_copy_data+0x10>
  5a:	05 90       	lpm	r0, Z+
  5c:	0d 92       	st	X+, r0
  5e:	a6 36       	cpi	r26, 0x66	; 102
  60:	b1 07       	cpc	r27, r17
  62:	d9 f7       	brne	.-10     	; 0x5a <__do_copy_data+0xc>

00000064 <__do_clear_bss>:
  64:	21 e0       	ldi	r18, 0x01	; 1
  66:	a6 e6       	ldi	r26, 0x66	; 102
  68:	b1 e0       	ldi	r27, 0x01	; 1
  6a:	01 c0       	rjmp	.+2      	; 0x6e <.do_clear_bss_start>

0000006c <.do_clear_bss_loop>:
  6c:	1d 92       	st	X+, r1

0000006e <.do_clear_bss_start>:
  6e:	aa 36       	cpi	r26, 0x6A	; 106
  70:	b2 07       	cpc	r27, r18
  72:	e1 f7       	brne	.-8      	; 0x6c <.do_clear_bss_loop>
  74:	c1 d0       	rcall	.+386    	; 0x1f8 <main>
  76:	56 c4       	rjmp	.+2220   	; 0x924 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
  7a:	43 98       	cbi	0x08, 3	; 8
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
  7c:	88 23       	and	r24, r24
  7e:	0c f4       	brge	.+2      	; 0x82 <lcd_write_4+0x8>
  80:	43 9a       	sbi	0x08, 3	; 8

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
  82:	42 98       	cbi	0x08, 2	; 8
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
  84:	86 fd       	sbrc	r24, 6
  86:	42 9a       	sbi	0x08, 2	; 8

    lcd_D5_port &= ~(1<<lcd_D5_bit);
  88:	41 98       	cbi	0x08, 1	; 8
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
  8a:	85 fd       	sbrc	r24, 5
  8c:	41 9a       	sbi	0x08, 1	; 8

    lcd_D4_port &= ~(1<<lcd_D4_bit);
  8e:	40 98       	cbi	0x08, 0	; 8
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
  90:	84 fd       	sbrc	r24, 4
  92:	40 9a       	sbi	0x08, 0	; 8

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
  94:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	8a 95       	dec	r24
  9a:	f1 f7       	brne	.-4      	; 0x98 <lcd_write_4+0x1e>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <lcd_write_4+0x24>
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
  9e:	2b 98       	cbi	0x05, 3	; 5
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_write_4+0x28>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <lcd_write_4+0x2e>
  a8:	08 95       	ret

000000aa <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
  aa:	cf 93       	push	r28
  ac:	c8 2f       	mov	r28, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
  ae:	2d 9a       	sbi	0x05, 5	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
  b0:	2b 98       	cbi	0x05, 3	; 5
    lcd_write_4(theData);                           // write the upper 4-bits of the data
  b2:	e3 df       	rcall	.-58     	; 0x7a <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
  b4:	8c 2f       	mov	r24, r28
  b6:	82 95       	swap	r24
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	df df       	rcall	.-66     	; 0x7a <lcd_write_4>
}
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	ec 01       	movw	r28, r24
    int i = 0;                             // character counter*/
    while (theString[i] != 0)
  c6:	88 81       	ld	r24, Y
  c8:	88 23       	and	r24, r24
  ca:	49 f0       	breq	.+18     	; 0xde <lcd_write_string_4d+0x1e>
  cc:	21 96       	adiw	r28, 0x01	; 1
    {
        lcd_write_character_4d(theString[i]);
  ce:	ed df       	rcall	.-38     	; 0xaa <lcd_write_character_4d>
  d0:	8a e6       	ldi	r24, 0x6A	; 106
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_write_string_4d+0x12>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcd_write_string_4d+0x18>
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    int i = 0;                             // character counter*/
    while (theString[i] != 0)
  d8:	89 91       	ld	r24, Y+
  da:	81 11       	cpse	r24, r1
  dc:	f8 cf       	rjmp	.-16     	; 0xce <lcd_write_string_4d+0xe>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(40);                              // 40 uS delay (min)
    }
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
  e4:	cf 93       	push	r28
  e6:	c8 2f       	mov	r28, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
  e8:	2d 98       	cbi	0x05, 5	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
  ea:	2b 98       	cbi	0x05, 3	; 5
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
  ec:	c6 df       	rcall	.-116    	; 0x7a <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
  ee:	8c 2f       	mov	r24, r28
  f0:	82 95       	swap	r24
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	c2 df       	rcall	.-124    	; 0x7a <lcd_write_4>
}
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	80 e7       	ldi	r24, 0x70	; 112
  fe:	92 e0       	ldi	r25, 0x02	; 2
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <lcd_init_4d+0x6>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_init_4d+0x10>
 10a:	00 00       	nop
{
// Power-up delay
    _delay_ms(100);                                 // initial 100 mSec delay

// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
 10c:	2d 98       	cbi	0x05, 5	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 10e:	2b 98       	cbi	0x05, 3	; 5

// Reset the LCD controller
    lcd_write_4(lcd_FunctionSet8bit);                 // first part of reset sequence
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	b3 df       	rcall	.-154    	; 0x7a <lcd_write_4>
 114:	8f e1       	ldi	r24, 0x1F	; 31
 116:	9e e4       	ldi	r25, 0x4E	; 78
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_init_4d+0x1e>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_init_4d+0x24>
 11e:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionSet8bit);                 // second part of reset sequence
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	ab df       	rcall	.-170    	; 0x7a <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	8f e8       	ldi	r24, 0x8F	; 143
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_init_4d+0x2e>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_init_4d+0x34>
 12e:	00 00       	nop
    _delay_us(200);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionSet8bit);                 // third part of reset sequence
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	a3 df       	rcall	.-186    	; 0x7a <lcd_write_4>
 134:	8f e8       	ldi	r24, 0x8F	; 143
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_init_4d+0x3e>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_init_4d+0x44>
 13e:	00 00       	nop
    _delay_us(200);                                 // this delay is omitted in the data sheet
 
    lcd_write_4(lcd_functionSet4bit);               // set 4-bit mode
 140:	82 e8       	ldi	r24, 0x82	; 130
 142:	9b df       	rcall	.-202    	; 0x7a <lcd_write_4>
 144:	9d e0       	ldi	r25, 0x0D	; 13
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_init_4d+0x4c>
 14a:	00 00       	nop
    _delay_us(5);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_functionSet4bit);   // set mode, lines, and font
 14c:	82 e8       	ldi	r24, 0x82	; 130
 14e:	ca df       	rcall	.-108    	; 0xe4 <lcd_write_instruction_4d>
 150:	2a e6       	ldi	r18, 0x6A	; 106
 152:	2a 95       	dec	r18
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_init_4d+0x58>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_init_4d+0x5e>
    _delay_us(40);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_clear);             // clear display RAM
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	c4 df       	rcall	.-120    	; 0xe4 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e0       	ldi	r24, 0x0F	; 15
 15e:	97 e2       	ldi	r25, 0x27	; 39
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_init_4d+0x66>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_init_4d+0x6c>
 166:	00 00       	nop
    _delay_ms(5);                                   // 1.64 mS delay (min)

// Display On/Off Control instruction
	lcd_write_instruction_4d(lcd_displayOn);         // turn the display ON
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	bc df       	rcall	.-136    	; 0xe4 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	9a e6       	ldi	r25, 0x6A	; 106
 16e:	9a 95       	dec	r25
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_init_4d+0x74>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_init_4d+0x7a>
	_delay_us(40);                                  // 40uS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_entryMode);         // set desired shift characteristics
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	b6 df       	rcall	.-148    	; 0xe4 <lcd_write_instruction_4d>
 178:	2a e6       	ldi	r18, 0x6A	; 106
 17a:	2a 95       	dec	r18
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_init_4d+0x80>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_init_4d+0x86>
 180:	08 95       	ret

00000182 <uart_init>:
}

// UART
void uart_init()
{
	UBRR0 = 0;
 182:	e4 ec       	ldi	r30, 0xC4	; 196
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	11 82       	std	Z+1, r1	; 0x01
 188:	10 82       	st	Z, r1
	/* Setting the XCKn port pin as output, enables master
	mode. */
	XCK_DDR |= (1<<XCK_BIT);
 18a:	54 9a       	sbi	0x0a, 4	; 10
	/* Set MSPI mode of operation and SPI data mode 0. */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 18c:	8e e0       	ldi	r24, 0x0E	; 14
 18e:	80 93 c2 00 	sts	0x00C2, r24
	//UCSR0C = (1<<UMSEL01)|(1<<UMSEL00)|(0<<UPM00)|(0<<UCPOL0);
	/* Enable receiver and transmitter. */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 192:	88 e1       	ldi	r24, 0x18	; 24
 194:	80 93 c1 00 	sts	0x00C1, r24
	/* Set baud rate. */
	/* IMPORTANT: The Baud Rate must be set after the
	transmitter is enabled */
	UBRR0 = BAUD;
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	95 e2       	ldi	r25, 0x25	; 37
 19c:	91 83       	std	Z+1, r25	; 0x01
 19e:	80 83       	st	Z, r24
 1a0:	08 95       	ret

000001a2 <uart_putc>:
}

// sends character
void uart_putc(char c)
{
	while(!((UCSR0A)& (_BV(UDRE0))));
 1a2:	e0 ec       	ldi	r30, 0xC0	; 192
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	90 81       	ld	r25, Z
 1a8:	95 ff       	sbrs	r25, 5
 1aa:	fd cf       	rjmp	.-6      	; 0x1a6 <uart_putc+0x4>
	UDR0 = c;
 1ac:	80 93 c6 00 	sts	0x00C6, r24
 1b0:	08 95       	ret

000001b2 <uart_printstr>:
	//UBRRN = BAUD
}

// Print a string
void uart_printstr(char *s)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
	while(*s){
 1b8:	88 81       	ld	r24, Y
 1ba:	88 23       	and	r24, r24
 1bc:	29 f0       	breq	.+10     	; 0x1c8 <uart_printstr+0x16>
 1be:	21 96       	adiw	r28, 0x01	; 1
		uart_putc(*s);
 1c0:	f0 df       	rcall	.-32     	; 0x1a2 <uart_putc>
}

// Print a string
void uart_printstr(char *s)
{
	while(*s){
 1c2:	89 91       	ld	r24, Y+
 1c4:	81 11       	cpse	r24, r1
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <uart_printstr+0xe>
		uart_putc(*s);
		s++;
	}
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <getDate>:
	while(!((UCSR0A)& (_BV(UDRE0))));
	UDR0 = c;
}

void getDate(int *yy, int *mm, int *dd)
{
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
	unsigned char c;
	char str[25];
	int i;
	// Get date from user
	// modify values yy, mm, dd
	uart_printstr("Please Enter Year (yyyy):");
 1d6:	8d e2       	ldi	r24, 0x2D	; 45
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	eb df       	rcall	.-42     	; 0x1b2 <uart_printstr>
 1dc:	c4 e0       	ldi	r28, 0x04	; 4
 1de:	d0 e0       	ldi	r29, 0x00	; 0
}

// Gets character
char uart_getc()
{
	return UDR0;
 1e0:	06 ec       	ldi	r16, 0xC6	; 198
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	f8 01       	movw	r30, r16
 1e6:	80 81       	ld	r24, Z
	// Get date from user
	// modify values yy, mm, dd
	uart_printstr("Please Enter Year (yyyy):");
	for (i=0;i<=4-1;i++){
		c = uart_getc(); // Get character
		uart_putc(c); // Echo it back
 1e8:	dc df       	rcall	.-72     	; 0x1a2 <uart_putc>
 1ea:	21 97       	sbiw	r28, 0x01	; 1
	char str[25];
	int i;
	// Get date from user
	// modify values yy, mm, dd
	uart_printstr("Please Enter Year (yyyy):");
	for (i=0;i<=4-1;i++){
 1ec:	d9 f7       	brne	.-10     	; 0x1e4 <getDate+0x16>
		c = uart_getc(); // Get character
		uart_putc(c); // Echo it back
		str[i] = c;
	}
	str[i] = '\0';
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	08 95       	ret

000001f8 <main>:
int mode = 0;
int mode_new = 0;

/******************************* Main Program Code *************************/
int main(void)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	6f 97       	sbiw	r28, 0x1f	; 31
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
	// configure the microprocessor pins for the data lines
	lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
 20c:	3b 9a       	sbi	0x07, 3	; 7
	lcd_D6_ddr |= (1<<lcd_D6_bit);
 20e:	3a 9a       	sbi	0x07, 2	; 7
	lcd_D5_ddr |= (1<<lcd_D5_bit);
 210:	39 9a       	sbi	0x07, 1	; 7
	lcd_D4_ddr |= (1<<lcd_D4_bit);
 212:	38 9a       	sbi	0x07, 0	; 7

	// configure the microprocessor pins for the control lines
	lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
 214:	23 9a       	sbi	0x04, 3	; 4
	lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
 216:	25 9a       	sbi	0x04, 5	; 4
	
	// configure the microprocessor pins for the pushbutton
	pushbutton_ddr &= (1<<pushbutton_bit);
 218:	8a b1       	in	r24, 0x0a	; 10
 21a:	84 70       	andi	r24, 0x04	; 4
 21c:	8a b9       	out	0x0a, r24	; 10
	pushbutton_port |= (1<<pushbutton_bit);
 21e:	5a 9a       	sbi	0x0b, 2	; 11
	
	// initialize adc
	ADMUX = ((1<<REFS0)|(1<<MUX2)|(1<<MUX0));				// Aref = Vcc, select ADC5
 220:	85 e4       	ldi	r24, 0x45	; 69
 222:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ((1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<ADPS0));	// Prescaler div factor = 128
 226:	86 e8       	ldi	r24, 0x86	; 134
 228:	80 93 7a 00 	sts	0x007A, r24
	
	// initialize the LCD controller as determined by the defines (LCD instructions)
	lcd_init_4d();                                  // initialize the LCD display for a 4-bit interface
 22c:	66 df       	rcall	.-308    	; 0xfa <lcd_init_4d>

	// display the first line of information
	lcd_write_string_4d(disp_time);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	46 df       	rcall	.-372    	; 0xc0 <lcd_write_string_4d>
	
	// set cursor to start of second line
	lcd_write_instruction_4d(lcd_setCursor | lcd_lineTwo);
 234:	80 ec       	ldi	r24, 0xC0	; 192
 236:	56 df       	rcall	.-340    	; 0xe4 <lcd_write_instruction_4d>
 238:	8a e6       	ldi	r24, 0x6A	; 106
 23a:	8a 95       	dec	r24
 23c:	f1 f7       	brne	.-4      	; 0x23a <main+0x42>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x48>
	_delay_us(40);                                  // 40 uS delay (min)
	
	if (mode == 0)
 240:	80 91 68 01 	lds	r24, 0x0168
 244:	90 91 69 01 	lds	r25, 0x0169
 248:	00 97       	sbiw	r24, 0x00	; 0
 24a:	21 f4       	brne	.+8      	; 0x254 <main+0x5c>
	{
		lcd_write_string_4d(disp_volt);
 24c:	82 e2       	ldi	r24, 0x22	; 34
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	37 df       	rcall	.-402    	; 0xc0 <lcd_write_string_4d>
 252:	09 c0       	rjmp	.+18     	; 0x266 <main+0x6e>
	}
	else if (mode == 1)
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	21 f4       	brne	.+8      	; 0x260 <main+0x68>
	{
		lcd_write_string_4d(disp_freq);
 258:	85 e1       	ldi	r24, 0x15	; 21
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	31 df       	rcall	.-414    	; 0xc0 <lcd_write_string_4d>
 25e:	03 c0       	rjmp	.+6      	; 0x266 <main+0x6e>
	}
	else
	{
		lcd_write_string_4d(disp_temp);
 260:	8d e0       	ldi	r24, 0x0D	; 13
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	2d df       	rcall	.-422    	; 0xc0 <lcd_write_string_4d>
	}	

	// Code for interfacing with the serial connection
	char str[25];
	int yy,mm,dd;
	sei();					// Enable global interrupts
 266:	78 94       	sei
	uart_init();			// Initialize the USART using baud rate 9600
 268:	8c df       	rcall	.-232    	; 0x182 <uart_init>
	uart_printstr(sdata);		// Print a string from SRAM
 26a:	87 e5       	ldi	r24, 0x57	; 87
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	a1 df       	rcall	.-190    	; 0x1b2 <uart_printstr>
	uart_printstr(fdata);		// Print a string from FLASH
 270:	84 e3       	ldi	r24, 0x34	; 52
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	9e df       	rcall	.-196    	; 0x1b2 <uart_printstr>

	
	getDate(&yy,&mm,&dd);	// Get date from user
 276:	ae 01       	movw	r20, r28
 278:	42 5e       	subi	r20, 0xE2	; 226
 27a:	5f 4f       	sbci	r21, 0xFF	; 255
 27c:	be 01       	movw	r22, r28
 27e:	64 5e       	subi	r22, 0xE4	; 228
 280:	7f 4f       	sbci	r23, 0xFF	; 255
 282:	ce 01       	movw	r24, r28
 284:	4a 96       	adiw	r24, 0x1a	; 26
 286:	a3 df       	rcall	.-186    	; 0x1ce <getDate>
	sprintf(str,"Date: %d/%d/%d\n",yy,mm,dd);
 288:	8f 8d       	ldd	r24, Y+31	; 0x1f
 28a:	8f 93       	push	r24
 28c:	8e 8d       	ldd	r24, Y+30	; 0x1e
 28e:	8f 93       	push	r24
 290:	8d 8d       	ldd	r24, Y+29	; 0x1d
 292:	8f 93       	push	r24
 294:	8c 8d       	ldd	r24, Y+28	; 0x1c
 296:	8f 93       	push	r24
 298:	8b 8d       	ldd	r24, Y+27	; 0x1b
 29a:	8f 93       	push	r24
 29c:	8a 8d       	ldd	r24, Y+26	; 0x1a
 29e:	8f 93       	push	r24
 2a0:	87 e4       	ldi	r24, 0x47	; 71
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	9f 93       	push	r25
 2a6:	8f 93       	push	r24
 2a8:	8e 01       	movw	r16, r28
 2aa:	0f 5f       	subi	r16, 0xFF	; 255
 2ac:	1f 4f       	sbci	r17, 0xFF	; 255
 2ae:	1f 93       	push	r17
 2b0:	0f 93       	push	r16
 2b2:	72 d0       	rcall	.+228    	; 0x398 <sprintf>
	uart_printstr(str);
 2b4:	c8 01       	movw	r24, r16
 2b6:	7d df       	rcall	.-262    	; 0x1b2 <uart_printstr>
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
	{
		if(bit_is_clear(pushbutton_pin,pushbutton_bit))
		{
			_delay_ms(10);
			if(bit_is_clear(pushbutton_pin,pushbutton_bit))
			mode_new = (mode + 1) % 3;
 2c2:	03 e0       	ldi	r16, 0x03	; 3
 2c4:	10 e0       	ldi	r17, 0x00	; 0


	// endless loop
	while(1)
	{
		if(bit_is_clear(pushbutton_pin,pushbutton_bit))
 2c6:	4a 99       	sbic	0x09, 2	; 9
 2c8:	13 c0       	rjmp	.+38     	; 0x2f0 <main+0xf8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ca:	8f e1       	ldi	r24, 0x1F	; 31
 2cc:	9e e4       	ldi	r25, 0x4E	; 78
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <main+0xd6>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0xdc>
 2d4:	00 00       	nop
		{
			_delay_ms(10);
			if(bit_is_clear(pushbutton_pin,pushbutton_bit))
 2d6:	4a 99       	sbic	0x09, 2	; 9
 2d8:	0b c0       	rjmp	.+22     	; 0x2f0 <main+0xf8>
			mode_new = (mode + 1) % 3;
 2da:	80 91 68 01 	lds	r24, 0x0168
 2de:	90 91 69 01 	lds	r25, 0x0169
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	b8 01       	movw	r22, r16
 2e6:	31 d0       	rcall	.+98     	; 0x34a <__divmodhi4>
 2e8:	90 93 67 01 	sts	0x0167, r25
 2ec:	80 93 66 01 	sts	0x0166, r24
		}
		
		if(mode_new != mode)
 2f0:	20 91 66 01 	lds	r18, 0x0166
 2f4:	30 91 67 01 	lds	r19, 0x0167
 2f8:	80 91 68 01 	lds	r24, 0x0168
 2fc:	90 91 69 01 	lds	r25, 0x0169
 300:	28 17       	cp	r18, r24
 302:	39 07       	cpc	r19, r25
 304:	c9 f0       	breq	.+50     	; 0x338 <main+0x140>
		{
			// set cursor to start of second line
			lcd_write_instruction_4d(lcd_setCursor | lcd_lineTwo);
 306:	80 ec       	ldi	r24, 0xC0	; 192
 308:	ed de       	rcall	.-550    	; 0xe4 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30a:	9a e6       	ldi	r25, 0x6A	; 106
 30c:	9a 95       	dec	r25
 30e:	f1 f7       	brne	.-4      	; 0x30c <main+0x114>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x11a>
			_delay_us(40);                                  // 40 uS delay (min)
	
			if (mode_new == 0)
 312:	80 91 66 01 	lds	r24, 0x0166
 316:	90 91 67 01 	lds	r25, 0x0167
 31a:	00 97       	sbiw	r24, 0x00	; 0
 31c:	21 f4       	brne	.+8      	; 0x326 <main+0x12e>
			{
				lcd_write_string_4d(disp_volt);
 31e:	82 e2       	ldi	r24, 0x22	; 34
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	ce de       	rcall	.-612    	; 0xc0 <lcd_write_string_4d>
 324:	09 c0       	rjmp	.+18     	; 0x338 <main+0x140>
			}
			else if (mode_new == 1)
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	21 f4       	brne	.+8      	; 0x332 <main+0x13a>
			{
				lcd_write_string_4d(disp_freq);
 32a:	85 e1       	ldi	r24, 0x15	; 21
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	c8 de       	rcall	.-624    	; 0xc0 <lcd_write_string_4d>
 330:	03 c0       	rjmp	.+6      	; 0x338 <main+0x140>
			}
			else
			{
				lcd_write_string_4d(disp_temp);
 332:	8d e0       	ldi	r24, 0x0D	; 13
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	c4 de       	rcall	.-632    	; 0xc0 <lcd_write_string_4d>
			}			
		}
		
		mode = mode_new;
 338:	80 91 66 01 	lds	r24, 0x0166
 33c:	90 91 67 01 	lds	r25, 0x0167
 340:	90 93 69 01 	sts	0x0169, r25
 344:	80 93 68 01 	sts	0x0168, r24
	}
 348:	be cf       	rjmp	.-132    	; 0x2c6 <main+0xce>

0000034a <__divmodhi4>:
 34a:	97 fb       	bst	r25, 7
 34c:	07 2e       	mov	r0, r23
 34e:	16 f4       	brtc	.+4      	; 0x354 <__divmodhi4+0xa>
 350:	00 94       	com	r0
 352:	06 d0       	rcall	.+12     	; 0x360 <__divmodhi4_neg1>
 354:	77 fd       	sbrc	r23, 7
 356:	08 d0       	rcall	.+16     	; 0x368 <__divmodhi4_neg2>
 358:	0b d0       	rcall	.+22     	; 0x370 <__udivmodhi4>
 35a:	07 fc       	sbrc	r0, 7
 35c:	05 d0       	rcall	.+10     	; 0x368 <__divmodhi4_neg2>
 35e:	3e f4       	brtc	.+14     	; 0x36e <__divmodhi4_exit>

00000360 <__divmodhi4_neg1>:
 360:	90 95       	com	r25
 362:	81 95       	neg	r24
 364:	9f 4f       	sbci	r25, 0xFF	; 255
 366:	08 95       	ret

00000368 <__divmodhi4_neg2>:
 368:	70 95       	com	r23
 36a:	61 95       	neg	r22
 36c:	7f 4f       	sbci	r23, 0xFF	; 255

0000036e <__divmodhi4_exit>:
 36e:	08 95       	ret

00000370 <__udivmodhi4>:
 370:	aa 1b       	sub	r26, r26
 372:	bb 1b       	sub	r27, r27
 374:	51 e1       	ldi	r21, 0x11	; 17
 376:	07 c0       	rjmp	.+14     	; 0x386 <__udivmodhi4_ep>

00000378 <__udivmodhi4_loop>:
 378:	aa 1f       	adc	r26, r26
 37a:	bb 1f       	adc	r27, r27
 37c:	a6 17       	cp	r26, r22
 37e:	b7 07       	cpc	r27, r23
 380:	10 f0       	brcs	.+4      	; 0x386 <__udivmodhi4_ep>
 382:	a6 1b       	sub	r26, r22
 384:	b7 0b       	sbc	r27, r23

00000386 <__udivmodhi4_ep>:
 386:	88 1f       	adc	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	5a 95       	dec	r21
 38c:	a9 f7       	brne	.-22     	; 0x378 <__udivmodhi4_loop>
 38e:	80 95       	com	r24
 390:	90 95       	com	r25
 392:	bc 01       	movw	r22, r24
 394:	cd 01       	movw	r24, r26
 396:	08 95       	ret

00000398 <sprintf>:
 398:	ae e0       	ldi	r26, 0x0E	; 14
 39a:	b0 e0       	ldi	r27, 0x00	; 0
 39c:	e1 ed       	ldi	r30, 0xD1	; 209
 39e:	f1 e0       	ldi	r31, 0x01	; 1
 3a0:	98 c2       	rjmp	.+1328   	; 0x8d2 <__prologue_saves__+0x1c>
 3a2:	0d 89       	ldd	r16, Y+21	; 0x15
 3a4:	1e 89       	ldd	r17, Y+22	; 0x16
 3a6:	86 e0       	ldi	r24, 0x06	; 6
 3a8:	8c 83       	std	Y+4, r24	; 0x04
 3aa:	1a 83       	std	Y+2, r17	; 0x02
 3ac:	09 83       	std	Y+1, r16	; 0x01
 3ae:	8f ef       	ldi	r24, 0xFF	; 255
 3b0:	9f e7       	ldi	r25, 0x7F	; 127
 3b2:	9e 83       	std	Y+6, r25	; 0x06
 3b4:	8d 83       	std	Y+5, r24	; 0x05
 3b6:	ae 01       	movw	r20, r28
 3b8:	47 5e       	subi	r20, 0xE7	; 231
 3ba:	5f 4f       	sbci	r21, 0xFF	; 255
 3bc:	6f 89       	ldd	r22, Y+23	; 0x17
 3be:	78 8d       	ldd	r23, Y+24	; 0x18
 3c0:	ce 01       	movw	r24, r28
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	09 d0       	rcall	.+18     	; 0x3d8 <vfprintf>
 3c6:	2f 81       	ldd	r18, Y+7	; 0x07
 3c8:	38 85       	ldd	r19, Y+8	; 0x08
 3ca:	f8 01       	movw	r30, r16
 3cc:	e2 0f       	add	r30, r18
 3ce:	f3 1f       	adc	r31, r19
 3d0:	10 82       	st	Z, r1
 3d2:	2e 96       	adiw	r28, 0x0e	; 14
 3d4:	e4 e0       	ldi	r30, 0x04	; 4
 3d6:	99 c2       	rjmp	.+1330   	; 0x90a <__epilogue_restores__+0x1c>

000003d8 <vfprintf>:
 3d8:	ac e0       	ldi	r26, 0x0C	; 12
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	e1 ef       	ldi	r30, 0xF1	; 241
 3de:	f1 e0       	ldi	r31, 0x01	; 1
 3e0:	6a c2       	rjmp	.+1236   	; 0x8b6 <__prologue_saves__>
 3e2:	7c 01       	movw	r14, r24
 3e4:	6b 01       	movw	r12, r22
 3e6:	8a 01       	movw	r16, r20
 3e8:	fc 01       	movw	r30, r24
 3ea:	17 82       	std	Z+7, r1	; 0x07
 3ec:	16 82       	std	Z+6, r1	; 0x06
 3ee:	83 81       	ldd	r24, Z+3	; 0x03
 3f0:	81 ff       	sbrs	r24, 1
 3f2:	b0 c1       	rjmp	.+864    	; 0x754 <__stack+0x255>
 3f4:	ce 01       	movw	r24, r28
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	4c 01       	movw	r8, r24
 3fa:	f7 01       	movw	r30, r14
 3fc:	93 81       	ldd	r25, Z+3	; 0x03
 3fe:	f6 01       	movw	r30, r12
 400:	93 fd       	sbrc	r25, 3
 402:	85 91       	lpm	r24, Z+
 404:	93 ff       	sbrs	r25, 3
 406:	81 91       	ld	r24, Z+
 408:	6f 01       	movw	r12, r30
 40a:	88 23       	and	r24, r24
 40c:	09 f4       	brne	.+2      	; 0x410 <vfprintf+0x38>
 40e:	9e c1       	rjmp	.+828    	; 0x74c <__stack+0x24d>
 410:	85 32       	cpi	r24, 0x25	; 37
 412:	39 f4       	brne	.+14     	; 0x422 <vfprintf+0x4a>
 414:	93 fd       	sbrc	r25, 3
 416:	85 91       	lpm	r24, Z+
 418:	93 ff       	sbrs	r25, 3
 41a:	81 91       	ld	r24, Z+
 41c:	6f 01       	movw	r12, r30
 41e:	85 32       	cpi	r24, 0x25	; 37
 420:	21 f4       	brne	.+8      	; 0x42a <vfprintf+0x52>
 422:	b7 01       	movw	r22, r14
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	b1 d1       	rcall	.+866    	; 0x78a <fputc>
 428:	e8 cf       	rjmp	.-48     	; 0x3fa <vfprintf+0x22>
 42a:	51 2c       	mov	r5, r1
 42c:	31 2c       	mov	r3, r1
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	20 32       	cpi	r18, 0x20	; 32
 432:	a0 f4       	brcc	.+40     	; 0x45c <vfprintf+0x84>
 434:	8b 32       	cpi	r24, 0x2B	; 43
 436:	69 f0       	breq	.+26     	; 0x452 <vfprintf+0x7a>
 438:	30 f4       	brcc	.+12     	; 0x446 <vfprintf+0x6e>
 43a:	80 32       	cpi	r24, 0x20	; 32
 43c:	59 f0       	breq	.+22     	; 0x454 <vfprintf+0x7c>
 43e:	83 32       	cpi	r24, 0x23	; 35
 440:	69 f4       	brne	.+26     	; 0x45c <vfprintf+0x84>
 442:	20 61       	ori	r18, 0x10	; 16
 444:	2c c0       	rjmp	.+88     	; 0x49e <vfprintf+0xc6>
 446:	8d 32       	cpi	r24, 0x2D	; 45
 448:	39 f0       	breq	.+14     	; 0x458 <vfprintf+0x80>
 44a:	80 33       	cpi	r24, 0x30	; 48
 44c:	39 f4       	brne	.+14     	; 0x45c <vfprintf+0x84>
 44e:	21 60       	ori	r18, 0x01	; 1
 450:	26 c0       	rjmp	.+76     	; 0x49e <vfprintf+0xc6>
 452:	22 60       	ori	r18, 0x02	; 2
 454:	24 60       	ori	r18, 0x04	; 4
 456:	23 c0       	rjmp	.+70     	; 0x49e <vfprintf+0xc6>
 458:	28 60       	ori	r18, 0x08	; 8
 45a:	21 c0       	rjmp	.+66     	; 0x49e <vfprintf+0xc6>
 45c:	27 fd       	sbrc	r18, 7
 45e:	27 c0       	rjmp	.+78     	; 0x4ae <vfprintf+0xd6>
 460:	30 ed       	ldi	r19, 0xD0	; 208
 462:	38 0f       	add	r19, r24
 464:	3a 30       	cpi	r19, 0x0A	; 10
 466:	78 f4       	brcc	.+30     	; 0x486 <vfprintf+0xae>
 468:	26 ff       	sbrs	r18, 6
 46a:	06 c0       	rjmp	.+12     	; 0x478 <vfprintf+0xa0>
 46c:	fa e0       	ldi	r31, 0x0A	; 10
 46e:	5f 9e       	mul	r5, r31
 470:	30 0d       	add	r19, r0
 472:	11 24       	eor	r1, r1
 474:	53 2e       	mov	r5, r19
 476:	13 c0       	rjmp	.+38     	; 0x49e <vfprintf+0xc6>
 478:	8a e0       	ldi	r24, 0x0A	; 10
 47a:	38 9e       	mul	r3, r24
 47c:	30 0d       	add	r19, r0
 47e:	11 24       	eor	r1, r1
 480:	33 2e       	mov	r3, r19
 482:	20 62       	ori	r18, 0x20	; 32
 484:	0c c0       	rjmp	.+24     	; 0x49e <vfprintf+0xc6>
 486:	8e 32       	cpi	r24, 0x2E	; 46
 488:	21 f4       	brne	.+8      	; 0x492 <vfprintf+0xba>
 48a:	26 fd       	sbrc	r18, 6
 48c:	5f c1       	rjmp	.+702    	; 0x74c <__stack+0x24d>
 48e:	20 64       	ori	r18, 0x40	; 64
 490:	06 c0       	rjmp	.+12     	; 0x49e <vfprintf+0xc6>
 492:	8c 36       	cpi	r24, 0x6C	; 108
 494:	11 f4       	brne	.+4      	; 0x49a <vfprintf+0xc2>
 496:	20 68       	ori	r18, 0x80	; 128
 498:	02 c0       	rjmp	.+4      	; 0x49e <vfprintf+0xc6>
 49a:	88 36       	cpi	r24, 0x68	; 104
 49c:	41 f4       	brne	.+16     	; 0x4ae <vfprintf+0xd6>
 49e:	f6 01       	movw	r30, r12
 4a0:	93 fd       	sbrc	r25, 3
 4a2:	85 91       	lpm	r24, Z+
 4a4:	93 ff       	sbrs	r25, 3
 4a6:	81 91       	ld	r24, Z+
 4a8:	6f 01       	movw	r12, r30
 4aa:	81 11       	cpse	r24, r1
 4ac:	c1 cf       	rjmp	.-126    	; 0x430 <vfprintf+0x58>
 4ae:	98 2f       	mov	r25, r24
 4b0:	9f 7d       	andi	r25, 0xDF	; 223
 4b2:	95 54       	subi	r25, 0x45	; 69
 4b4:	93 30       	cpi	r25, 0x03	; 3
 4b6:	28 f4       	brcc	.+10     	; 0x4c2 <vfprintf+0xea>
 4b8:	0c 5f       	subi	r16, 0xFC	; 252
 4ba:	1f 4f       	sbci	r17, 0xFF	; 255
 4bc:	ff e3       	ldi	r31, 0x3F	; 63
 4be:	f9 83       	std	Y+1, r31	; 0x01
 4c0:	0d c0       	rjmp	.+26     	; 0x4dc <vfprintf+0x104>
 4c2:	83 36       	cpi	r24, 0x63	; 99
 4c4:	31 f0       	breq	.+12     	; 0x4d2 <vfprintf+0xfa>
 4c6:	83 37       	cpi	r24, 0x73	; 115
 4c8:	71 f0       	breq	.+28     	; 0x4e6 <vfprintf+0x10e>
 4ca:	83 35       	cpi	r24, 0x53	; 83
 4cc:	09 f0       	breq	.+2      	; 0x4d0 <vfprintf+0xf8>
 4ce:	57 c0       	rjmp	.+174    	; 0x57e <__stack+0x7f>
 4d0:	21 c0       	rjmp	.+66     	; 0x514 <__stack+0x15>
 4d2:	f8 01       	movw	r30, r16
 4d4:	80 81       	ld	r24, Z
 4d6:	89 83       	std	Y+1, r24	; 0x01
 4d8:	0e 5f       	subi	r16, 0xFE	; 254
 4da:	1f 4f       	sbci	r17, 0xFF	; 255
 4dc:	44 24       	eor	r4, r4
 4de:	43 94       	inc	r4
 4e0:	51 2c       	mov	r5, r1
 4e2:	54 01       	movw	r10, r8
 4e4:	14 c0       	rjmp	.+40     	; 0x50e <__stack+0xf>
 4e6:	38 01       	movw	r6, r16
 4e8:	f2 e0       	ldi	r31, 0x02	; 2
 4ea:	6f 0e       	add	r6, r31
 4ec:	71 1c       	adc	r7, r1
 4ee:	f8 01       	movw	r30, r16
 4f0:	a0 80       	ld	r10, Z
 4f2:	b1 80       	ldd	r11, Z+1	; 0x01
 4f4:	26 ff       	sbrs	r18, 6
 4f6:	03 c0       	rjmp	.+6      	; 0x4fe <vfprintf+0x126>
 4f8:	65 2d       	mov	r22, r5
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <__stack+0x3>
 4fe:	6f ef       	ldi	r22, 0xFF	; 255
 500:	7f ef       	ldi	r23, 0xFF	; 255
 502:	c5 01       	movw	r24, r10
 504:	2c 87       	std	Y+12, r18	; 0x0c
 506:	36 d1       	rcall	.+620    	; 0x774 <strnlen>
 508:	2c 01       	movw	r4, r24
 50a:	83 01       	movw	r16, r6
 50c:	2c 85       	ldd	r18, Y+12	; 0x0c
 50e:	2f 77       	andi	r18, 0x7F	; 127
 510:	22 2e       	mov	r2, r18
 512:	16 c0       	rjmp	.+44     	; 0x540 <__stack+0x41>
 514:	38 01       	movw	r6, r16
 516:	f2 e0       	ldi	r31, 0x02	; 2
 518:	6f 0e       	add	r6, r31
 51a:	71 1c       	adc	r7, r1
 51c:	f8 01       	movw	r30, r16
 51e:	a0 80       	ld	r10, Z
 520:	b1 80       	ldd	r11, Z+1	; 0x01
 522:	26 ff       	sbrs	r18, 6
 524:	03 c0       	rjmp	.+6      	; 0x52c <__stack+0x2d>
 526:	65 2d       	mov	r22, r5
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <__stack+0x31>
 52c:	6f ef       	ldi	r22, 0xFF	; 255
 52e:	7f ef       	ldi	r23, 0xFF	; 255
 530:	c5 01       	movw	r24, r10
 532:	2c 87       	std	Y+12, r18	; 0x0c
 534:	14 d1       	rcall	.+552    	; 0x75e <strnlen_P>
 536:	2c 01       	movw	r4, r24
 538:	2c 85       	ldd	r18, Y+12	; 0x0c
 53a:	20 68       	ori	r18, 0x80	; 128
 53c:	22 2e       	mov	r2, r18
 53e:	83 01       	movw	r16, r6
 540:	23 fc       	sbrc	r2, 3
 542:	19 c0       	rjmp	.+50     	; 0x576 <__stack+0x77>
 544:	83 2d       	mov	r24, r3
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	48 16       	cp	r4, r24
 54a:	59 06       	cpc	r5, r25
 54c:	a0 f4       	brcc	.+40     	; 0x576 <__stack+0x77>
 54e:	b7 01       	movw	r22, r14
 550:	80 e2       	ldi	r24, 0x20	; 32
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	1a d1       	rcall	.+564    	; 0x78a <fputc>
 556:	3a 94       	dec	r3
 558:	f5 cf       	rjmp	.-22     	; 0x544 <__stack+0x45>
 55a:	f5 01       	movw	r30, r10
 55c:	27 fc       	sbrc	r2, 7
 55e:	85 91       	lpm	r24, Z+
 560:	27 fe       	sbrs	r2, 7
 562:	81 91       	ld	r24, Z+
 564:	5f 01       	movw	r10, r30
 566:	b7 01       	movw	r22, r14
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0f d1       	rcall	.+542    	; 0x78a <fputc>
 56c:	31 10       	cpse	r3, r1
 56e:	3a 94       	dec	r3
 570:	f1 e0       	ldi	r31, 0x01	; 1
 572:	4f 1a       	sub	r4, r31
 574:	51 08       	sbc	r5, r1
 576:	41 14       	cp	r4, r1
 578:	51 04       	cpc	r5, r1
 57a:	79 f7       	brne	.-34     	; 0x55a <__stack+0x5b>
 57c:	de c0       	rjmp	.+444    	; 0x73a <__stack+0x23b>
 57e:	84 36       	cpi	r24, 0x64	; 100
 580:	11 f0       	breq	.+4      	; 0x586 <__stack+0x87>
 582:	89 36       	cpi	r24, 0x69	; 105
 584:	31 f5       	brne	.+76     	; 0x5d2 <__stack+0xd3>
 586:	f8 01       	movw	r30, r16
 588:	27 ff       	sbrs	r18, 7
 58a:	07 c0       	rjmp	.+14     	; 0x59a <__stack+0x9b>
 58c:	60 81       	ld	r22, Z
 58e:	71 81       	ldd	r23, Z+1	; 0x01
 590:	82 81       	ldd	r24, Z+2	; 0x02
 592:	93 81       	ldd	r25, Z+3	; 0x03
 594:	0c 5f       	subi	r16, 0xFC	; 252
 596:	1f 4f       	sbci	r17, 0xFF	; 255
 598:	08 c0       	rjmp	.+16     	; 0x5aa <__stack+0xab>
 59a:	60 81       	ld	r22, Z
 59c:	71 81       	ldd	r23, Z+1	; 0x01
 59e:	07 2e       	mov	r0, r23
 5a0:	00 0c       	add	r0, r0
 5a2:	88 0b       	sbc	r24, r24
 5a4:	99 0b       	sbc	r25, r25
 5a6:	0e 5f       	subi	r16, 0xFE	; 254
 5a8:	1f 4f       	sbci	r17, 0xFF	; 255
 5aa:	2f 76       	andi	r18, 0x6F	; 111
 5ac:	72 2e       	mov	r7, r18
 5ae:	97 ff       	sbrs	r25, 7
 5b0:	09 c0       	rjmp	.+18     	; 0x5c4 <__stack+0xc5>
 5b2:	90 95       	com	r25
 5b4:	80 95       	com	r24
 5b6:	70 95       	com	r23
 5b8:	61 95       	neg	r22
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255
 5bc:	8f 4f       	sbci	r24, 0xFF	; 255
 5be:	9f 4f       	sbci	r25, 0xFF	; 255
 5c0:	20 68       	ori	r18, 0x80	; 128
 5c2:	72 2e       	mov	r7, r18
 5c4:	2a e0       	ldi	r18, 0x0A	; 10
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	a4 01       	movw	r20, r8
 5ca:	17 d1       	rcall	.+558    	; 0x7fa <__ultoa_invert>
 5cc:	a8 2e       	mov	r10, r24
 5ce:	a8 18       	sub	r10, r8
 5d0:	43 c0       	rjmp	.+134    	; 0x658 <__stack+0x159>
 5d2:	85 37       	cpi	r24, 0x75	; 117
 5d4:	29 f4       	brne	.+10     	; 0x5e0 <__stack+0xe1>
 5d6:	2f 7e       	andi	r18, 0xEF	; 239
 5d8:	b2 2e       	mov	r11, r18
 5da:	2a e0       	ldi	r18, 0x0A	; 10
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	25 c0       	rjmp	.+74     	; 0x62a <__stack+0x12b>
 5e0:	f2 2f       	mov	r31, r18
 5e2:	f9 7f       	andi	r31, 0xF9	; 249
 5e4:	bf 2e       	mov	r11, r31
 5e6:	8f 36       	cpi	r24, 0x6F	; 111
 5e8:	c1 f0       	breq	.+48     	; 0x61a <__stack+0x11b>
 5ea:	18 f4       	brcc	.+6      	; 0x5f2 <__stack+0xf3>
 5ec:	88 35       	cpi	r24, 0x58	; 88
 5ee:	79 f0       	breq	.+30     	; 0x60e <__stack+0x10f>
 5f0:	ad c0       	rjmp	.+346    	; 0x74c <__stack+0x24d>
 5f2:	80 37       	cpi	r24, 0x70	; 112
 5f4:	19 f0       	breq	.+6      	; 0x5fc <__stack+0xfd>
 5f6:	88 37       	cpi	r24, 0x78	; 120
 5f8:	21 f0       	breq	.+8      	; 0x602 <__stack+0x103>
 5fa:	a8 c0       	rjmp	.+336    	; 0x74c <__stack+0x24d>
 5fc:	2f 2f       	mov	r18, r31
 5fe:	20 61       	ori	r18, 0x10	; 16
 600:	b2 2e       	mov	r11, r18
 602:	b4 fe       	sbrs	r11, 4
 604:	0d c0       	rjmp	.+26     	; 0x620 <__stack+0x121>
 606:	8b 2d       	mov	r24, r11
 608:	84 60       	ori	r24, 0x04	; 4
 60a:	b8 2e       	mov	r11, r24
 60c:	09 c0       	rjmp	.+18     	; 0x620 <__stack+0x121>
 60e:	24 ff       	sbrs	r18, 4
 610:	0a c0       	rjmp	.+20     	; 0x626 <__stack+0x127>
 612:	9f 2f       	mov	r25, r31
 614:	96 60       	ori	r25, 0x06	; 6
 616:	b9 2e       	mov	r11, r25
 618:	06 c0       	rjmp	.+12     	; 0x626 <__stack+0x127>
 61a:	28 e0       	ldi	r18, 0x08	; 8
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	05 c0       	rjmp	.+10     	; 0x62a <__stack+0x12b>
 620:	20 e1       	ldi	r18, 0x10	; 16
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <__stack+0x12b>
 626:	20 e1       	ldi	r18, 0x10	; 16
 628:	32 e0       	ldi	r19, 0x02	; 2
 62a:	f8 01       	movw	r30, r16
 62c:	b7 fe       	sbrs	r11, 7
 62e:	07 c0       	rjmp	.+14     	; 0x63e <__stack+0x13f>
 630:	60 81       	ld	r22, Z
 632:	71 81       	ldd	r23, Z+1	; 0x01
 634:	82 81       	ldd	r24, Z+2	; 0x02
 636:	93 81       	ldd	r25, Z+3	; 0x03
 638:	0c 5f       	subi	r16, 0xFC	; 252
 63a:	1f 4f       	sbci	r17, 0xFF	; 255
 63c:	06 c0       	rjmp	.+12     	; 0x64a <__stack+0x14b>
 63e:	60 81       	ld	r22, Z
 640:	71 81       	ldd	r23, Z+1	; 0x01
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 5f       	subi	r16, 0xFE	; 254
 648:	1f 4f       	sbci	r17, 0xFF	; 255
 64a:	a4 01       	movw	r20, r8
 64c:	d6 d0       	rcall	.+428    	; 0x7fa <__ultoa_invert>
 64e:	a8 2e       	mov	r10, r24
 650:	a8 18       	sub	r10, r8
 652:	fb 2d       	mov	r31, r11
 654:	ff 77       	andi	r31, 0x7F	; 127
 656:	7f 2e       	mov	r7, r31
 658:	76 fe       	sbrs	r7, 6
 65a:	0b c0       	rjmp	.+22     	; 0x672 <__stack+0x173>
 65c:	37 2d       	mov	r19, r7
 65e:	3e 7f       	andi	r19, 0xFE	; 254
 660:	a5 14       	cp	r10, r5
 662:	50 f4       	brcc	.+20     	; 0x678 <__stack+0x179>
 664:	74 fe       	sbrs	r7, 4
 666:	0a c0       	rjmp	.+20     	; 0x67c <__stack+0x17d>
 668:	72 fc       	sbrc	r7, 2
 66a:	08 c0       	rjmp	.+16     	; 0x67c <__stack+0x17d>
 66c:	37 2d       	mov	r19, r7
 66e:	3e 7e       	andi	r19, 0xEE	; 238
 670:	05 c0       	rjmp	.+10     	; 0x67c <__stack+0x17d>
 672:	ba 2c       	mov	r11, r10
 674:	37 2d       	mov	r19, r7
 676:	03 c0       	rjmp	.+6      	; 0x67e <__stack+0x17f>
 678:	ba 2c       	mov	r11, r10
 67a:	01 c0       	rjmp	.+2      	; 0x67e <__stack+0x17f>
 67c:	b5 2c       	mov	r11, r5
 67e:	34 ff       	sbrs	r19, 4
 680:	0d c0       	rjmp	.+26     	; 0x69c <__stack+0x19d>
 682:	fe 01       	movw	r30, r28
 684:	ea 0d       	add	r30, r10
 686:	f1 1d       	adc	r31, r1
 688:	80 81       	ld	r24, Z
 68a:	80 33       	cpi	r24, 0x30	; 48
 68c:	11 f4       	brne	.+4      	; 0x692 <__stack+0x193>
 68e:	39 7e       	andi	r19, 0xE9	; 233
 690:	09 c0       	rjmp	.+18     	; 0x6a4 <__stack+0x1a5>
 692:	32 ff       	sbrs	r19, 2
 694:	06 c0       	rjmp	.+12     	; 0x6a2 <__stack+0x1a3>
 696:	b3 94       	inc	r11
 698:	b3 94       	inc	r11
 69a:	04 c0       	rjmp	.+8      	; 0x6a4 <__stack+0x1a5>
 69c:	83 2f       	mov	r24, r19
 69e:	86 78       	andi	r24, 0x86	; 134
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <__stack+0x1a5>
 6a2:	b3 94       	inc	r11
 6a4:	33 fd       	sbrc	r19, 3
 6a6:	12 c0       	rjmp	.+36     	; 0x6cc <__stack+0x1cd>
 6a8:	30 ff       	sbrs	r19, 0
 6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <__stack+0x1b9>
 6ac:	5a 2c       	mov	r5, r10
 6ae:	b3 14       	cp	r11, r3
 6b0:	18 f4       	brcc	.+6      	; 0x6b8 <__stack+0x1b9>
 6b2:	53 0c       	add	r5, r3
 6b4:	5b 18       	sub	r5, r11
 6b6:	b3 2c       	mov	r11, r3
 6b8:	b3 14       	cp	r11, r3
 6ba:	60 f4       	brcc	.+24     	; 0x6d4 <__stack+0x1d5>
 6bc:	b7 01       	movw	r22, r14
 6be:	80 e2       	ldi	r24, 0x20	; 32
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	3c 87       	std	Y+12, r19	; 0x0c
 6c4:	62 d0       	rcall	.+196    	; 0x78a <fputc>
 6c6:	b3 94       	inc	r11
 6c8:	3c 85       	ldd	r19, Y+12	; 0x0c
 6ca:	f6 cf       	rjmp	.-20     	; 0x6b8 <__stack+0x1b9>
 6cc:	b3 14       	cp	r11, r3
 6ce:	10 f4       	brcc	.+4      	; 0x6d4 <__stack+0x1d5>
 6d0:	3b 18       	sub	r3, r11
 6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <__stack+0x1d7>
 6d4:	31 2c       	mov	r3, r1
 6d6:	34 ff       	sbrs	r19, 4
 6d8:	11 c0       	rjmp	.+34     	; 0x6fc <__stack+0x1fd>
 6da:	b7 01       	movw	r22, r14
 6dc:	80 e3       	ldi	r24, 0x30	; 48
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	3c 87       	std	Y+12, r19	; 0x0c
 6e2:	53 d0       	rcall	.+166    	; 0x78a <fputc>
 6e4:	3c 85       	ldd	r19, Y+12	; 0x0c
 6e6:	32 ff       	sbrs	r19, 2
 6e8:	16 c0       	rjmp	.+44     	; 0x716 <__stack+0x217>
 6ea:	31 fd       	sbrc	r19, 1
 6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <__stack+0x1f5>
 6ee:	88 e7       	ldi	r24, 0x78	; 120
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <__stack+0x1f9>
 6f4:	88 e5       	ldi	r24, 0x58	; 88
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	b7 01       	movw	r22, r14
 6fa:	0c c0       	rjmp	.+24     	; 0x714 <__stack+0x215>
 6fc:	83 2f       	mov	r24, r19
 6fe:	86 78       	andi	r24, 0x86	; 134
 700:	51 f0       	breq	.+20     	; 0x716 <__stack+0x217>
 702:	31 ff       	sbrs	r19, 1
 704:	02 c0       	rjmp	.+4      	; 0x70a <__stack+0x20b>
 706:	8b e2       	ldi	r24, 0x2B	; 43
 708:	01 c0       	rjmp	.+2      	; 0x70c <__stack+0x20d>
 70a:	80 e2       	ldi	r24, 0x20	; 32
 70c:	37 fd       	sbrc	r19, 7
 70e:	8d e2       	ldi	r24, 0x2D	; 45
 710:	b7 01       	movw	r22, r14
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	3a d0       	rcall	.+116    	; 0x78a <fputc>
 716:	a5 14       	cp	r10, r5
 718:	30 f4       	brcc	.+12     	; 0x726 <__stack+0x227>
 71a:	b7 01       	movw	r22, r14
 71c:	80 e3       	ldi	r24, 0x30	; 48
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	34 d0       	rcall	.+104    	; 0x78a <fputc>
 722:	5a 94       	dec	r5
 724:	f8 cf       	rjmp	.-16     	; 0x716 <__stack+0x217>
 726:	aa 94       	dec	r10
 728:	f4 01       	movw	r30, r8
 72a:	ea 0d       	add	r30, r10
 72c:	f1 1d       	adc	r31, r1
 72e:	80 81       	ld	r24, Z
 730:	b7 01       	movw	r22, r14
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	2a d0       	rcall	.+84     	; 0x78a <fputc>
 736:	a1 10       	cpse	r10, r1
 738:	f6 cf       	rjmp	.-20     	; 0x726 <__stack+0x227>
 73a:	33 20       	and	r3, r3
 73c:	09 f4       	brne	.+2      	; 0x740 <__stack+0x241>
 73e:	5d ce       	rjmp	.-838    	; 0x3fa <vfprintf+0x22>
 740:	b7 01       	movw	r22, r14
 742:	80 e2       	ldi	r24, 0x20	; 32
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	21 d0       	rcall	.+66     	; 0x78a <fputc>
 748:	3a 94       	dec	r3
 74a:	f7 cf       	rjmp	.-18     	; 0x73a <__stack+0x23b>
 74c:	f7 01       	movw	r30, r14
 74e:	86 81       	ldd	r24, Z+6	; 0x06
 750:	97 81       	ldd	r25, Z+7	; 0x07
 752:	02 c0       	rjmp	.+4      	; 0x758 <__stack+0x259>
 754:	8f ef       	ldi	r24, 0xFF	; 255
 756:	9f ef       	ldi	r25, 0xFF	; 255
 758:	2c 96       	adiw	r28, 0x0c	; 12
 75a:	e2 e1       	ldi	r30, 0x12	; 18
 75c:	c8 c0       	rjmp	.+400    	; 0x8ee <__epilogue_restores__>

0000075e <strnlen_P>:
 75e:	fc 01       	movw	r30, r24
 760:	05 90       	lpm	r0, Z+
 762:	61 50       	subi	r22, 0x01	; 1
 764:	70 40       	sbci	r23, 0x00	; 0
 766:	01 10       	cpse	r0, r1
 768:	d8 f7       	brcc	.-10     	; 0x760 <strnlen_P+0x2>
 76a:	80 95       	com	r24
 76c:	90 95       	com	r25
 76e:	8e 0f       	add	r24, r30
 770:	9f 1f       	adc	r25, r31
 772:	08 95       	ret

00000774 <strnlen>:
 774:	fc 01       	movw	r30, r24
 776:	61 50       	subi	r22, 0x01	; 1
 778:	70 40       	sbci	r23, 0x00	; 0
 77a:	01 90       	ld	r0, Z+
 77c:	01 10       	cpse	r0, r1
 77e:	d8 f7       	brcc	.-10     	; 0x776 <strnlen+0x2>
 780:	80 95       	com	r24
 782:	90 95       	com	r25
 784:	8e 0f       	add	r24, r30
 786:	9f 1f       	adc	r25, r31
 788:	08 95       	ret

0000078a <fputc>:
 78a:	0f 93       	push	r16
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	fb 01       	movw	r30, r22
 794:	23 81       	ldd	r18, Z+3	; 0x03
 796:	21 fd       	sbrc	r18, 1
 798:	03 c0       	rjmp	.+6      	; 0x7a0 <fputc+0x16>
 79a:	8f ef       	ldi	r24, 0xFF	; 255
 79c:	9f ef       	ldi	r25, 0xFF	; 255
 79e:	28 c0       	rjmp	.+80     	; 0x7f0 <fputc+0x66>
 7a0:	22 ff       	sbrs	r18, 2
 7a2:	16 c0       	rjmp	.+44     	; 0x7d0 <fputc+0x46>
 7a4:	46 81       	ldd	r20, Z+6	; 0x06
 7a6:	57 81       	ldd	r21, Z+7	; 0x07
 7a8:	24 81       	ldd	r18, Z+4	; 0x04
 7aa:	35 81       	ldd	r19, Z+5	; 0x05
 7ac:	42 17       	cp	r20, r18
 7ae:	53 07       	cpc	r21, r19
 7b0:	44 f4       	brge	.+16     	; 0x7c2 <fputc+0x38>
 7b2:	a0 81       	ld	r26, Z
 7b4:	b1 81       	ldd	r27, Z+1	; 0x01
 7b6:	9d 01       	movw	r18, r26
 7b8:	2f 5f       	subi	r18, 0xFF	; 255
 7ba:	3f 4f       	sbci	r19, 0xFF	; 255
 7bc:	31 83       	std	Z+1, r19	; 0x01
 7be:	20 83       	st	Z, r18
 7c0:	8c 93       	st	X, r24
 7c2:	26 81       	ldd	r18, Z+6	; 0x06
 7c4:	37 81       	ldd	r19, Z+7	; 0x07
 7c6:	2f 5f       	subi	r18, 0xFF	; 255
 7c8:	3f 4f       	sbci	r19, 0xFF	; 255
 7ca:	37 83       	std	Z+7, r19	; 0x07
 7cc:	26 83       	std	Z+6, r18	; 0x06
 7ce:	10 c0       	rjmp	.+32     	; 0x7f0 <fputc+0x66>
 7d0:	eb 01       	movw	r28, r22
 7d2:	09 2f       	mov	r16, r25
 7d4:	18 2f       	mov	r17, r24
 7d6:	00 84       	ldd	r0, Z+8	; 0x08
 7d8:	f1 85       	ldd	r31, Z+9	; 0x09
 7da:	e0 2d       	mov	r30, r0
 7dc:	09 95       	icall
 7de:	89 2b       	or	r24, r25
 7e0:	e1 f6       	brne	.-72     	; 0x79a <fputc+0x10>
 7e2:	8e 81       	ldd	r24, Y+6	; 0x06
 7e4:	9f 81       	ldd	r25, Y+7	; 0x07
 7e6:	01 96       	adiw	r24, 0x01	; 1
 7e8:	9f 83       	std	Y+7, r25	; 0x07
 7ea:	8e 83       	std	Y+6, r24	; 0x06
 7ec:	81 2f       	mov	r24, r17
 7ee:	90 2f       	mov	r25, r16
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	1f 91       	pop	r17
 7f6:	0f 91       	pop	r16
 7f8:	08 95       	ret

000007fa <__ultoa_invert>:
 7fa:	fa 01       	movw	r30, r20
 7fc:	aa 27       	eor	r26, r26
 7fe:	28 30       	cpi	r18, 0x08	; 8
 800:	51 f1       	breq	.+84     	; 0x856 <__ultoa_invert+0x5c>
 802:	20 31       	cpi	r18, 0x10	; 16
 804:	81 f1       	breq	.+96     	; 0x866 <__ultoa_invert+0x6c>
 806:	e8 94       	clt
 808:	6f 93       	push	r22
 80a:	6e 7f       	andi	r22, 0xFE	; 254
 80c:	6e 5f       	subi	r22, 0xFE	; 254
 80e:	7f 4f       	sbci	r23, 0xFF	; 255
 810:	8f 4f       	sbci	r24, 0xFF	; 255
 812:	9f 4f       	sbci	r25, 0xFF	; 255
 814:	af 4f       	sbci	r26, 0xFF	; 255
 816:	b1 e0       	ldi	r27, 0x01	; 1
 818:	3e d0       	rcall	.+124    	; 0x896 <__ultoa_invert+0x9c>
 81a:	b4 e0       	ldi	r27, 0x04	; 4
 81c:	3c d0       	rcall	.+120    	; 0x896 <__ultoa_invert+0x9c>
 81e:	67 0f       	add	r22, r23
 820:	78 1f       	adc	r23, r24
 822:	89 1f       	adc	r24, r25
 824:	9a 1f       	adc	r25, r26
 826:	a1 1d       	adc	r26, r1
 828:	68 0f       	add	r22, r24
 82a:	79 1f       	adc	r23, r25
 82c:	8a 1f       	adc	r24, r26
 82e:	91 1d       	adc	r25, r1
 830:	a1 1d       	adc	r26, r1
 832:	6a 0f       	add	r22, r26
 834:	71 1d       	adc	r23, r1
 836:	81 1d       	adc	r24, r1
 838:	91 1d       	adc	r25, r1
 83a:	a1 1d       	adc	r26, r1
 83c:	20 d0       	rcall	.+64     	; 0x87e <__ultoa_invert+0x84>
 83e:	09 f4       	brne	.+2      	; 0x842 <__ultoa_invert+0x48>
 840:	68 94       	set
 842:	3f 91       	pop	r19
 844:	2a e0       	ldi	r18, 0x0A	; 10
 846:	26 9f       	mul	r18, r22
 848:	11 24       	eor	r1, r1
 84a:	30 19       	sub	r19, r0
 84c:	30 5d       	subi	r19, 0xD0	; 208
 84e:	31 93       	st	Z+, r19
 850:	de f6       	brtc	.-74     	; 0x808 <__ultoa_invert+0xe>
 852:	cf 01       	movw	r24, r30
 854:	08 95       	ret
 856:	46 2f       	mov	r20, r22
 858:	47 70       	andi	r20, 0x07	; 7
 85a:	40 5d       	subi	r20, 0xD0	; 208
 85c:	41 93       	st	Z+, r20
 85e:	b3 e0       	ldi	r27, 0x03	; 3
 860:	0f d0       	rcall	.+30     	; 0x880 <__ultoa_invert+0x86>
 862:	c9 f7       	brne	.-14     	; 0x856 <__ultoa_invert+0x5c>
 864:	f6 cf       	rjmp	.-20     	; 0x852 <__ultoa_invert+0x58>
 866:	46 2f       	mov	r20, r22
 868:	4f 70       	andi	r20, 0x0F	; 15
 86a:	40 5d       	subi	r20, 0xD0	; 208
 86c:	4a 33       	cpi	r20, 0x3A	; 58
 86e:	18 f0       	brcs	.+6      	; 0x876 <__ultoa_invert+0x7c>
 870:	49 5d       	subi	r20, 0xD9	; 217
 872:	31 fd       	sbrc	r19, 1
 874:	40 52       	subi	r20, 0x20	; 32
 876:	41 93       	st	Z+, r20
 878:	02 d0       	rcall	.+4      	; 0x87e <__ultoa_invert+0x84>
 87a:	a9 f7       	brne	.-22     	; 0x866 <__ultoa_invert+0x6c>
 87c:	ea cf       	rjmp	.-44     	; 0x852 <__ultoa_invert+0x58>
 87e:	b4 e0       	ldi	r27, 0x04	; 4
 880:	a6 95       	lsr	r26
 882:	97 95       	ror	r25
 884:	87 95       	ror	r24
 886:	77 95       	ror	r23
 888:	67 95       	ror	r22
 88a:	ba 95       	dec	r27
 88c:	c9 f7       	brne	.-14     	; 0x880 <__ultoa_invert+0x86>
 88e:	00 97       	sbiw	r24, 0x00	; 0
 890:	61 05       	cpc	r22, r1
 892:	71 05       	cpc	r23, r1
 894:	08 95       	ret
 896:	9b 01       	movw	r18, r22
 898:	ac 01       	movw	r20, r24
 89a:	0a 2e       	mov	r0, r26
 89c:	06 94       	lsr	r0
 89e:	57 95       	ror	r21
 8a0:	47 95       	ror	r20
 8a2:	37 95       	ror	r19
 8a4:	27 95       	ror	r18
 8a6:	ba 95       	dec	r27
 8a8:	c9 f7       	brne	.-14     	; 0x89c <__ultoa_invert+0xa2>
 8aa:	62 0f       	add	r22, r18
 8ac:	73 1f       	adc	r23, r19
 8ae:	84 1f       	adc	r24, r20
 8b0:	95 1f       	adc	r25, r21
 8b2:	a0 1d       	adc	r26, r0
 8b4:	08 95       	ret

000008b6 <__prologue_saves__>:
 8b6:	2f 92       	push	r2
 8b8:	3f 92       	push	r3
 8ba:	4f 92       	push	r4
 8bc:	5f 92       	push	r5
 8be:	6f 92       	push	r6
 8c0:	7f 92       	push	r7
 8c2:	8f 92       	push	r8
 8c4:	9f 92       	push	r9
 8c6:	af 92       	push	r10
 8c8:	bf 92       	push	r11
 8ca:	cf 92       	push	r12
 8cc:	df 92       	push	r13
 8ce:	ef 92       	push	r14
 8d0:	ff 92       	push	r15
 8d2:	0f 93       	push	r16
 8d4:	1f 93       	push	r17
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29
 8da:	cd b7       	in	r28, 0x3d	; 61
 8dc:	de b7       	in	r29, 0x3e	; 62
 8de:	ca 1b       	sub	r28, r26
 8e0:	db 0b       	sbc	r29, r27
 8e2:	0f b6       	in	r0, 0x3f	; 63
 8e4:	f8 94       	cli
 8e6:	de bf       	out	0x3e, r29	; 62
 8e8:	0f be       	out	0x3f, r0	; 63
 8ea:	cd bf       	out	0x3d, r28	; 61
 8ec:	09 94       	ijmp

000008ee <__epilogue_restores__>:
 8ee:	2a 88       	ldd	r2, Y+18	; 0x12
 8f0:	39 88       	ldd	r3, Y+17	; 0x11
 8f2:	48 88       	ldd	r4, Y+16	; 0x10
 8f4:	5f 84       	ldd	r5, Y+15	; 0x0f
 8f6:	6e 84       	ldd	r6, Y+14	; 0x0e
 8f8:	7d 84       	ldd	r7, Y+13	; 0x0d
 8fa:	8c 84       	ldd	r8, Y+12	; 0x0c
 8fc:	9b 84       	ldd	r9, Y+11	; 0x0b
 8fe:	aa 84       	ldd	r10, Y+10	; 0x0a
 900:	b9 84       	ldd	r11, Y+9	; 0x09
 902:	c8 84       	ldd	r12, Y+8	; 0x08
 904:	df 80       	ldd	r13, Y+7	; 0x07
 906:	ee 80       	ldd	r14, Y+6	; 0x06
 908:	fd 80       	ldd	r15, Y+5	; 0x05
 90a:	0c 81       	ldd	r16, Y+4	; 0x04
 90c:	1b 81       	ldd	r17, Y+3	; 0x03
 90e:	aa 81       	ldd	r26, Y+2	; 0x02
 910:	b9 81       	ldd	r27, Y+1	; 0x01
 912:	ce 0f       	add	r28, r30
 914:	d1 1d       	adc	r29, r1
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	f8 94       	cli
 91a:	de bf       	out	0x3e, r29	; 62
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	cd bf       	out	0x3d, r28	; 61
 920:	ed 01       	movw	r28, r26
 922:	08 95       	ret

00000924 <_exit>:
 924:	f8 94       	cli

00000926 <__stop_program>:
 926:	ff cf       	rjmp	.-2      	; 0x926 <__stop_program>
