
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  00001142  000011d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001142  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  0080018e  0080018e  00001264  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ed9  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002de  00000000  00000000  00002279  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a4  00000000  00000000  00002557  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  000028fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000408  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075d  00000000  00000000  00002ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003645  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1f c0       	rjmp	.+62     	; 0x40 <__ctors_end>
       2:	39 c0       	rjmp	.+114    	; 0x76 <__bad_interrupt>
       4:	38 c0       	rjmp	.+112    	; 0x76 <__bad_interrupt>
       6:	37 c0       	rjmp	.+110    	; 0x76 <__bad_interrupt>
       8:	36 c0       	rjmp	.+108    	; 0x76 <__bad_interrupt>
       a:	35 c0       	rjmp	.+106    	; 0x76 <__bad_interrupt>
       c:	34 c0       	rjmp	.+104    	; 0x76 <__bad_interrupt>
       e:	33 c0       	rjmp	.+102    	; 0x76 <__bad_interrupt>
      10:	32 c0       	rjmp	.+100    	; 0x76 <__bad_interrupt>
      12:	31 c0       	rjmp	.+98     	; 0x76 <__bad_interrupt>
      14:	30 c0       	rjmp	.+96     	; 0x76 <__bad_interrupt>
      16:	2f c0       	rjmp	.+94     	; 0x76 <__bad_interrupt>
      18:	2e c0       	rjmp	.+92     	; 0x76 <__bad_interrupt>
      1a:	2d c0       	rjmp	.+90     	; 0x76 <__bad_interrupt>
      1c:	2c c0       	rjmp	.+88     	; 0x76 <__bad_interrupt>
      1e:	2b c0       	rjmp	.+86     	; 0x76 <__bad_interrupt>
      20:	2a c0       	rjmp	.+84     	; 0x76 <__bad_interrupt>
      22:	29 c0       	rjmp	.+82     	; 0x76 <__bad_interrupt>
      24:	ad c0       	rjmp	.+346    	; 0x180 <__vector_18>
      26:	27 c0       	rjmp	.+78     	; 0x76 <__bad_interrupt>
      28:	26 c0       	rjmp	.+76     	; 0x76 <__bad_interrupt>
      2a:	25 c0       	rjmp	.+74     	; 0x76 <__bad_interrupt>
      2c:	24 c0       	rjmp	.+72     	; 0x76 <__bad_interrupt>
      2e:	23 c0       	rjmp	.+70     	; 0x76 <__bad_interrupt>
      30:	22 c0       	rjmp	.+68     	; 0x76 <__bad_interrupt>
      32:	21 c0       	rjmp	.+66     	; 0x76 <__bad_interrupt>

00000034 <__trampolines_end>:
      34:	63 64       	ori	r22, 0x43	; 67
      36:	69 6e       	ori	r22, 0xE9	; 233
      38:	6f 70       	andi	r22, 0x0F	; 15
      3a:	73 75       	andi	r23, 0x53	; 83
      3c:	78 58       	subi	r23, 0x88	; 136
      3e:	5b 00       	.word	0x005b	; ????

00000040 <__ctors_end>:
      40:	11 24       	eor	r1, r1
      42:	1f be       	out	0x3f, r1	; 63
      44:	cf ef       	ldi	r28, 0xFF	; 255
      46:	d4 e0       	ldi	r29, 0x04	; 4
      48:	de bf       	out	0x3e, r29	; 62
      4a:	cd bf       	out	0x3d, r28	; 61

0000004c <__do_copy_data>:
      4c:	11 e0       	ldi	r17, 0x01	; 1
      4e:	a0 e0       	ldi	r26, 0x00	; 0
      50:	b1 e0       	ldi	r27, 0x01	; 1
      52:	e2 e4       	ldi	r30, 0x42	; 66
      54:	f1 e1       	ldi	r31, 0x11	; 17
      56:	02 c0       	rjmp	.+4      	; 0x5c <__do_copy_data+0x10>
      58:	05 90       	lpm	r0, Z+
      5a:	0d 92       	st	X+, r0
      5c:	ae 38       	cpi	r26, 0x8E	; 142
      5e:	b1 07       	cpc	r27, r17
      60:	d9 f7       	brne	.-10     	; 0x58 <__do_copy_data+0xc>

00000062 <__do_clear_bss>:
      62:	21 e0       	ldi	r18, 0x01	; 1
      64:	ae e8       	ldi	r26, 0x8E	; 142
      66:	b1 e0       	ldi	r27, 0x01	; 1
      68:	01 c0       	rjmp	.+2      	; 0x6c <.do_clear_bss_start>

0000006a <.do_clear_bss_loop>:
      6a:	1d 92       	st	X+, r1

0000006c <.do_clear_bss_start>:
      6c:	a6 3d       	cpi	r26, 0xD6	; 214
      6e:	b2 07       	cpc	r27, r18
      70:	e1 f7       	brne	.-8      	; 0x6a <.do_clear_bss_loop>
      72:	c3 d1       	rcall	.+902    	; 0x3fa <main>
      74:	64 c8       	rjmp	.-3896   	; 0xfffff13e <__eeprom_end+0xff7ef13e>

00000076 <__bad_interrupt>:
      76:	c4 cf       	rjmp	.-120    	; 0x0 <__vectors>

00000078 <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
      78:	43 98       	cbi	0x08, 3	; 8
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
      7a:	88 23       	and	r24, r24
      7c:	0c f4       	brge	.+2      	; 0x80 <lcd_write_4+0x8>
      7e:	43 9a       	sbi	0x08, 3	; 8

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
      80:	42 98       	cbi	0x08, 2	; 8
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
      82:	86 fd       	sbrc	r24, 6
      84:	42 9a       	sbi	0x08, 2	; 8

    lcd_D5_port &= ~(1<<lcd_D5_bit);
      86:	41 98       	cbi	0x08, 1	; 8
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
      88:	85 fd       	sbrc	r24, 5
      8a:	41 9a       	sbi	0x08, 1	; 8

    lcd_D4_port &= ~(1<<lcd_D4_bit);
      8c:	40 98       	cbi	0x08, 0	; 8
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
      8e:	84 fd       	sbrc	r24, 4
      90:	40 9a       	sbi	0x08, 0	; 8

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
      92:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      94:	82 e0       	ldi	r24, 0x02	; 2
      96:	8a 95       	dec	r24
      98:	f1 f7       	brne	.-4      	; 0x96 <lcd_write_4+0x1e>
      9a:	00 c0       	rjmp	.+0      	; 0x9c <lcd_write_4+0x24>
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
      9c:	2b 98       	cbi	0x05, 3	; 5
      9e:	82 e0       	ldi	r24, 0x02	; 2
      a0:	8a 95       	dec	r24
      a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_write_4+0x28>
      a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcd_write_4+0x2e>
      a6:	08 95       	ret

000000a8 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
      a8:	cf 93       	push	r28
      aa:	c8 2f       	mov	r28, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
      ac:	2d 9a       	sbi	0x05, 5	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
      ae:	2b 98       	cbi	0x05, 3	; 5
    lcd_write_4(theData);                           // write the upper 4-bits of the data
      b0:	e3 df       	rcall	.-58     	; 0x78 <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
      b2:	8c 2f       	mov	r24, r28
      b4:	82 95       	swap	r24
      b6:	80 7f       	andi	r24, 0xF0	; 240
      b8:	df df       	rcall	.-66     	; 0x78 <lcd_write_4>
}
      ba:	cf 91       	pop	r28
      bc:	08 95       	ret

000000be <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
      be:	cf 93       	push	r28
      c0:	df 93       	push	r29
      c2:	ec 01       	movw	r28, r24
    int i = 0;                             // character counter*/
    while (theString[i] != 0)
      c4:	88 81       	ld	r24, Y
      c6:	88 23       	and	r24, r24
      c8:	49 f0       	breq	.+18     	; 0xdc <lcd_write_string_4d+0x1e>
      ca:	21 96       	adiw	r28, 0x01	; 1
    {
        lcd_write_character_4d(theString[i]);
      cc:	ed df       	rcall	.-38     	; 0xa8 <lcd_write_character_4d>
      ce:	8a e6       	ldi	r24, 0x6A	; 106
      d0:	8a 95       	dec	r24
      d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_write_string_4d+0x12>
      d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_write_string_4d+0x18>
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    int i = 0;                             // character counter*/
    while (theString[i] != 0)
      d6:	89 91       	ld	r24, Y+
      d8:	81 11       	cpse	r24, r1
      da:	f8 cf       	rjmp	.-16     	; 0xcc <lcd_write_string_4d+0xe>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(40);                              // 40 uS delay (min)
    }
}
      dc:	df 91       	pop	r29
      de:	cf 91       	pop	r28
      e0:	08 95       	ret

000000e2 <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
      e2:	cf 93       	push	r28
      e4:	c8 2f       	mov	r28, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
      e6:	2d 98       	cbi	0x05, 5	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
      e8:	2b 98       	cbi	0x05, 3	; 5
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
      ea:	c6 df       	rcall	.-116    	; 0x78 <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
      ec:	8c 2f       	mov	r24, r28
      ee:	82 95       	swap	r24
      f0:	80 7f       	andi	r24, 0xF0	; 240
      f2:	c2 df       	rcall	.-124    	; 0x78 <lcd_write_4>
}
      f4:	cf 91       	pop	r28
      f6:	08 95       	ret

000000f8 <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f8:	2f ef       	ldi	r18, 0xFF	; 255
      fa:	80 e7       	ldi	r24, 0x70	; 112
      fc:	92 e0       	ldi	r25, 0x02	; 2
      fe:	21 50       	subi	r18, 0x01	; 1
     100:	80 40       	sbci	r24, 0x00	; 0
     102:	90 40       	sbci	r25, 0x00	; 0
     104:	e1 f7       	brne	.-8      	; 0xfe <lcd_init_4d+0x6>
     106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_init_4d+0x10>
     108:	00 00       	nop
{
// Power-up delay
    _delay_ms(100);                                 // initial 100 mSec delay

// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     10a:	2d 98       	cbi	0x05, 5	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     10c:	2b 98       	cbi	0x05, 3	; 5

// Reset the LCD controller
    lcd_write_4(lcd_FunctionSet8bit);                 // first part of reset sequence
     10e:	83 e0       	ldi	r24, 0x03	; 3
     110:	b3 df       	rcall	.-154    	; 0x78 <lcd_write_4>
     112:	8f e1       	ldi	r24, 0x1F	; 31
     114:	9e e4       	ldi	r25, 0x4E	; 78
     116:	01 97       	sbiw	r24, 0x01	; 1
     118:	f1 f7       	brne	.-4      	; 0x116 <lcd_init_4d+0x1e>
     11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_init_4d+0x24>
     11c:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionSet8bit);                 // second part of reset sequence
     11e:	83 e0       	ldi	r24, 0x03	; 3
     120:	ab df       	rcall	.-170    	; 0x78 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     122:	8f e8       	ldi	r24, 0x8F	; 143
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	01 97       	sbiw	r24, 0x01	; 1
     128:	f1 f7       	brne	.-4      	; 0x126 <lcd_init_4d+0x2e>
     12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_init_4d+0x34>
     12c:	00 00       	nop
    _delay_us(200);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionSet8bit);                 // third part of reset sequence
     12e:	83 e0       	ldi	r24, 0x03	; 3
     130:	a3 df       	rcall	.-186    	; 0x78 <lcd_write_4>
     132:	8f e8       	ldi	r24, 0x8F	; 143
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	01 97       	sbiw	r24, 0x01	; 1
     138:	f1 f7       	brne	.-4      	; 0x136 <lcd_init_4d+0x3e>
     13a:	00 c0       	rjmp	.+0      	; 0x13c <lcd_init_4d+0x44>
     13c:	00 00       	nop
    _delay_us(200);                                 // this delay is omitted in the data sheet
 
    lcd_write_4(lcd_functionSet4bit);               // set 4-bit mode
     13e:	82 e8       	ldi	r24, 0x82	; 130
     140:	9b df       	rcall	.-202    	; 0x78 <lcd_write_4>
     142:	9d e0       	ldi	r25, 0x0D	; 13
     144:	9a 95       	dec	r25
     146:	f1 f7       	brne	.-4      	; 0x144 <lcd_init_4d+0x4c>
     148:	00 00       	nop
    _delay_us(5);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_functionSet4bit);   // set mode, lines, and font
     14a:	82 e8       	ldi	r24, 0x82	; 130
     14c:	ca df       	rcall	.-108    	; 0xe2 <lcd_write_instruction_4d>
     14e:	2a e6       	ldi	r18, 0x6A	; 106
     150:	2a 95       	dec	r18
     152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init_4d+0x58>
     154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init_4d+0x5e>
    _delay_us(40);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_clear);             // clear display RAM
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	c4 df       	rcall	.-120    	; 0xe2 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15a:	8f e0       	ldi	r24, 0x0F	; 15
     15c:	97 e2       	ldi	r25, 0x27	; 39
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <lcd_init_4d+0x66>
     162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_init_4d+0x6c>
     164:	00 00       	nop
    _delay_ms(5);                                   // 1.64 mS delay (min)

// Display On/Off Control instruction
	lcd_write_instruction_4d(lcd_displayOn);         // turn the display ON
     166:	8c e0       	ldi	r24, 0x0C	; 12
     168:	bc df       	rcall	.-136    	; 0xe2 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     16a:	9a e6       	ldi	r25, 0x6A	; 106
     16c:	9a 95       	dec	r25
     16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_init_4d+0x74>
     170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_init_4d+0x7a>
	_delay_us(40);                                  // 40uS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_entryMode);         // set desired shift characteristics
     172:	86 e0       	ldi	r24, 0x06	; 6
     174:	b6 df       	rcall	.-148    	; 0xe2 <lcd_write_instruction_4d>
     176:	2a e6       	ldi	r18, 0x6A	; 106
     178:	2a 95       	dec	r18
     17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_init_4d+0x80>
     17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_init_4d+0x86>
     17e:	08 95       	ret

00000180 <__vector_18>:
	*/
}


ISR(USART_RX_vect)
{
     180:	1f 92       	push	r1
     182:	0f 92       	push	r0
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	0f 92       	push	r0
     188:	11 24       	eor	r1, r1
     18a:	8f 93       	push	r24
     18c:	ef 93       	push	r30
     18e:	ff 93       	push	r31
	// UART receive interrupt handler.
	// To do: check and warn if buffer overflows.
	
	char c = UDR0;
     190:	80 91 c6 00 	lds	r24, 0x00C6
	rx_buffer[rx_buffer_head] = c;
     194:	e0 91 92 01 	lds	r30, 0x0192
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	ea 56       	subi	r30, 0x6A	; 106
     19c:	fe 4f       	sbci	r31, 0xFE	; 254
     19e:	80 83       	st	Z, r24
	if (rx_buffer_head == RX_BUFFER_SIZE - 1)
     1a0:	80 91 92 01 	lds	r24, 0x0192
     1a4:	8f 33       	cpi	r24, 0x3F	; 63
     1a6:	19 f4       	brne	.+6      	; 0x1ae <__vector_18+0x2e>
	rx_buffer_head = 0;
     1a8:	10 92 92 01 	sts	0x0192, r1
     1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <__vector_18+0x38>
	else
	rx_buffer_head++;
     1ae:	80 91 92 01 	lds	r24, 0x0192
     1b2:	8f 5f       	subi	r24, 0xFF	; 255
     1b4:	80 93 92 01 	sts	0x0192, r24
}
     1b8:	ff 91       	pop	r31
     1ba:	ef 91       	pop	r30
     1bc:	8f 91       	pop	r24
     1be:	0f 90       	pop	r0
     1c0:	0f be       	out	0x3f, r0	; 63
     1c2:	0f 90       	pop	r0
     1c4:	1f 90       	pop	r1
     1c6:	18 95       	reti

000001c8 <usart_init>:
	unsigned short s;
	
	// Set Baud rate, controlled with #define above.
	
	s = (double)F_CPU / (BAUD_RATE*16.0) - 1.0;
	UBRR0H = (s & 0xFF00);
     1c8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (s & 0x00FF);
     1cc:	83 e3       	ldi	r24, 0x33	; 51
     1ce:	80 93 c4 00 	sts	0x00C4, r24

	// Receive complete interrupt enable: RXCIE0
	// Receiver & Transmitter enable: RXEN0,TXEN0

	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     1d2:	88 e9       	ldi	r24, 0x98	; 152
     1d4:	80 93 c1 00 	sts	0x00C1, r24

	// Along with UCSZ02 bit in UCSR0B, set 8 bits
	
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
     1d8:	86 e0       	ldi	r24, 0x06	; 6
     1da:	80 93 c2 00 	sts	0x00C2, r24
	
	DDRD |= (1<< 1);         // PD0 is output (TX)
     1de:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(1<< 0);        // PD1 is input (Rx)
     1e0:	50 98       	cbi	0x0a, 0	; 10
	
	// Empty buffers
	
	rx_buffer_head = 0;
     1e2:	10 92 92 01 	sts	0x0192, r1
	rx_buffer_tail = 0;
     1e6:	10 92 93 01 	sts	0x0193, r1
     1ea:	08 95       	ret

000001ec <usart_putc>:
	// Send "c" via the USART.  Uses poling
	// (and it blocks). Wait for UDRE0 to become
	// set (=1), which indicates the UDR0 is empty
	// and can accept the next character.

	while (!(UCSR0A & (1<<UDRE0)))
     1ec:	e0 ec       	ldi	r30, 0xC0	; 192
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	90 81       	ld	r25, Z
     1f2:	95 ff       	sbrs	r25, 5
     1f4:	fd cf       	rjmp	.-6      	; 0x1f0 <usart_putc+0x4>
	;
	UDR0 = c;
     1f6:	80 93 c6 00 	sts	0x00C6, r24
     1fa:	08 95       	ret

000001fc <usart_prints>:
}

void usart_prints(const char *ptr){
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
	
	// Send NULL-terminated data from SRAM.
	// Uses polling (and it blocks).

	while(*ptr) {
     200:	fc 01       	movw	r30, r24
     202:	20 81       	ld	r18, Z
     204:	22 23       	and	r18, r18
     206:	69 f0       	breq	.+26     	; 0x222 <usart_prints+0x26>
     208:	dc 01       	movw	r26, r24
     20a:	11 96       	adiw	r26, 0x01	; 1
		while (!( UCSR0A & (1<<UDRE0)))
     20c:	e0 ec       	ldi	r30, 0xC0	; 192
     20e:	f0 e0       	ldi	r31, 0x00	; 0
		;
		UDR0 = *(ptr++);
     210:	c6 ec       	ldi	r28, 0xC6	; 198
     212:	d0 e0       	ldi	r29, 0x00	; 0
	
	// Send NULL-terminated data from SRAM.
	// Uses polling (and it blocks).

	while(*ptr) {
		while (!( UCSR0A & (1<<UDRE0)))
     214:	90 81       	ld	r25, Z
     216:	95 ff       	sbrs	r25, 5
     218:	fd cf       	rjmp	.-6      	; 0x214 <usart_prints+0x18>
		;
		UDR0 = *(ptr++);
     21a:	28 83       	st	Y, r18
void usart_prints(const char *ptr){
	
	// Send NULL-terminated data from SRAM.
	// Uses polling (and it blocks).

	while(*ptr) {
     21c:	2d 91       	ld	r18, X+
     21e:	21 11       	cpse	r18, r1
     220:	f9 cf       	rjmp	.-14     	; 0x214 <usart_prints+0x18>
		while (!( UCSR0A & (1<<UDRE0)))
		;
		UDR0 = *(ptr++);
	}
}
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <usart_getc>:
	
	unsigned char c;
	
	// Wait for a character in the buffer.

	while (rx_buffer_tail == rx_buffer_head)
     228:	90 91 93 01 	lds	r25, 0x0193
     22c:	80 91 92 01 	lds	r24, 0x0192
     230:	98 17       	cp	r25, r24
     232:	d1 f3       	breq	.-12     	; 0x228 <usart_getc>
	;
	
	c = rx_buffer[rx_buffer_tail];
     234:	e0 91 93 01 	lds	r30, 0x0193
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	ea 56       	subi	r30, 0x6A	; 106
     23c:	fe 4f       	sbci	r31, 0xFE	; 254
     23e:	80 81       	ld	r24, Z
	if (rx_buffer_tail == RX_BUFFER_SIZE-1)
     240:	90 91 93 01 	lds	r25, 0x0193
     244:	9f 33       	cpi	r25, 0x3F	; 63
     246:	19 f4       	brne	.+6      	; 0x24e <usart_getc+0x26>
	rx_buffer_tail = 0;
     248:	10 92 93 01 	sts	0x0193, r1
     24c:	08 95       	ret
	else
	rx_buffer_tail++;
     24e:	90 91 93 01 	lds	r25, 0x0193
     252:	9f 5f       	subi	r25, 0xFF	; 255
     254:	90 93 93 01 	sts	0x0193, r25
	return c;
}
     258:	08 95       	ret

0000025a <getDate>:
	return(freq_cntr_freq_divd_by_10);
}

// UART
void getDate(int *yy,int *mm, int*dd)
{
     25a:	2f 92       	push	r2
     25c:	3f 92       	push	r3
     25e:	4f 92       	push	r4
     260:	5f 92       	push	r5
     262:	6f 92       	push	r6
     264:	7f 92       	push	r7
     266:	8f 92       	push	r8
     268:	9f 92       	push	r9
     26a:	af 92       	push	r10
     26c:	bf 92       	push	r11
     26e:	cf 92       	push	r12
     270:	df 92       	push	r13
     272:	ef 92       	push	r14
     274:	ff 92       	push	r15
     276:	0f 93       	push	r16
     278:	1f 93       	push	r17
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
     282:	27 97       	sbiw	r28, 0x07	; 7
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	de bf       	out	0x3e, r29	; 62
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	cd bf       	out	0x3d, r28	; 61
     28e:	5c 01       	movw	r10, r24
     290:	4b 01       	movw	r8, r22
     292:	3a 01       	movw	r6, r20
	char temp[5];
	int i;
	usart_prints("\n");
     294:	8b e8       	ldi	r24, 0x8B	; 139
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	b1 df       	rcall	.-158    	; 0x1fc <usart_prints>
	usart_prints("\n");
     29a:	8b e8       	ldi	r24, 0x8B	; 139
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	ae df       	rcall	.-164    	; 0x1fc <usart_prints>
	usart_prints("\n");
     2a0:	8b e8       	ldi	r24, 0x8B	; 139
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	ab df       	rcall	.-170    	; 0x1fc <usart_prints>
     2a6:	ce 01       	movw	r24, r28
     2a8:	01 96       	adiw	r24, 0x01	; 1
     2aa:	6c 01       	movw	r12, r24
     2ac:	7e 01       	movw	r14, r28
     2ae:	96 e0       	ldi	r25, 0x06	; 6
     2b0:	e9 0e       	add	r14, r25
     2b2:	f1 1c       	adc	r15, r1
	do {
	usart_prints("\nPlease Enter Year (yyyy):");
     2b4:	ce 82       	std	Y+6, r12	; 0x06
     2b6:	df 82       	std	Y+7, r13	; 0x07
	{
		temp[i] = usart_getc();    // Get character
		usart_putc(temp[i]);       // Echo it back
	}
	temp[i] = '\0';
	sscanf(temp,"%d",yy);
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f8 e4       	ldi	r31, 0x48	; 72
     2bc:	4f 2e       	mov	r4, r31
     2be:	f1 e0       	ldi	r31, 0x01	; 1
     2c0:	5f 2e       	mov	r5, r31
     2c2:	f0 2d       	mov	r31, r0
	int i;
	usart_prints("\n");
	usart_prints("\n");
	usart_prints("\n");
	do {
	usart_prints("\nPlease Enter Year (yyyy):");
     2c4:	8d e2       	ldi	r24, 0x2D	; 45
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	99 df       	rcall	.-206    	; 0x1fc <usart_prints>
     2ca:	3c 2c       	mov	r3, r12
     2cc:	2d 2c       	mov	r2, r13
     2ce:	0e 81       	ldd	r16, Y+6	; 0x06
     2d0:	1f 81       	ldd	r17, Y+7	; 0x07
	for (i = 0; i <= 4; i++)
	{
		temp[i] = usart_getc();    // Get character
     2d2:	aa df       	rcall	.-172    	; 0x228 <usart_getc>
     2d4:	f8 01       	movw	r30, r16
     2d6:	81 93       	st	Z+, r24
     2d8:	8f 01       	movw	r16, r30
		usart_putc(temp[i]);       // Echo it back
     2da:	88 df       	rcall	.-240    	; 0x1ec <usart_putc>
	usart_prints("\n");
	usart_prints("\n");
	usart_prints("\n");
	do {
	usart_prints("\nPlease Enter Year (yyyy):");
	for (i = 0; i <= 4; i++)
     2dc:	0e 15       	cp	r16, r14
     2de:	1f 05       	cpc	r17, r15
     2e0:	c1 f7       	brne	.-16     	; 0x2d2 <getDate+0x78>
	{
		temp[i] = usart_getc();    // Get character
		usart_putc(temp[i]);       // Echo it back
	}
	temp[i] = '\0';
     2e2:	1e 82       	std	Y+6, r1	; 0x06
	sscanf(temp,"%d",yy);
     2e4:	bf 92       	push	r11
     2e6:	af 92       	push	r10
     2e8:	5f 92       	push	r5
     2ea:	4f 92       	push	r4
     2ec:	df 92       	push	r13
     2ee:	cf 92       	push	r12
     2f0:	6e d1       	rcall	.+732    	; 0x5ce <sscanf>
	} while(*yy < 2016 || *yy > 2020);
     2f2:	f5 01       	movw	r30, r10
     2f4:	80 81       	ld	r24, Z
     2f6:	91 81       	ldd	r25, Z+1	; 0x01
     2f8:	80 5e       	subi	r24, 0xE0	; 224
     2fa:	97 40       	sbci	r25, 0x07	; 7
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	05 97       	sbiw	r24, 0x05	; 5
     30a:	e0 f6       	brcc	.-72     	; 0x2c4 <getDate+0x6a>
     30c:	7e 01       	movw	r14, r28
     30e:	f4 e0       	ldi	r31, 0x04	; 4
     310:	ef 0e       	add	r14, r31
     312:	f1 1c       	adc	r15, r1
	
	do {
	usart_prints("\nPlease Enter Month (mm):");
     314:	3e 82       	std	Y+6, r3	; 0x06
     316:	2f 82       	std	Y+7, r2	; 0x07
	{
		temp[i] = usart_getc();    // Get character
		usart_putc(temp[i]);       // Echo it back
	}
	temp[i] = '\0';
	sscanf(temp,"%d",mm);
     318:	0f 2e       	mov	r0, r31
     31a:	f8 e4       	ldi	r31, 0x48	; 72
     31c:	af 2e       	mov	r10, r31
     31e:	f1 e0       	ldi	r31, 0x01	; 1
     320:	bf 2e       	mov	r11, r31
     322:	f0 2d       	mov	r31, r0
     324:	ce 01       	movw	r24, r28
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	2c 01       	movw	r4, r24
	temp[i] = '\0';
	sscanf(temp,"%d",yy);
	} while(*yy < 2016 || *yy > 2020);
	
	do {
	usart_prints("\nPlease Enter Month (mm):");
     32a:	8b e4       	ldi	r24, 0x4B	; 75
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	66 df       	rcall	.-308    	; 0x1fc <usart_prints>
     330:	67 01       	movw	r12, r14
     332:	0e 81       	ldd	r16, Y+6	; 0x06
     334:	1f 81       	ldd	r17, Y+7	; 0x07
	for (i = 0; i <= 2; i++)
	{
		temp[i] = usart_getc();    // Get character
     336:	78 df       	rcall	.-272    	; 0x228 <usart_getc>
     338:	f8 01       	movw	r30, r16
     33a:	81 93       	st	Z+, r24
     33c:	8f 01       	movw	r16, r30
		usart_putc(temp[i]);       // Echo it back
     33e:	56 df       	rcall	.-340    	; 0x1ec <usart_putc>
	sscanf(temp,"%d",yy);
	} while(*yy < 2016 || *yy > 2020);
	
	do {
	usart_prints("\nPlease Enter Month (mm):");
	for (i = 0; i <= 2; i++)
     340:	0e 15       	cp	r16, r14
     342:	1f 05       	cpc	r17, r15
     344:	c1 f7       	brne	.-16     	; 0x336 <getDate+0xdc>
	{
		temp[i] = usart_getc();    // Get character
		usart_putc(temp[i]);       // Echo it back
	}
	temp[i] = '\0';
     346:	1c 82       	std	Y+4, r1	; 0x04
	sscanf(temp,"%d",mm);
     348:	9f 92       	push	r9
     34a:	8f 92       	push	r8
     34c:	bf 92       	push	r11
     34e:	af 92       	push	r10
     350:	5f 92       	push	r5
     352:	4f 92       	push	r4
     354:	3c d1       	rcall	.+632    	; 0x5ce <sscanf>
	} while(*mm < 1 || *mm > 12);
     356:	f4 01       	movw	r30, r8
     358:	80 81       	ld	r24, Z
     35a:	91 81       	ldd	r25, Z+1	; 0x01
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0c 97       	sbiw	r24, 0x0c	; 12
     36c:	f0 f6       	brcc	.-68     	; 0x32a <getDate+0xd0>
	{
		temp[i] = usart_getc();    // Get character
		usart_putc(temp[i]);       // Echo it back
	}
	temp[i] = '\0';
	sscanf(temp,"%d",dd);
     36e:	0f 2e       	mov	r0, r31
     370:	f8 e4       	ldi	r31, 0x48	; 72
     372:	ef 2e       	mov	r14, r31
     374:	f1 e0       	ldi	r31, 0x01	; 1
     376:	ff 2e       	mov	r15, r31
     378:	f0 2d       	mov	r31, r0
     37a:	ce 01       	movw	r24, r28
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	5c 01       	movw	r10, r24
	temp[i] = '\0';
	sscanf(temp,"%d",mm);
	} while(*mm < 1 || *mm > 12);
	
	do {
	usart_prints("\nPlease Enter Day (dd):");
     380:	85 e6       	ldi	r24, 0x65	; 101
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	3b df       	rcall	.-394    	; 0x1fc <usart_prints>
     386:	03 2d       	mov	r16, r3
     388:	12 2d       	mov	r17, r2
	for (i = 0; i <= 2; i++)
	{
		temp[i] = usart_getc();    // Get character
     38a:	4e df       	rcall	.-356    	; 0x228 <usart_getc>
     38c:	f8 01       	movw	r30, r16
     38e:	81 93       	st	Z+, r24
     390:	8f 01       	movw	r16, r30
		usart_putc(temp[i]);       // Echo it back
     392:	2c df       	rcall	.-424    	; 0x1ec <usart_putc>
	sscanf(temp,"%d",mm);
	} while(*mm < 1 || *mm > 12);
	
	do {
	usart_prints("\nPlease Enter Day (dd):");
	for (i = 0; i <= 2; i++)
     394:	c0 16       	cp	r12, r16
     396:	d1 06       	cpc	r13, r17
     398:	c1 f7       	brne	.-16     	; 0x38a <getDate+0x130>
	{
		temp[i] = usart_getc();    // Get character
		usart_putc(temp[i]);       // Echo it back
	}
	temp[i] = '\0';
     39a:	1c 82       	std	Y+4, r1	; 0x04
	sscanf(temp,"%d",dd);
     39c:	7f 92       	push	r7
     39e:	6f 92       	push	r6
     3a0:	ff 92       	push	r15
     3a2:	ef 92       	push	r14
     3a4:	bf 92       	push	r11
     3a6:	af 92       	push	r10
     3a8:	12 d1       	rcall	.+548    	; 0x5ce <sscanf>
	} while(*dd < 1 || *dd > 31);
     3aa:	f3 01       	movw	r30, r6
     3ac:	80 81       	ld	r24, Z
     3ae:	91 81       	ldd	r25, Z+1	; 0x01
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	4f 97       	sbiw	r24, 0x1f	; 31
     3c0:	f8 f6       	brcc	.-66     	; 0x380 <getDate+0x126>
	usart_prints("\n");
     3c2:	8b e8       	ldi	r24, 0x8B	; 139
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	1a df       	rcall	.-460    	; 0x1fc <usart_prints>
		ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"

		while ((UCSR0A & (1 << TXC0)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
		UDR0 = ReceivedByte; // Echo back the received byte back to the computer
	*/
}
     3c8:	27 96       	adiw	r28, 0x07	; 7
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	cd bf       	out	0x3d, r28	; 61
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	df 90       	pop	r13
     3e2:	cf 90       	pop	r12
     3e4:	bf 90       	pop	r11
     3e6:	af 90       	pop	r10
     3e8:	9f 90       	pop	r9
     3ea:	8f 90       	pop	r8
     3ec:	7f 90       	pop	r7
     3ee:	6f 90       	pop	r6
     3f0:	5f 90       	pop	r5
     3f2:	4f 90       	pop	r4
     3f4:	3f 90       	pop	r3
     3f6:	2f 90       	pop	r2
     3f8:	08 95       	ret

000003fa <main>:
const char sdata[] = "Hello World!\n";          // String in SRAM
const char fdata[] PROGMEM = "Flash Gordon\n";  // String in Flash

/******************************* Main Program Code *************************/
int main(void)
{
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	6f 97       	sbiw	r28, 0x1f	; 31
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
	// configure the microprocessor pins for the data lines
	lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
     40e:	3b 9a       	sbi	0x07, 3	; 7
	lcd_D6_ddr |= (1<<lcd_D6_bit);
     410:	3a 9a       	sbi	0x07, 2	; 7
	lcd_D5_ddr |= (1<<lcd_D5_bit);
     412:	39 9a       	sbi	0x07, 1	; 7
	lcd_D4_ddr |= (1<<lcd_D4_bit);
     414:	38 9a       	sbi	0x07, 0	; 7

	// configure the microprocessor pins for the control lines
	lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
     416:	23 9a       	sbi	0x04, 3	; 4
	lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
     418:	25 9a       	sbi	0x04, 5	; 4
	
	// configure the microprocessor pins for the pushbutton
	pushbutton_ddr &= (1<<pushbutton_bit);
     41a:	8a b1       	in	r24, 0x0a	; 10
     41c:	84 70       	andi	r24, 0x04	; 4
     41e:	8a b9       	out	0x0a, r24	; 10
	pushbutton_port |= (1<<pushbutton_bit);
     420:	5a 9a       	sbi	0x0b, 2	; 11
	
	// initialize adc
	ADMUX = ((1<<REFS0)|(1<<MUX2)|(1<<MUX0));				// Aref = Vcc, select ADC5
     422:	85 e4       	ldi	r24, 0x45	; 69
     424:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ((1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<ADPS0));	// Prescaler div factor = 128
     428:	86 e8       	ldi	r24, 0x86	; 134
     42a:	80 93 7a 00 	sts	0x007A, r24
	
	// initialize the LCD controller as determined by the defines (LCD instructions)
	lcd_init_4d();                                  // initialize the LCD display for a 4-bit interface
     42e:	64 de       	rcall	.-824    	; 0xf8 <lcd_init_4d>

	// display the first line of information
	lcd_write_string_4d(disp_time);
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	44 de       	rcall	.-888    	; 0xbe <lcd_write_string_4d>
	
	// set cursor to start of second line
	lcd_write_instruction_4d(lcd_setCursor | lcd_lineTwo);
     436:	80 ec       	ldi	r24, 0xC0	; 192
     438:	54 de       	rcall	.-856    	; 0xe2 <lcd_write_instruction_4d>
     43a:	8a e6       	ldi	r24, 0x6A	; 106
     43c:	8a 95       	dec	r24
     43e:	f1 f7       	brne	.-4      	; 0x43c <main+0x42>
     440:	00 c0       	rjmp	.+0      	; 0x442 <main+0x48>
	_delay_us(40);                                  // 40 uS delay (min)
	
	if (mode == 0)
     442:	80 91 90 01 	lds	r24, 0x0190
     446:	90 91 91 01 	lds	r25, 0x0191
     44a:	00 97       	sbiw	r24, 0x00	; 0
     44c:	21 f4       	brne	.+8      	; 0x456 <main+0x5c>
	{
		lcd_write_string_4d(disp_volt);
     44e:	82 e2       	ldi	r24, 0x22	; 34
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	35 de       	rcall	.-918    	; 0xbe <lcd_write_string_4d>
     454:	09 c0       	rjmp	.+18     	; 0x468 <main+0x6e>
	}
	else if (mode == 1)
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	21 f4       	brne	.+8      	; 0x462 <main+0x68>
	{
		lcd_write_string_4d(disp_freq);
     45a:	85 e1       	ldi	r24, 0x15	; 21
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	2f de       	rcall	.-930    	; 0xbe <lcd_write_string_4d>
     460:	03 c0       	rjmp	.+6      	; 0x468 <main+0x6e>
	}
	else
	{
		lcd_write_string_4d(disp_temp);
     462:	8d e0       	ldi	r24, 0x0D	; 13
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	2b de       	rcall	.-938    	; 0xbe <lcd_write_string_4d>
	}	

	// Code for interfacing with the serial connection
	char str[25];
	int yy,mm,dd;
	sei();                  // Enable interrupts
     468:	78 94       	sei

	usart_init();           // Initialize the USART
     46a:	ae de       	rcall	.-676    	; 0x1c8 <usart_init>

	// Get the date, make a formatted string, and then
	// send via the USART.

	getDate(&yy,&mm,&dd);
     46c:	ae 01       	movw	r20, r28
     46e:	42 5e       	subi	r20, 0xE2	; 226
     470:	5f 4f       	sbci	r21, 0xFF	; 255
     472:	be 01       	movw	r22, r28
     474:	64 5e       	subi	r22, 0xE4	; 228
     476:	7f 4f       	sbci	r23, 0xFF	; 255
     478:	ce 01       	movw	r24, r28
     47a:	4a 96       	adiw	r24, 0x1a	; 26
     47c:	ee de       	rcall	.-548    	; 0x25a <getDate>
	sprintf(str,"Date: %d/%d/%d\n",yy,mm,dd);
     47e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     480:	8f 93       	push	r24
     482:	8e 8d       	ldd	r24, Y+30	; 0x1e
     484:	8f 93       	push	r24
     486:	8d 8d       	ldd	r24, Y+29	; 0x1d
     488:	8f 93       	push	r24
     48a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     48c:	8f 93       	push	r24
     48e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     490:	8f 93       	push	r24
     492:	8a 8d       	ldd	r24, Y+26	; 0x1a
     494:	8f 93       	push	r24
     496:	8d e7       	ldi	r24, 0x7D	; 125
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	9f 93       	push	r25
     49c:	8f 93       	push	r24
     49e:	8e 01       	movw	r16, r28
     4a0:	0f 5f       	subi	r16, 0xFF	; 255
     4a2:	1f 4f       	sbci	r17, 0xFF	; 255
     4a4:	1f 93       	push	r17
     4a6:	0f 93       	push	r16
     4a8:	72 d0       	rcall	.+228    	; 0x58e <sprintf>
	usart_prints(str);
     4aa:	c8 01       	movw	r24, r16
     4ac:	a7 de       	rcall	.-690    	; 0x1fc <usart_prints>
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
		
		if(bit_is_clear(pushbutton_pin,pushbutton_bit))
		{
			_delay_ms(10);
			if(bit_is_clear(pushbutton_pin,pushbutton_bit))
			mode_new = (mode + 1) % 3;
     4b8:	03 e0       	ldi	r16, 0x03	; 3
     4ba:	10 e0       	ldi	r17, 0x00	; 0
	
	// endless loop
	while(1)
	{
		
		if(bit_is_clear(pushbutton_pin,pushbutton_bit))
     4bc:	4a 99       	sbic	0x09, 2	; 9
     4be:	13 c0       	rjmp	.+38     	; 0x4e6 <main+0xec>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c0:	8f e1       	ldi	r24, 0x1F	; 31
     4c2:	9e e4       	ldi	r25, 0x4E	; 78
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <main+0xca>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <main+0xd0>
     4ca:	00 00       	nop
		{
			_delay_ms(10);
			if(bit_is_clear(pushbutton_pin,pushbutton_bit))
     4cc:	4a 99       	sbic	0x09, 2	; 9
     4ce:	0b c0       	rjmp	.+22     	; 0x4e6 <main+0xec>
			mode_new = (mode + 1) % 3;
     4d0:	80 91 90 01 	lds	r24, 0x0190
     4d4:	90 91 91 01 	lds	r25, 0x0191
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	b8 01       	movw	r22, r16
     4dc:	31 d0       	rcall	.+98     	; 0x540 <__divmodhi4>
     4de:	90 93 8f 01 	sts	0x018F, r25
     4e2:	80 93 8e 01 	sts	0x018E, r24
		}
		
		if(mode_new != mode)
     4e6:	20 91 8e 01 	lds	r18, 0x018E
     4ea:	30 91 8f 01 	lds	r19, 0x018F
     4ee:	80 91 90 01 	lds	r24, 0x0190
     4f2:	90 91 91 01 	lds	r25, 0x0191
     4f6:	28 17       	cp	r18, r24
     4f8:	39 07       	cpc	r19, r25
     4fa:	c9 f0       	breq	.+50     	; 0x52e <__stack+0x2f>
		{
			// set cursor to start of second line
			lcd_write_instruction_4d(lcd_setCursor | lcd_lineTwo);
     4fc:	80 ec       	ldi	r24, 0xC0	; 192
     4fe:	f1 dd       	rcall	.-1054   	; 0xe2 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     500:	9a e6       	ldi	r25, 0x6A	; 106
     502:	9a 95       	dec	r25
     504:	f1 f7       	brne	.-4      	; 0x502 <__stack+0x3>
     506:	00 c0       	rjmp	.+0      	; 0x508 <__stack+0x9>
			_delay_us(40);                                  // 40 uS delay (min)
	
			if (mode_new == 0)
     508:	80 91 8e 01 	lds	r24, 0x018E
     50c:	90 91 8f 01 	lds	r25, 0x018F
     510:	00 97       	sbiw	r24, 0x00	; 0
     512:	21 f4       	brne	.+8      	; 0x51c <__stack+0x1d>
			{
				lcd_write_string_4d(disp_volt);
     514:	82 e2       	ldi	r24, 0x22	; 34
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	d2 dd       	rcall	.-1116   	; 0xbe <lcd_write_string_4d>
     51a:	09 c0       	rjmp	.+18     	; 0x52e <__stack+0x2f>
			}
			else if (mode_new == 1)
     51c:	01 97       	sbiw	r24, 0x01	; 1
     51e:	21 f4       	brne	.+8      	; 0x528 <__stack+0x29>
			{
				lcd_write_string_4d(disp_freq);
     520:	85 e1       	ldi	r24, 0x15	; 21
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	cc dd       	rcall	.-1128   	; 0xbe <lcd_write_string_4d>
     526:	03 c0       	rjmp	.+6      	; 0x52e <__stack+0x2f>
			}
			else
			{
				lcd_write_string_4d(disp_temp);
     528:	8d e0       	ldi	r24, 0x0D	; 13
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	c8 dd       	rcall	.-1136   	; 0xbe <lcd_write_string_4d>
			}			
		}
		
		mode = mode_new;
     52e:	80 91 8e 01 	lds	r24, 0x018E
     532:	90 91 8f 01 	lds	r25, 0x018F
     536:	90 93 91 01 	sts	0x0191, r25
     53a:	80 93 90 01 	sts	0x0190, r24
	}
     53e:	be cf       	rjmp	.-132    	; 0x4bc <main+0xc2>

00000540 <__divmodhi4>:
     540:	97 fb       	bst	r25, 7
     542:	07 2e       	mov	r0, r23
     544:	16 f4       	brtc	.+4      	; 0x54a <__divmodhi4+0xa>
     546:	00 94       	com	r0
     548:	06 d0       	rcall	.+12     	; 0x556 <__divmodhi4_neg1>
     54a:	77 fd       	sbrc	r23, 7
     54c:	08 d0       	rcall	.+16     	; 0x55e <__divmodhi4_neg2>
     54e:	0b d0       	rcall	.+22     	; 0x566 <__udivmodhi4>
     550:	07 fc       	sbrc	r0, 7
     552:	05 d0       	rcall	.+10     	; 0x55e <__divmodhi4_neg2>
     554:	3e f4       	brtc	.+14     	; 0x564 <__divmodhi4_exit>

00000556 <__divmodhi4_neg1>:
     556:	90 95       	com	r25
     558:	81 95       	neg	r24
     55a:	9f 4f       	sbci	r25, 0xFF	; 255
     55c:	08 95       	ret

0000055e <__divmodhi4_neg2>:
     55e:	70 95       	com	r23
     560:	61 95       	neg	r22
     562:	7f 4f       	sbci	r23, 0xFF	; 255

00000564 <__divmodhi4_exit>:
     564:	08 95       	ret

00000566 <__udivmodhi4>:
     566:	aa 1b       	sub	r26, r26
     568:	bb 1b       	sub	r27, r27
     56a:	51 e1       	ldi	r21, 0x11	; 17
     56c:	07 c0       	rjmp	.+14     	; 0x57c <__udivmodhi4_ep>

0000056e <__udivmodhi4_loop>:
     56e:	aa 1f       	adc	r26, r26
     570:	bb 1f       	adc	r27, r27
     572:	a6 17       	cp	r26, r22
     574:	b7 07       	cpc	r27, r23
     576:	10 f0       	brcs	.+4      	; 0x57c <__udivmodhi4_ep>
     578:	a6 1b       	sub	r26, r22
     57a:	b7 0b       	sbc	r27, r23

0000057c <__udivmodhi4_ep>:
     57c:	88 1f       	adc	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	5a 95       	dec	r21
     582:	a9 f7       	brne	.-22     	; 0x56e <__udivmodhi4_loop>
     584:	80 95       	com	r24
     586:	90 95       	com	r25
     588:	bc 01       	movw	r22, r24
     58a:	cd 01       	movw	r24, r26
     58c:	08 95       	ret

0000058e <sprintf>:
     58e:	ae e0       	ldi	r26, 0x0E	; 14
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	ec ec       	ldi	r30, 0xCC	; 204
     594:	f2 e0       	ldi	r31, 0x02	; 2
     596:	aa c5       	rjmp	.+2900   	; 0x10ec <__prologue_saves__+0x1c>
     598:	0d 89       	ldd	r16, Y+21	; 0x15
     59a:	1e 89       	ldd	r17, Y+22	; 0x16
     59c:	86 e0       	ldi	r24, 0x06	; 6
     59e:	8c 83       	std	Y+4, r24	; 0x04
     5a0:	1a 83       	std	Y+2, r17	; 0x02
     5a2:	09 83       	std	Y+1, r16	; 0x01
     5a4:	8f ef       	ldi	r24, 0xFF	; 255
     5a6:	9f e7       	ldi	r25, 0x7F	; 127
     5a8:	9e 83       	std	Y+6, r25	; 0x06
     5aa:	8d 83       	std	Y+5, r24	; 0x05
     5ac:	ae 01       	movw	r20, r28
     5ae:	47 5e       	subi	r20, 0xE7	; 231
     5b0:	5f 4f       	sbci	r21, 0xFF	; 255
     5b2:	6f 89       	ldd	r22, Y+23	; 0x17
     5b4:	78 8d       	ldd	r23, Y+24	; 0x18
     5b6:	ce 01       	movw	r24, r28
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	1f d0       	rcall	.+62     	; 0x5fa <vfprintf>
     5bc:	2f 81       	ldd	r18, Y+7	; 0x07
     5be:	38 85       	ldd	r19, Y+8	; 0x08
     5c0:	f8 01       	movw	r30, r16
     5c2:	e2 0f       	add	r30, r18
     5c4:	f3 1f       	adc	r31, r19
     5c6:	10 82       	st	Z, r1
     5c8:	2e 96       	adiw	r28, 0x0e	; 14
     5ca:	e4 e0       	ldi	r30, 0x04	; 4
     5cc:	ab c5       	rjmp	.+2902   	; 0x1124 <__epilogue_restores__+0x1c>

000005ce <sscanf>:
     5ce:	ae e0       	ldi	r26, 0x0E	; 14
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	ec ee       	ldi	r30, 0xEC	; 236
     5d4:	f2 e0       	ldi	r31, 0x02	; 2
     5d6:	8c c5       	rjmp	.+2840   	; 0x10f0 <__prologue_saves__+0x20>
     5d8:	85 e0       	ldi	r24, 0x05	; 5
     5da:	8c 83       	std	Y+4, r24	; 0x04
     5dc:	8b 89       	ldd	r24, Y+19	; 0x13
     5de:	9c 89       	ldd	r25, Y+20	; 0x14
     5e0:	9a 83       	std	Y+2, r25	; 0x02
     5e2:	89 83       	std	Y+1, r24	; 0x01
     5e4:	ae 01       	movw	r20, r28
     5e6:	49 5e       	subi	r20, 0xE9	; 233
     5e8:	5f 4f       	sbci	r21, 0xFF	; 255
     5ea:	6d 89       	ldd	r22, Y+21	; 0x15
     5ec:	7e 89       	ldd	r23, Y+22	; 0x16
     5ee:	ce 01       	movw	r24, r28
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	35 d3       	rcall	.+1642   	; 0xc5e <vfscanf>
     5f4:	2e 96       	adiw	r28, 0x0e	; 14
     5f6:	e2 e0       	ldi	r30, 0x02	; 2
     5f8:	97 c5       	rjmp	.+2862   	; 0x1128 <__epilogue_restores__+0x20>

000005fa <vfprintf>:
     5fa:	ac e0       	ldi	r26, 0x0C	; 12
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	e2 e0       	ldi	r30, 0x02	; 2
     600:	f3 e0       	ldi	r31, 0x03	; 3
     602:	66 c5       	rjmp	.+2764   	; 0x10d0 <__prologue_saves__>
     604:	7c 01       	movw	r14, r24
     606:	6b 01       	movw	r12, r22
     608:	8a 01       	movw	r16, r20
     60a:	fc 01       	movw	r30, r24
     60c:	17 82       	std	Z+7, r1	; 0x07
     60e:	16 82       	std	Z+6, r1	; 0x06
     610:	83 81       	ldd	r24, Z+3	; 0x03
     612:	81 ff       	sbrs	r24, 1
     614:	b0 c1       	rjmp	.+864    	; 0x976 <vfprintf+0x37c>
     616:	ce 01       	movw	r24, r28
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	4c 01       	movw	r8, r24
     61c:	f7 01       	movw	r30, r14
     61e:	93 81       	ldd	r25, Z+3	; 0x03
     620:	f6 01       	movw	r30, r12
     622:	93 fd       	sbrc	r25, 3
     624:	85 91       	lpm	r24, Z+
     626:	93 ff       	sbrs	r25, 3
     628:	81 91       	ld	r24, Z+
     62a:	6f 01       	movw	r12, r30
     62c:	88 23       	and	r24, r24
     62e:	09 f4       	brne	.+2      	; 0x632 <vfprintf+0x38>
     630:	9e c1       	rjmp	.+828    	; 0x96e <vfprintf+0x374>
     632:	85 32       	cpi	r24, 0x25	; 37
     634:	39 f4       	brne	.+14     	; 0x644 <vfprintf+0x4a>
     636:	93 fd       	sbrc	r25, 3
     638:	85 91       	lpm	r24, Z+
     63a:	93 ff       	sbrs	r25, 3
     63c:	81 91       	ld	r24, Z+
     63e:	6f 01       	movw	r12, r30
     640:	85 32       	cpi	r24, 0x25	; 37
     642:	21 f4       	brne	.+8      	; 0x64c <vfprintf+0x52>
     644:	b7 01       	movw	r22, r14
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	91 d4       	rcall	.+2338   	; 0xf6c <fputc>
     64a:	e8 cf       	rjmp	.-48     	; 0x61c <vfprintf+0x22>
     64c:	51 2c       	mov	r5, r1
     64e:	31 2c       	mov	r3, r1
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	20 32       	cpi	r18, 0x20	; 32
     654:	a0 f4       	brcc	.+40     	; 0x67e <vfprintf+0x84>
     656:	8b 32       	cpi	r24, 0x2B	; 43
     658:	69 f0       	breq	.+26     	; 0x674 <vfprintf+0x7a>
     65a:	30 f4       	brcc	.+12     	; 0x668 <vfprintf+0x6e>
     65c:	80 32       	cpi	r24, 0x20	; 32
     65e:	59 f0       	breq	.+22     	; 0x676 <vfprintf+0x7c>
     660:	83 32       	cpi	r24, 0x23	; 35
     662:	69 f4       	brne	.+26     	; 0x67e <vfprintf+0x84>
     664:	20 61       	ori	r18, 0x10	; 16
     666:	2c c0       	rjmp	.+88     	; 0x6c0 <vfprintf+0xc6>
     668:	8d 32       	cpi	r24, 0x2D	; 45
     66a:	39 f0       	breq	.+14     	; 0x67a <vfprintf+0x80>
     66c:	80 33       	cpi	r24, 0x30	; 48
     66e:	39 f4       	brne	.+14     	; 0x67e <vfprintf+0x84>
     670:	21 60       	ori	r18, 0x01	; 1
     672:	26 c0       	rjmp	.+76     	; 0x6c0 <vfprintf+0xc6>
     674:	22 60       	ori	r18, 0x02	; 2
     676:	24 60       	ori	r18, 0x04	; 4
     678:	23 c0       	rjmp	.+70     	; 0x6c0 <vfprintf+0xc6>
     67a:	28 60       	ori	r18, 0x08	; 8
     67c:	21 c0       	rjmp	.+66     	; 0x6c0 <vfprintf+0xc6>
     67e:	27 fd       	sbrc	r18, 7
     680:	27 c0       	rjmp	.+78     	; 0x6d0 <vfprintf+0xd6>
     682:	30 ed       	ldi	r19, 0xD0	; 208
     684:	38 0f       	add	r19, r24
     686:	3a 30       	cpi	r19, 0x0A	; 10
     688:	78 f4       	brcc	.+30     	; 0x6a8 <vfprintf+0xae>
     68a:	26 ff       	sbrs	r18, 6
     68c:	06 c0       	rjmp	.+12     	; 0x69a <vfprintf+0xa0>
     68e:	fa e0       	ldi	r31, 0x0A	; 10
     690:	5f 9e       	mul	r5, r31
     692:	30 0d       	add	r19, r0
     694:	11 24       	eor	r1, r1
     696:	53 2e       	mov	r5, r19
     698:	13 c0       	rjmp	.+38     	; 0x6c0 <vfprintf+0xc6>
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	38 9e       	mul	r3, r24
     69e:	30 0d       	add	r19, r0
     6a0:	11 24       	eor	r1, r1
     6a2:	33 2e       	mov	r3, r19
     6a4:	20 62       	ori	r18, 0x20	; 32
     6a6:	0c c0       	rjmp	.+24     	; 0x6c0 <vfprintf+0xc6>
     6a8:	8e 32       	cpi	r24, 0x2E	; 46
     6aa:	21 f4       	brne	.+8      	; 0x6b4 <vfprintf+0xba>
     6ac:	26 fd       	sbrc	r18, 6
     6ae:	5f c1       	rjmp	.+702    	; 0x96e <vfprintf+0x374>
     6b0:	20 64       	ori	r18, 0x40	; 64
     6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <vfprintf+0xc6>
     6b4:	8c 36       	cpi	r24, 0x6C	; 108
     6b6:	11 f4       	brne	.+4      	; 0x6bc <vfprintf+0xc2>
     6b8:	20 68       	ori	r18, 0x80	; 128
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <vfprintf+0xc6>
     6bc:	88 36       	cpi	r24, 0x68	; 104
     6be:	41 f4       	brne	.+16     	; 0x6d0 <vfprintf+0xd6>
     6c0:	f6 01       	movw	r30, r12
     6c2:	93 fd       	sbrc	r25, 3
     6c4:	85 91       	lpm	r24, Z+
     6c6:	93 ff       	sbrs	r25, 3
     6c8:	81 91       	ld	r24, Z+
     6ca:	6f 01       	movw	r12, r30
     6cc:	81 11       	cpse	r24, r1
     6ce:	c1 cf       	rjmp	.-126    	; 0x652 <vfprintf+0x58>
     6d0:	98 2f       	mov	r25, r24
     6d2:	9f 7d       	andi	r25, 0xDF	; 223
     6d4:	95 54       	subi	r25, 0x45	; 69
     6d6:	93 30       	cpi	r25, 0x03	; 3
     6d8:	28 f4       	brcc	.+10     	; 0x6e4 <vfprintf+0xea>
     6da:	0c 5f       	subi	r16, 0xFC	; 252
     6dc:	1f 4f       	sbci	r17, 0xFF	; 255
     6de:	ff e3       	ldi	r31, 0x3F	; 63
     6e0:	f9 83       	std	Y+1, r31	; 0x01
     6e2:	0d c0       	rjmp	.+26     	; 0x6fe <vfprintf+0x104>
     6e4:	83 36       	cpi	r24, 0x63	; 99
     6e6:	31 f0       	breq	.+12     	; 0x6f4 <vfprintf+0xfa>
     6e8:	83 37       	cpi	r24, 0x73	; 115
     6ea:	71 f0       	breq	.+28     	; 0x708 <vfprintf+0x10e>
     6ec:	83 35       	cpi	r24, 0x53	; 83
     6ee:	09 f0       	breq	.+2      	; 0x6f2 <vfprintf+0xf8>
     6f0:	57 c0       	rjmp	.+174    	; 0x7a0 <vfprintf+0x1a6>
     6f2:	21 c0       	rjmp	.+66     	; 0x736 <vfprintf+0x13c>
     6f4:	f8 01       	movw	r30, r16
     6f6:	80 81       	ld	r24, Z
     6f8:	89 83       	std	Y+1, r24	; 0x01
     6fa:	0e 5f       	subi	r16, 0xFE	; 254
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
     6fe:	44 24       	eor	r4, r4
     700:	43 94       	inc	r4
     702:	51 2c       	mov	r5, r1
     704:	54 01       	movw	r10, r8
     706:	14 c0       	rjmp	.+40     	; 0x730 <vfprintf+0x136>
     708:	38 01       	movw	r6, r16
     70a:	f2 e0       	ldi	r31, 0x02	; 2
     70c:	6f 0e       	add	r6, r31
     70e:	71 1c       	adc	r7, r1
     710:	f8 01       	movw	r30, r16
     712:	a0 80       	ld	r10, Z
     714:	b1 80       	ldd	r11, Z+1	; 0x01
     716:	26 ff       	sbrs	r18, 6
     718:	03 c0       	rjmp	.+6      	; 0x720 <vfprintf+0x126>
     71a:	65 2d       	mov	r22, r5
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	02 c0       	rjmp	.+4      	; 0x724 <vfprintf+0x12a>
     720:	6f ef       	ldi	r22, 0xFF	; 255
     722:	7f ef       	ldi	r23, 0xFF	; 255
     724:	c5 01       	movw	r24, r10
     726:	2c 87       	std	Y+12, r18	; 0x0c
     728:	d8 d3       	rcall	.+1968   	; 0xeda <strnlen>
     72a:	2c 01       	movw	r4, r24
     72c:	83 01       	movw	r16, r6
     72e:	2c 85       	ldd	r18, Y+12	; 0x0c
     730:	2f 77       	andi	r18, 0x7F	; 127
     732:	22 2e       	mov	r2, r18
     734:	16 c0       	rjmp	.+44     	; 0x762 <vfprintf+0x168>
     736:	38 01       	movw	r6, r16
     738:	f2 e0       	ldi	r31, 0x02	; 2
     73a:	6f 0e       	add	r6, r31
     73c:	71 1c       	adc	r7, r1
     73e:	f8 01       	movw	r30, r16
     740:	a0 80       	ld	r10, Z
     742:	b1 80       	ldd	r11, Z+1	; 0x01
     744:	26 ff       	sbrs	r18, 6
     746:	03 c0       	rjmp	.+6      	; 0x74e <vfprintf+0x154>
     748:	65 2d       	mov	r22, r5
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	02 c0       	rjmp	.+4      	; 0x752 <vfprintf+0x158>
     74e:	6f ef       	ldi	r22, 0xFF	; 255
     750:	7f ef       	ldi	r23, 0xFF	; 255
     752:	c5 01       	movw	r24, r10
     754:	2c 87       	std	Y+12, r18	; 0x0c
     756:	b6 d3       	rcall	.+1900   	; 0xec4 <strnlen_P>
     758:	2c 01       	movw	r4, r24
     75a:	2c 85       	ldd	r18, Y+12	; 0x0c
     75c:	20 68       	ori	r18, 0x80	; 128
     75e:	22 2e       	mov	r2, r18
     760:	83 01       	movw	r16, r6
     762:	23 fc       	sbrc	r2, 3
     764:	19 c0       	rjmp	.+50     	; 0x798 <vfprintf+0x19e>
     766:	83 2d       	mov	r24, r3
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	48 16       	cp	r4, r24
     76c:	59 06       	cpc	r5, r25
     76e:	a0 f4       	brcc	.+40     	; 0x798 <vfprintf+0x19e>
     770:	b7 01       	movw	r22, r14
     772:	80 e2       	ldi	r24, 0x20	; 32
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	fa d3       	rcall	.+2036   	; 0xf6c <fputc>
     778:	3a 94       	dec	r3
     77a:	f5 cf       	rjmp	.-22     	; 0x766 <vfprintf+0x16c>
     77c:	f5 01       	movw	r30, r10
     77e:	27 fc       	sbrc	r2, 7
     780:	85 91       	lpm	r24, Z+
     782:	27 fe       	sbrs	r2, 7
     784:	81 91       	ld	r24, Z+
     786:	5f 01       	movw	r10, r30
     788:	b7 01       	movw	r22, r14
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	ef d3       	rcall	.+2014   	; 0xf6c <fputc>
     78e:	31 10       	cpse	r3, r1
     790:	3a 94       	dec	r3
     792:	f1 e0       	ldi	r31, 0x01	; 1
     794:	4f 1a       	sub	r4, r31
     796:	51 08       	sbc	r5, r1
     798:	41 14       	cp	r4, r1
     79a:	51 04       	cpc	r5, r1
     79c:	79 f7       	brne	.-34     	; 0x77c <vfprintf+0x182>
     79e:	de c0       	rjmp	.+444    	; 0x95c <vfprintf+0x362>
     7a0:	84 36       	cpi	r24, 0x64	; 100
     7a2:	11 f0       	breq	.+4      	; 0x7a8 <vfprintf+0x1ae>
     7a4:	89 36       	cpi	r24, 0x69	; 105
     7a6:	31 f5       	brne	.+76     	; 0x7f4 <vfprintf+0x1fa>
     7a8:	f8 01       	movw	r30, r16
     7aa:	27 ff       	sbrs	r18, 7
     7ac:	07 c0       	rjmp	.+14     	; 0x7bc <vfprintf+0x1c2>
     7ae:	60 81       	ld	r22, Z
     7b0:	71 81       	ldd	r23, Z+1	; 0x01
     7b2:	82 81       	ldd	r24, Z+2	; 0x02
     7b4:	93 81       	ldd	r25, Z+3	; 0x03
     7b6:	0c 5f       	subi	r16, 0xFC	; 252
     7b8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ba:	08 c0       	rjmp	.+16     	; 0x7cc <vfprintf+0x1d2>
     7bc:	60 81       	ld	r22, Z
     7be:	71 81       	ldd	r23, Z+1	; 0x01
     7c0:	07 2e       	mov	r0, r23
     7c2:	00 0c       	add	r0, r0
     7c4:	88 0b       	sbc	r24, r24
     7c6:	99 0b       	sbc	r25, r25
     7c8:	0e 5f       	subi	r16, 0xFE	; 254
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	2f 76       	andi	r18, 0x6F	; 111
     7ce:	72 2e       	mov	r7, r18
     7d0:	97 ff       	sbrs	r25, 7
     7d2:	09 c0       	rjmp	.+18     	; 0x7e6 <vfprintf+0x1ec>
     7d4:	90 95       	com	r25
     7d6:	80 95       	com	r24
     7d8:	70 95       	com	r23
     7da:	61 95       	neg	r22
     7dc:	7f 4f       	sbci	r23, 0xFF	; 255
     7de:	8f 4f       	sbci	r24, 0xFF	; 255
     7e0:	9f 4f       	sbci	r25, 0xFF	; 255
     7e2:	20 68       	ori	r18, 0x80	; 128
     7e4:	72 2e       	mov	r7, r18
     7e6:	2a e0       	ldi	r18, 0x0A	; 10
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	a4 01       	movw	r20, r8
     7ec:	10 d4       	rcall	.+2080   	; 0x100e <__ultoa_invert>
     7ee:	a8 2e       	mov	r10, r24
     7f0:	a8 18       	sub	r10, r8
     7f2:	43 c0       	rjmp	.+134    	; 0x87a <vfprintf+0x280>
     7f4:	85 37       	cpi	r24, 0x75	; 117
     7f6:	29 f4       	brne	.+10     	; 0x802 <vfprintf+0x208>
     7f8:	2f 7e       	andi	r18, 0xEF	; 239
     7fa:	b2 2e       	mov	r11, r18
     7fc:	2a e0       	ldi	r18, 0x0A	; 10
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	25 c0       	rjmp	.+74     	; 0x84c <vfprintf+0x252>
     802:	f2 2f       	mov	r31, r18
     804:	f9 7f       	andi	r31, 0xF9	; 249
     806:	bf 2e       	mov	r11, r31
     808:	8f 36       	cpi	r24, 0x6F	; 111
     80a:	c1 f0       	breq	.+48     	; 0x83c <vfprintf+0x242>
     80c:	18 f4       	brcc	.+6      	; 0x814 <vfprintf+0x21a>
     80e:	88 35       	cpi	r24, 0x58	; 88
     810:	79 f0       	breq	.+30     	; 0x830 <vfprintf+0x236>
     812:	ad c0       	rjmp	.+346    	; 0x96e <vfprintf+0x374>
     814:	80 37       	cpi	r24, 0x70	; 112
     816:	19 f0       	breq	.+6      	; 0x81e <vfprintf+0x224>
     818:	88 37       	cpi	r24, 0x78	; 120
     81a:	21 f0       	breq	.+8      	; 0x824 <vfprintf+0x22a>
     81c:	a8 c0       	rjmp	.+336    	; 0x96e <vfprintf+0x374>
     81e:	2f 2f       	mov	r18, r31
     820:	20 61       	ori	r18, 0x10	; 16
     822:	b2 2e       	mov	r11, r18
     824:	b4 fe       	sbrs	r11, 4
     826:	0d c0       	rjmp	.+26     	; 0x842 <vfprintf+0x248>
     828:	8b 2d       	mov	r24, r11
     82a:	84 60       	ori	r24, 0x04	; 4
     82c:	b8 2e       	mov	r11, r24
     82e:	09 c0       	rjmp	.+18     	; 0x842 <vfprintf+0x248>
     830:	24 ff       	sbrs	r18, 4
     832:	0a c0       	rjmp	.+20     	; 0x848 <vfprintf+0x24e>
     834:	9f 2f       	mov	r25, r31
     836:	96 60       	ori	r25, 0x06	; 6
     838:	b9 2e       	mov	r11, r25
     83a:	06 c0       	rjmp	.+12     	; 0x848 <vfprintf+0x24e>
     83c:	28 e0       	ldi	r18, 0x08	; 8
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	05 c0       	rjmp	.+10     	; 0x84c <vfprintf+0x252>
     842:	20 e1       	ldi	r18, 0x10	; 16
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	02 c0       	rjmp	.+4      	; 0x84c <vfprintf+0x252>
     848:	20 e1       	ldi	r18, 0x10	; 16
     84a:	32 e0       	ldi	r19, 0x02	; 2
     84c:	f8 01       	movw	r30, r16
     84e:	b7 fe       	sbrs	r11, 7
     850:	07 c0       	rjmp	.+14     	; 0x860 <vfprintf+0x266>
     852:	60 81       	ld	r22, Z
     854:	71 81       	ldd	r23, Z+1	; 0x01
     856:	82 81       	ldd	r24, Z+2	; 0x02
     858:	93 81       	ldd	r25, Z+3	; 0x03
     85a:	0c 5f       	subi	r16, 0xFC	; 252
     85c:	1f 4f       	sbci	r17, 0xFF	; 255
     85e:	06 c0       	rjmp	.+12     	; 0x86c <vfprintf+0x272>
     860:	60 81       	ld	r22, Z
     862:	71 81       	ldd	r23, Z+1	; 0x01
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 5f       	subi	r16, 0xFE	; 254
     86a:	1f 4f       	sbci	r17, 0xFF	; 255
     86c:	a4 01       	movw	r20, r8
     86e:	cf d3       	rcall	.+1950   	; 0x100e <__ultoa_invert>
     870:	a8 2e       	mov	r10, r24
     872:	a8 18       	sub	r10, r8
     874:	fb 2d       	mov	r31, r11
     876:	ff 77       	andi	r31, 0x7F	; 127
     878:	7f 2e       	mov	r7, r31
     87a:	76 fe       	sbrs	r7, 6
     87c:	0b c0       	rjmp	.+22     	; 0x894 <vfprintf+0x29a>
     87e:	37 2d       	mov	r19, r7
     880:	3e 7f       	andi	r19, 0xFE	; 254
     882:	a5 14       	cp	r10, r5
     884:	50 f4       	brcc	.+20     	; 0x89a <vfprintf+0x2a0>
     886:	74 fe       	sbrs	r7, 4
     888:	0a c0       	rjmp	.+20     	; 0x89e <vfprintf+0x2a4>
     88a:	72 fc       	sbrc	r7, 2
     88c:	08 c0       	rjmp	.+16     	; 0x89e <vfprintf+0x2a4>
     88e:	37 2d       	mov	r19, r7
     890:	3e 7e       	andi	r19, 0xEE	; 238
     892:	05 c0       	rjmp	.+10     	; 0x89e <vfprintf+0x2a4>
     894:	ba 2c       	mov	r11, r10
     896:	37 2d       	mov	r19, r7
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <vfprintf+0x2a6>
     89a:	ba 2c       	mov	r11, r10
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <vfprintf+0x2a6>
     89e:	b5 2c       	mov	r11, r5
     8a0:	34 ff       	sbrs	r19, 4
     8a2:	0d c0       	rjmp	.+26     	; 0x8be <vfprintf+0x2c4>
     8a4:	fe 01       	movw	r30, r28
     8a6:	ea 0d       	add	r30, r10
     8a8:	f1 1d       	adc	r31, r1
     8aa:	80 81       	ld	r24, Z
     8ac:	80 33       	cpi	r24, 0x30	; 48
     8ae:	11 f4       	brne	.+4      	; 0x8b4 <vfprintf+0x2ba>
     8b0:	39 7e       	andi	r19, 0xE9	; 233
     8b2:	09 c0       	rjmp	.+18     	; 0x8c6 <vfprintf+0x2cc>
     8b4:	32 ff       	sbrs	r19, 2
     8b6:	06 c0       	rjmp	.+12     	; 0x8c4 <vfprintf+0x2ca>
     8b8:	b3 94       	inc	r11
     8ba:	b3 94       	inc	r11
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <vfprintf+0x2cc>
     8be:	83 2f       	mov	r24, r19
     8c0:	86 78       	andi	r24, 0x86	; 134
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <vfprintf+0x2cc>
     8c4:	b3 94       	inc	r11
     8c6:	33 fd       	sbrc	r19, 3
     8c8:	12 c0       	rjmp	.+36     	; 0x8ee <vfprintf+0x2f4>
     8ca:	30 ff       	sbrs	r19, 0
     8cc:	06 c0       	rjmp	.+12     	; 0x8da <vfprintf+0x2e0>
     8ce:	5a 2c       	mov	r5, r10
     8d0:	b3 14       	cp	r11, r3
     8d2:	18 f4       	brcc	.+6      	; 0x8da <vfprintf+0x2e0>
     8d4:	53 0c       	add	r5, r3
     8d6:	5b 18       	sub	r5, r11
     8d8:	b3 2c       	mov	r11, r3
     8da:	b3 14       	cp	r11, r3
     8dc:	60 f4       	brcc	.+24     	; 0x8f6 <vfprintf+0x2fc>
     8de:	b7 01       	movw	r22, r14
     8e0:	80 e2       	ldi	r24, 0x20	; 32
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	3c 87       	std	Y+12, r19	; 0x0c
     8e6:	42 d3       	rcall	.+1668   	; 0xf6c <fputc>
     8e8:	b3 94       	inc	r11
     8ea:	3c 85       	ldd	r19, Y+12	; 0x0c
     8ec:	f6 cf       	rjmp	.-20     	; 0x8da <vfprintf+0x2e0>
     8ee:	b3 14       	cp	r11, r3
     8f0:	10 f4       	brcc	.+4      	; 0x8f6 <vfprintf+0x2fc>
     8f2:	3b 18       	sub	r3, r11
     8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <vfprintf+0x2fe>
     8f6:	31 2c       	mov	r3, r1
     8f8:	34 ff       	sbrs	r19, 4
     8fa:	11 c0       	rjmp	.+34     	; 0x91e <vfprintf+0x324>
     8fc:	b7 01       	movw	r22, r14
     8fe:	80 e3       	ldi	r24, 0x30	; 48
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	3c 87       	std	Y+12, r19	; 0x0c
     904:	33 d3       	rcall	.+1638   	; 0xf6c <fputc>
     906:	3c 85       	ldd	r19, Y+12	; 0x0c
     908:	32 ff       	sbrs	r19, 2
     90a:	16 c0       	rjmp	.+44     	; 0x938 <vfprintf+0x33e>
     90c:	31 fd       	sbrc	r19, 1
     90e:	03 c0       	rjmp	.+6      	; 0x916 <vfprintf+0x31c>
     910:	88 e7       	ldi	r24, 0x78	; 120
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	02 c0       	rjmp	.+4      	; 0x91a <vfprintf+0x320>
     916:	88 e5       	ldi	r24, 0x58	; 88
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	b7 01       	movw	r22, r14
     91c:	0c c0       	rjmp	.+24     	; 0x936 <vfprintf+0x33c>
     91e:	83 2f       	mov	r24, r19
     920:	86 78       	andi	r24, 0x86	; 134
     922:	51 f0       	breq	.+20     	; 0x938 <vfprintf+0x33e>
     924:	31 ff       	sbrs	r19, 1
     926:	02 c0       	rjmp	.+4      	; 0x92c <vfprintf+0x332>
     928:	8b e2       	ldi	r24, 0x2B	; 43
     92a:	01 c0       	rjmp	.+2      	; 0x92e <vfprintf+0x334>
     92c:	80 e2       	ldi	r24, 0x20	; 32
     92e:	37 fd       	sbrc	r19, 7
     930:	8d e2       	ldi	r24, 0x2D	; 45
     932:	b7 01       	movw	r22, r14
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	1a d3       	rcall	.+1588   	; 0xf6c <fputc>
     938:	a5 14       	cp	r10, r5
     93a:	30 f4       	brcc	.+12     	; 0x948 <vfprintf+0x34e>
     93c:	b7 01       	movw	r22, r14
     93e:	80 e3       	ldi	r24, 0x30	; 48
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	14 d3       	rcall	.+1576   	; 0xf6c <fputc>
     944:	5a 94       	dec	r5
     946:	f8 cf       	rjmp	.-16     	; 0x938 <vfprintf+0x33e>
     948:	aa 94       	dec	r10
     94a:	f4 01       	movw	r30, r8
     94c:	ea 0d       	add	r30, r10
     94e:	f1 1d       	adc	r31, r1
     950:	80 81       	ld	r24, Z
     952:	b7 01       	movw	r22, r14
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0a d3       	rcall	.+1556   	; 0xf6c <fputc>
     958:	a1 10       	cpse	r10, r1
     95a:	f6 cf       	rjmp	.-20     	; 0x948 <vfprintf+0x34e>
     95c:	33 20       	and	r3, r3
     95e:	09 f4       	brne	.+2      	; 0x962 <vfprintf+0x368>
     960:	5d ce       	rjmp	.-838    	; 0x61c <vfprintf+0x22>
     962:	b7 01       	movw	r22, r14
     964:	80 e2       	ldi	r24, 0x20	; 32
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	01 d3       	rcall	.+1538   	; 0xf6c <fputc>
     96a:	3a 94       	dec	r3
     96c:	f7 cf       	rjmp	.-18     	; 0x95c <vfprintf+0x362>
     96e:	f7 01       	movw	r30, r14
     970:	86 81       	ldd	r24, Z+6	; 0x06
     972:	97 81       	ldd	r25, Z+7	; 0x07
     974:	02 c0       	rjmp	.+4      	; 0x97a <vfprintf+0x380>
     976:	8f ef       	ldi	r24, 0xFF	; 255
     978:	9f ef       	ldi	r25, 0xFF	; 255
     97a:	2c 96       	adiw	r28, 0x0c	; 12
     97c:	e2 e1       	ldi	r30, 0x12	; 18
     97e:	c4 c3       	rjmp	.+1928   	; 0x1108 <__epilogue_restores__>

00000980 <putval>:
     980:	20 fd       	sbrc	r18, 0
     982:	09 c0       	rjmp	.+18     	; 0x996 <putval+0x16>
     984:	fc 01       	movw	r30, r24
     986:	23 fd       	sbrc	r18, 3
     988:	05 c0       	rjmp	.+10     	; 0x994 <putval+0x14>
     98a:	22 ff       	sbrs	r18, 2
     98c:	02 c0       	rjmp	.+4      	; 0x992 <putval+0x12>
     98e:	73 83       	std	Z+3, r23	; 0x03
     990:	62 83       	std	Z+2, r22	; 0x02
     992:	51 83       	std	Z+1, r21	; 0x01
     994:	40 83       	st	Z, r20
     996:	08 95       	ret

00000998 <mulacc>:
     998:	44 fd       	sbrc	r20, 4
     99a:	10 c0       	rjmp	.+32     	; 0x9bc <mulacc+0x24>
     99c:	46 fd       	sbrc	r20, 6
     99e:	10 c0       	rjmp	.+32     	; 0x9c0 <mulacc+0x28>
     9a0:	db 01       	movw	r26, r22
     9a2:	fc 01       	movw	r30, r24
     9a4:	aa 0f       	add	r26, r26
     9a6:	bb 1f       	adc	r27, r27
     9a8:	ee 1f       	adc	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	10 94       	com	r1
     9ae:	d1 f7       	brne	.-12     	; 0x9a4 <mulacc+0xc>
     9b0:	6a 0f       	add	r22, r26
     9b2:	7b 1f       	adc	r23, r27
     9b4:	8e 1f       	adc	r24, r30
     9b6:	9f 1f       	adc	r25, r31
     9b8:	31 e0       	ldi	r19, 0x01	; 1
     9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <mulacc+0x2a>
     9bc:	33 e0       	ldi	r19, 0x03	; 3
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <mulacc+0x2a>
     9c0:	34 e0       	ldi	r19, 0x04	; 4
     9c2:	66 0f       	add	r22, r22
     9c4:	77 1f       	adc	r23, r23
     9c6:	88 1f       	adc	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	31 50       	subi	r19, 0x01	; 1
     9cc:	d1 f7       	brne	.-12     	; 0x9c2 <mulacc+0x2a>
     9ce:	62 0f       	add	r22, r18
     9d0:	71 1d       	adc	r23, r1
     9d2:	81 1d       	adc	r24, r1
     9d4:	91 1d       	adc	r25, r1
     9d6:	08 95       	ret

000009d8 <skip_spaces>:
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	8c 01       	movw	r16, r24
     9e2:	c8 01       	movw	r24, r16
     9e4:	85 d2       	rcall	.+1290   	; 0xef0 <fgetc>
     9e6:	ec 01       	movw	r28, r24
     9e8:	97 fd       	sbrc	r25, 7
     9ea:	06 c0       	rjmp	.+12     	; 0x9f8 <skip_spaces+0x20>
     9ec:	58 d2       	rcall	.+1200   	; 0xe9e <isspace>
     9ee:	89 2b       	or	r24, r25
     9f0:	c1 f7       	brne	.-16     	; 0x9e2 <skip_spaces+0xa>
     9f2:	b8 01       	movw	r22, r16
     9f4:	ce 01       	movw	r24, r28
     9f6:	f2 d2       	rcall	.+1508   	; 0xfdc <ungetc>
     9f8:	ce 01       	movw	r24, r28
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	08 95       	ret

00000a04 <conv_int>:
     a04:	a1 e0       	ldi	r26, 0x01	; 1
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	e7 e0       	ldi	r30, 0x07	; 7
     a0a:	f5 e0       	ldi	r31, 0x05	; 5
     a0c:	67 c3       	rjmp	.+1742   	; 0x10dc <__prologue_saves__+0xc>
     a0e:	8c 01       	movw	r16, r24
     a10:	c6 2e       	mov	r12, r22
     a12:	7a 01       	movw	r14, r20
     a14:	29 83       	std	Y+1, r18	; 0x01
     a16:	6c d2       	rcall	.+1240   	; 0xef0 <fgetc>
     a18:	ac 01       	movw	r20, r24
     a1a:	55 27       	eor	r21, r21
     a1c:	29 81       	ldd	r18, Y+1	; 0x01
     a1e:	4b 32       	cpi	r20, 0x2B	; 43
     a20:	51 05       	cpc	r21, r1
     a22:	21 f0       	breq	.+8      	; 0xa2c <conv_int+0x28>
     a24:	4d 32       	cpi	r20, 0x2D	; 45
     a26:	51 05       	cpc	r21, r1
     a28:	61 f4       	brne	.+24     	; 0xa42 <conv_int+0x3e>
     a2a:	20 68       	ori	r18, 0x80	; 128
     a2c:	ca 94       	dec	r12
     a2e:	c1 10       	cpse	r12, r1
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <conv_int+0x32>
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	6f c0       	rjmp	.+222    	; 0xb14 <conv_int+0x110>
     a36:	c8 01       	movw	r24, r16
     a38:	29 83       	std	Y+1, r18	; 0x01
     a3a:	5a d2       	rcall	.+1204   	; 0xef0 <fgetc>
     a3c:	29 81       	ldd	r18, Y+1	; 0x01
     a3e:	97 fd       	sbrc	r25, 7
     a40:	f8 cf       	rjmp	.-16     	; 0xa32 <conv_int+0x2e>
     a42:	32 2f       	mov	r19, r18
     a44:	3d 7f       	andi	r19, 0xFD	; 253
     a46:	d3 2e       	mov	r13, r19
     a48:	32 2f       	mov	r19, r18
     a4a:	30 73       	andi	r19, 0x30	; 48
     a4c:	39 f5       	brne	.+78     	; 0xa9c <conv_int+0x98>
     a4e:	80 33       	cpi	r24, 0x30	; 48
     a50:	29 f5       	brne	.+74     	; 0xa9c <conv_int+0x98>
     a52:	bb 24       	eor	r11, r11
     a54:	ba 94       	dec	r11
     a56:	bc 0c       	add	r11, r12
     a58:	09 f4       	brne	.+2      	; 0xa5c <conv_int+0x58>
     a5a:	49 c0       	rjmp	.+146    	; 0xaee <conv_int+0xea>
     a5c:	c8 01       	movw	r24, r16
     a5e:	29 83       	std	Y+1, r18	; 0x01
     a60:	47 d2       	rcall	.+1166   	; 0xef0 <fgetc>
     a62:	29 81       	ldd	r18, Y+1	; 0x01
     a64:	97 fd       	sbrc	r25, 7
     a66:	43 c0       	rjmp	.+134    	; 0xaee <conv_int+0xea>
     a68:	38 2f       	mov	r19, r24
     a6a:	3f 7d       	andi	r19, 0xDF	; 223
     a6c:	38 35       	cpi	r19, 0x58	; 88
     a6e:	61 f4       	brne	.+24     	; 0xa88 <conv_int+0x84>
     a70:	8d 2d       	mov	r24, r13
     a72:	82 64       	ori	r24, 0x42	; 66
     a74:	d8 2e       	mov	r13, r24
     a76:	ca 94       	dec	r12
     a78:	ca 94       	dec	r12
     a7a:	cc 20       	and	r12, r12
     a7c:	c1 f1       	breq	.+112    	; 0xaee <conv_int+0xea>
     a7e:	c8 01       	movw	r24, r16
     a80:	37 d2       	rcall	.+1134   	; 0xef0 <fgetc>
     a82:	97 ff       	sbrs	r25, 7
     a84:	0b c0       	rjmp	.+22     	; 0xa9c <conv_int+0x98>
     a86:	33 c0       	rjmp	.+102    	; 0xaee <conv_int+0xea>
     a88:	26 ff       	sbrs	r18, 6
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <conv_int+0x90>
     a8c:	2d 2d       	mov	r18, r13
     a8e:	22 60       	ori	r18, 0x02	; 2
     a90:	d2 2e       	mov	r13, r18
     a92:	03 c0       	rjmp	.+6      	; 0xa9a <conv_int+0x96>
     a94:	3d 2d       	mov	r19, r13
     a96:	32 61       	ori	r19, 0x12	; 18
     a98:	d3 2e       	mov	r13, r19
     a9a:	cb 2c       	mov	r12, r11
     a9c:	81 2c       	mov	r8, r1
     a9e:	91 2c       	mov	r9, r1
     aa0:	54 01       	movw	r10, r8
     aa2:	20 ed       	ldi	r18, 0xD0	; 208
     aa4:	28 0f       	add	r18, r24
     aa6:	28 30       	cpi	r18, 0x08	; 8
     aa8:	78 f0       	brcs	.+30     	; 0xac8 <conv_int+0xc4>
     aaa:	d4 fe       	sbrs	r13, 4
     aac:	03 c0       	rjmp	.+6      	; 0xab4 <conv_int+0xb0>
     aae:	b8 01       	movw	r22, r16
     ab0:	95 d2       	rcall	.+1322   	; 0xfdc <ungetc>
     ab2:	1a c0       	rjmp	.+52     	; 0xae8 <conv_int+0xe4>
     ab4:	2a 30       	cpi	r18, 0x0A	; 10
     ab6:	40 f0       	brcs	.+16     	; 0xac8 <conv_int+0xc4>
     ab8:	d6 fe       	sbrs	r13, 6
     aba:	f9 cf       	rjmp	.-14     	; 0xaae <conv_int+0xaa>
     abc:	2f 7d       	andi	r18, 0xDF	; 223
     abe:	3f ee       	ldi	r19, 0xEF	; 239
     ac0:	32 0f       	add	r19, r18
     ac2:	36 30       	cpi	r19, 0x06	; 6
     ac4:	a0 f7       	brcc	.-24     	; 0xaae <conv_int+0xaa>
     ac6:	27 50       	subi	r18, 0x07	; 7
     ac8:	4d 2d       	mov	r20, r13
     aca:	c5 01       	movw	r24, r10
     acc:	b4 01       	movw	r22, r8
     ace:	64 df       	rcall	.-312    	; 0x998 <mulacc>
     ad0:	4b 01       	movw	r8, r22
     ad2:	5c 01       	movw	r10, r24
     ad4:	8d 2d       	mov	r24, r13
     ad6:	82 60       	ori	r24, 0x02	; 2
     ad8:	d8 2e       	mov	r13, r24
     ada:	ca 94       	dec	r12
     adc:	cc 20       	and	r12, r12
     ade:	51 f0       	breq	.+20     	; 0xaf4 <conv_int+0xf0>
     ae0:	c8 01       	movw	r24, r16
     ae2:	06 d2       	rcall	.+1036   	; 0xef0 <fgetc>
     ae4:	97 ff       	sbrs	r25, 7
     ae6:	dd cf       	rjmp	.-70     	; 0xaa2 <conv_int+0x9e>
     ae8:	d1 fc       	sbrc	r13, 1
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <conv_int+0xf0>
     aec:	a2 cf       	rjmp	.-188    	; 0xa32 <conv_int+0x2e>
     aee:	81 2c       	mov	r8, r1
     af0:	91 2c       	mov	r9, r1
     af2:	54 01       	movw	r10, r8
     af4:	d7 fe       	sbrs	r13, 7
     af6:	08 c0       	rjmp	.+16     	; 0xb08 <conv_int+0x104>
     af8:	b0 94       	com	r11
     afa:	a0 94       	com	r10
     afc:	90 94       	com	r9
     afe:	80 94       	com	r8
     b00:	81 1c       	adc	r8, r1
     b02:	91 1c       	adc	r9, r1
     b04:	a1 1c       	adc	r10, r1
     b06:	b1 1c       	adc	r11, r1
     b08:	2d 2d       	mov	r18, r13
     b0a:	b5 01       	movw	r22, r10
     b0c:	a4 01       	movw	r20, r8
     b0e:	c7 01       	movw	r24, r14
     b10:	37 df       	rcall	.-402    	; 0x980 <putval>
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	21 96       	adiw	r28, 0x01	; 1
     b16:	ec e0       	ldi	r30, 0x0C	; 12
     b18:	fd c2       	rjmp	.+1530   	; 0x1114 <__epilogue_restores__+0xc>

00000b1a <conv_brk>:
     b1a:	a1 e2       	ldi	r26, 0x21	; 33
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	e2 e9       	ldi	r30, 0x92	; 146
     b20:	f5 e0       	ldi	r31, 0x05	; 5
     b22:	da c2       	rjmp	.+1460   	; 0x10d8 <__prologue_saves__+0x8>
     b24:	5c 01       	movw	r10, r24
     b26:	7a 01       	movw	r14, r20
     b28:	ce 01       	movw	r24, r28
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	6c 01       	movw	r12, r24
     b2e:	80 e2       	ldi	r24, 0x20	; 32
     b30:	f6 01       	movw	r30, r12
     b32:	11 92       	st	Z+, r1
     b34:	8a 95       	dec	r24
     b36:	e9 f7       	brne	.-6      	; 0xb32 <conv_brk+0x18>
     b38:	f5 01       	movw	r30, r10
     b3a:	83 80       	ldd	r8, Z+3	; 0x03
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	91 2c       	mov	r9, r1
     b42:	71 2c       	mov	r7, r1
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	a1 e0       	ldi	r26, 0x01	; 1
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	f9 01       	movw	r30, r18
     b4c:	83 fc       	sbrc	r8, 3
     b4e:	85 91       	lpm	r24, Z+
     b50:	83 fe       	sbrs	r8, 3
     b52:	81 91       	ld	r24, Z+
     b54:	8f 01       	movw	r16, r30
     b56:	98 2f       	mov	r25, r24
     b58:	9f 01       	movw	r18, r30
     b5a:	81 11       	cpse	r24, r1
     b5c:	03 c0       	rjmp	.+6      	; 0xb64 <conv_brk+0x4a>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	7a c0       	rjmp	.+244    	; 0xc58 <conv_brk+0x13e>
     b64:	8e 35       	cpi	r24, 0x5E	; 94
     b66:	19 f4       	brne	.+6      	; 0xb6e <conv_brk+0x54>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	49 f1       	breq	.+82     	; 0xbc0 <conv_brk+0xa6>
     b6e:	e7 2f       	mov	r30, r23
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	e4 17       	cp	r30, r20
     b74:	f5 07       	cpc	r31, r21
     b76:	3c f4       	brge	.+14     	; 0xb86 <conv_brk+0x6c>
     b78:	8d 35       	cpi	r24, 0x5D	; 93
     b7a:	59 f1       	breq	.+86     	; 0xbd2 <conv_brk+0xb8>
     b7c:	8d 32       	cpi	r24, 0x2D	; 45
     b7e:	19 f4       	brne	.+6      	; 0xb86 <conv_brk+0x6c>
     b80:	77 20       	and	r7, r7
     b82:	01 f1       	breq	.+64     	; 0xbc4 <conv_brk+0xaa>
     b84:	03 c0       	rjmp	.+6      	; 0xb8c <conv_brk+0x72>
     b86:	71 10       	cpse	r7, r1
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <conv_brk+0x72>
     b8a:	98 2e       	mov	r9, r24
     b8c:	89 2f       	mov	r24, r25
     b8e:	86 95       	lsr	r24
     b90:	86 95       	lsr	r24
     b92:	86 95       	lsr	r24
     b94:	86 01       	movw	r16, r12
     b96:	08 0f       	add	r16, r24
     b98:	11 1d       	adc	r17, r1
     b9a:	89 2f       	mov	r24, r25
     b9c:	87 70       	andi	r24, 0x07	; 7
     b9e:	3d 01       	movw	r6, r26
     ba0:	01 c0       	rjmp	.+2      	; 0xba4 <conv_brk+0x8a>
     ba2:	66 0c       	add	r6, r6
     ba4:	8a 95       	dec	r24
     ba6:	ea f7       	brpl	.-6      	; 0xba2 <conv_brk+0x88>
     ba8:	f8 01       	movw	r30, r16
     baa:	80 81       	ld	r24, Z
     bac:	86 29       	or	r24, r6
     bae:	80 83       	st	Z, r24
     bb0:	99 15       	cp	r25, r9
     bb2:	59 f0       	breq	.+22     	; 0xbca <conv_brk+0xb0>
     bb4:	99 15       	cp	r25, r9
     bb6:	10 f4       	brcc	.+4      	; 0xbbc <conv_brk+0xa2>
     bb8:	9f 5f       	subi	r25, 0xFF	; 255
     bba:	e8 cf       	rjmp	.-48     	; 0xb8c <conv_brk+0x72>
     bbc:	91 50       	subi	r25, 0x01	; 1
     bbe:	e6 cf       	rjmp	.-52     	; 0xb8c <conv_brk+0x72>
     bc0:	71 e0       	ldi	r23, 0x01	; 1
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <conv_brk+0xb2>
     bc4:	77 24       	eor	r7, r7
     bc6:	73 94       	inc	r7
     bc8:	01 c0       	rjmp	.+2      	; 0xbcc <conv_brk+0xb2>
     bca:	71 2c       	mov	r7, r1
     bcc:	4f 5f       	subi	r20, 0xFF	; 255
     bce:	5f 4f       	sbci	r21, 0xFF	; 255
     bd0:	bc cf       	rjmp	.-136    	; 0xb4a <conv_brk+0x30>
     bd2:	77 20       	and	r7, r7
     bd4:	19 f0       	breq	.+6      	; 0xbdc <conv_brk+0xc2>
     bd6:	8e 81       	ldd	r24, Y+6	; 0x06
     bd8:	80 62       	ori	r24, 0x20	; 32
     bda:	8e 83       	std	Y+6, r24	; 0x06
     bdc:	71 11       	cpse	r23, r1
     bde:	03 c0       	rjmp	.+6      	; 0xbe6 <conv_brk+0xcc>
     be0:	99 24       	eor	r9, r9
     be2:	93 94       	inc	r9
     be4:	16 c0       	rjmp	.+44     	; 0xc12 <conv_brk+0xf8>
     be6:	f6 01       	movw	r30, r12
     be8:	9e 01       	movw	r18, r28
     bea:	2f 5d       	subi	r18, 0xDF	; 223
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	80 81       	ld	r24, Z
     bf0:	80 95       	com	r24
     bf2:	81 93       	st	Z+, r24
     bf4:	e2 17       	cp	r30, r18
     bf6:	f3 07       	cpc	r31, r19
     bf8:	d1 f7       	brne	.-12     	; 0xbee <conv_brk+0xd4>
     bfa:	f2 cf       	rjmp	.-28     	; 0xbe0 <conv_brk+0xc6>
     bfc:	e1 14       	cp	r14, r1
     bfe:	f1 04       	cpc	r15, r1
     c00:	29 f0       	breq	.+10     	; 0xc0c <conv_brk+0xf2>
     c02:	f7 01       	movw	r30, r14
     c04:	80 83       	st	Z, r24
     c06:	c7 01       	movw	r24, r14
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	7c 01       	movw	r14, r24
     c0c:	61 50       	subi	r22, 0x01	; 1
     c0e:	91 2c       	mov	r9, r1
     c10:	e9 f0       	breq	.+58     	; 0xc4c <conv_brk+0x132>
     c12:	c5 01       	movw	r24, r10
     c14:	69 a3       	std	Y+33, r22	; 0x21
     c16:	6c d1       	rcall	.+728    	; 0xef0 <fgetc>
     c18:	69 a1       	ldd	r22, Y+33	; 0x21
     c1a:	97 fd       	sbrc	r25, 7
     c1c:	15 c0       	rjmp	.+42     	; 0xc48 <conv_brk+0x12e>
     c1e:	28 2f       	mov	r18, r24
     c20:	26 95       	lsr	r18
     c22:	26 95       	lsr	r18
     c24:	26 95       	lsr	r18
     c26:	f6 01       	movw	r30, r12
     c28:	e2 0f       	add	r30, r18
     c2a:	f1 1d       	adc	r31, r1
     c2c:	20 81       	ld	r18, Z
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	ac 01       	movw	r20, r24
     c32:	47 70       	andi	r20, 0x07	; 7
     c34:	55 27       	eor	r21, r21
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <conv_brk+0x122>
     c38:	35 95       	asr	r19
     c3a:	27 95       	ror	r18
     c3c:	4a 95       	dec	r20
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <conv_brk+0x11e>
     c40:	20 fd       	sbrc	r18, 0
     c42:	dc cf       	rjmp	.-72     	; 0xbfc <conv_brk+0xe2>
     c44:	b5 01       	movw	r22, r10
     c46:	ca d1       	rcall	.+916    	; 0xfdc <ungetc>
     c48:	91 10       	cpse	r9, r1
     c4a:	89 cf       	rjmp	.-238    	; 0xb5e <conv_brk+0x44>
     c4c:	e1 14       	cp	r14, r1
     c4e:	f1 04       	cpc	r15, r1
     c50:	11 f0       	breq	.+4      	; 0xc56 <conv_brk+0x13c>
     c52:	f7 01       	movw	r30, r14
     c54:	10 82       	st	Z, r1
     c56:	c8 01       	movw	r24, r16
     c58:	a1 96       	adiw	r28, 0x21	; 33
     c5a:	ee e0       	ldi	r30, 0x0E	; 14
     c5c:	59 c2       	rjmp	.+1202   	; 0x1110 <__epilogue_restores__+0x8>

00000c5e <vfscanf>:
     c5e:	4f 92       	push	r4
     c60:	5f 92       	push	r5
     c62:	7f 92       	push	r7
     c64:	8f 92       	push	r8
     c66:	9f 92       	push	r9
     c68:	af 92       	push	r10
     c6a:	bf 92       	push	r11
     c6c:	cf 92       	push	r12
     c6e:	df 92       	push	r13
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	1f 92       	push	r1
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	6c 01       	movw	r12, r24
     c84:	2b 01       	movw	r4, r22
     c86:	5a 01       	movw	r10, r20
     c88:	fc 01       	movw	r30, r24
     c8a:	17 82       	std	Z+7, r1	; 0x07
     c8c:	16 82       	std	Z+6, r1	; 0x06
     c8e:	71 2c       	mov	r7, r1
     c90:	f6 01       	movw	r30, r12
     c92:	f3 80       	ldd	r15, Z+3	; 0x03
     c94:	f2 01       	movw	r30, r4
     c96:	f3 fc       	sbrc	r15, 3
     c98:	85 91       	lpm	r24, Z+
     c9a:	f3 fe       	sbrs	r15, 3
     c9c:	81 91       	ld	r24, Z+
     c9e:	38 2f       	mov	r19, r24
     ca0:	2f 01       	movw	r4, r30
     ca2:	88 23       	and	r24, r24
     ca4:	09 f4       	brne	.+2      	; 0xca8 <vfscanf+0x4a>
     ca6:	e5 c0       	rjmp	.+458    	; 0xe72 <vfscanf+0x214>
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	39 83       	std	Y+1, r19	; 0x01
     cac:	f8 d0       	rcall	.+496    	; 0xe9e <isspace>
     cae:	39 81       	ldd	r19, Y+1	; 0x01
     cb0:	89 2b       	or	r24, r25
     cb2:	19 f0       	breq	.+6      	; 0xcba <vfscanf+0x5c>
     cb4:	c6 01       	movw	r24, r12
     cb6:	90 de       	rcall	.-736    	; 0x9d8 <skip_spaces>
     cb8:	eb cf       	rjmp	.-42     	; 0xc90 <vfscanf+0x32>
     cba:	35 32       	cpi	r19, 0x25	; 37
     cbc:	41 f4       	brne	.+16     	; 0xcce <vfscanf+0x70>
     cbe:	f2 01       	movw	r30, r4
     cc0:	f3 fc       	sbrc	r15, 3
     cc2:	35 91       	lpm	r19, Z+
     cc4:	f3 fe       	sbrs	r15, 3
     cc6:	31 91       	ld	r19, Z+
     cc8:	2f 01       	movw	r4, r30
     cca:	35 32       	cpi	r19, 0x25	; 37
     ccc:	59 f4       	brne	.+22     	; 0xce4 <vfscanf+0x86>
     cce:	c6 01       	movw	r24, r12
     cd0:	39 83       	std	Y+1, r19	; 0x01
     cd2:	0e d1       	rcall	.+540    	; 0xef0 <fgetc>
     cd4:	39 81       	ldd	r19, Y+1	; 0x01
     cd6:	97 fd       	sbrc	r25, 7
     cd8:	ca c0       	rjmp	.+404    	; 0xe6e <vfscanf+0x210>
     cda:	38 17       	cp	r19, r24
     cdc:	c9 f2       	breq	.-78     	; 0xc90 <vfscanf+0x32>
     cde:	b6 01       	movw	r22, r12
     ce0:	7d d1       	rcall	.+762    	; 0xfdc <ungetc>
     ce2:	c7 c0       	rjmp	.+398    	; 0xe72 <vfscanf+0x214>
     ce4:	3a 32       	cpi	r19, 0x2A	; 42
     ce6:	39 f4       	brne	.+14     	; 0xcf6 <vfscanf+0x98>
     ce8:	f3 fc       	sbrc	r15, 3
     cea:	35 91       	lpm	r19, Z+
     cec:	f3 fe       	sbrs	r15, 3
     cee:	31 91       	ld	r19, Z+
     cf0:	2f 01       	movw	r4, r30
     cf2:	51 e0       	ldi	r21, 0x01	; 1
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <vfscanf+0x9a>
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	42 01       	movw	r8, r4
     cfa:	10 e0       	ldi	r17, 0x00	; 0
     cfc:	20 ed       	ldi	r18, 0xD0	; 208
     cfe:	23 0f       	add	r18, r19
     d00:	2a 30       	cpi	r18, 0x0A	; 10
     d02:	88 f4       	brcc	.+34     	; 0xd26 <vfscanf+0xc8>
     d04:	52 60       	ori	r21, 0x02	; 2
     d06:	61 2f       	mov	r22, r17
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	40 e2       	ldi	r20, 0x20	; 32
     d10:	59 83       	std	Y+1, r21	; 0x01
     d12:	42 de       	rcall	.-892    	; 0x998 <mulacc>
     d14:	16 2f       	mov	r17, r22
     d16:	f4 01       	movw	r30, r8
     d18:	f3 fc       	sbrc	r15, 3
     d1a:	35 91       	lpm	r19, Z+
     d1c:	f3 fe       	sbrs	r15, 3
     d1e:	31 91       	ld	r19, Z+
     d20:	4f 01       	movw	r8, r30
     d22:	59 81       	ldd	r21, Y+1	; 0x01
     d24:	eb cf       	rjmp	.-42     	; 0xcfc <vfscanf+0x9e>
     d26:	05 2f       	mov	r16, r21
     d28:	23 2f       	mov	r18, r19
     d2a:	24 01       	movw	r4, r8
     d2c:	51 ff       	sbrs	r21, 1
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <vfscanf+0xd8>
     d30:	11 11       	cpse	r17, r1
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <vfscanf+0xda>
     d34:	9e c0       	rjmp	.+316    	; 0xe72 <vfscanf+0x214>
     d36:	1f ef       	ldi	r17, 0xFF	; 255
     d38:	38 36       	cpi	r19, 0x68	; 104
     d3a:	19 f0       	breq	.+6      	; 0xd42 <vfscanf+0xe4>
     d3c:	3c 36       	cpi	r19, 0x6C	; 108
     d3e:	59 f0       	breq	.+22     	; 0xd56 <vfscanf+0xf8>
     d40:	11 c0       	rjmp	.+34     	; 0xd64 <vfscanf+0x106>
     d42:	f4 01       	movw	r30, r8
     d44:	f3 fc       	sbrc	r15, 3
     d46:	25 91       	lpm	r18, Z+
     d48:	f3 fe       	sbrs	r15, 3
     d4a:	21 91       	ld	r18, Z+
     d4c:	2f 01       	movw	r4, r30
     d4e:	28 36       	cpi	r18, 0x68	; 104
     d50:	49 f4       	brne	.+18     	; 0xd64 <vfscanf+0x106>
     d52:	05 2f       	mov	r16, r21
     d54:	08 60       	ori	r16, 0x08	; 8
     d56:	04 60       	ori	r16, 0x04	; 4
     d58:	f2 01       	movw	r30, r4
     d5a:	f3 fc       	sbrc	r15, 3
     d5c:	25 91       	lpm	r18, Z+
     d5e:	f3 fe       	sbrs	r15, 3
     d60:	21 91       	ld	r18, Z+
     d62:	2f 01       	movw	r4, r30
     d64:	22 23       	and	r18, r18
     d66:	09 f4       	brne	.+2      	; 0xd6a <vfscanf+0x10c>
     d68:	84 c0       	rjmp	.+264    	; 0xe72 <vfscanf+0x214>
     d6a:	62 2f       	mov	r22, r18
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	84 e3       	ldi	r24, 0x34	; 52
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	29 83       	std	Y+1, r18	; 0x01
     d74:	9c d0       	rcall	.+312    	; 0xeae <strchr_P>
     d76:	29 81       	ldd	r18, Y+1	; 0x01
     d78:	89 2b       	or	r24, r25
     d7a:	09 f4       	brne	.+2      	; 0xd7e <vfscanf+0x120>
     d7c:	7a c0       	rjmp	.+244    	; 0xe72 <vfscanf+0x214>
     d7e:	00 fd       	sbrc	r16, 0
     d80:	07 c0       	rjmp	.+14     	; 0xd90 <vfscanf+0x132>
     d82:	f5 01       	movw	r30, r10
     d84:	e0 80       	ld	r14, Z
     d86:	f1 80       	ldd	r15, Z+1	; 0x01
     d88:	c5 01       	movw	r24, r10
     d8a:	02 96       	adiw	r24, 0x02	; 2
     d8c:	5c 01       	movw	r10, r24
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <vfscanf+0x136>
     d90:	e1 2c       	mov	r14, r1
     d92:	f1 2c       	mov	r15, r1
     d94:	2e 36       	cpi	r18, 0x6E	; 110
     d96:	49 f4       	brne	.+18     	; 0xdaa <vfscanf+0x14c>
     d98:	f6 01       	movw	r30, r12
     d9a:	46 81       	ldd	r20, Z+6	; 0x06
     d9c:	57 81       	ldd	r21, Z+7	; 0x07
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	20 2f       	mov	r18, r16
     da4:	c7 01       	movw	r24, r14
     da6:	ec dd       	rcall	.-1064   	; 0x980 <putval>
     da8:	73 cf       	rjmp	.-282    	; 0xc90 <vfscanf+0x32>
     daa:	23 36       	cpi	r18, 0x63	; 99
     dac:	89 f4       	brne	.+34     	; 0xdd0 <vfscanf+0x172>
     dae:	01 ff       	sbrs	r16, 1
     db0:	11 e0       	ldi	r17, 0x01	; 1
     db2:	c6 01       	movw	r24, r12
     db4:	9d d0       	rcall	.+314    	; 0xef0 <fgetc>
     db6:	97 fd       	sbrc	r25, 7
     db8:	5a c0       	rjmp	.+180    	; 0xe6e <vfscanf+0x210>
     dba:	e1 14       	cp	r14, r1
     dbc:	f1 04       	cpc	r15, r1
     dbe:	29 f0       	breq	.+10     	; 0xdca <vfscanf+0x16c>
     dc0:	f7 01       	movw	r30, r14
     dc2:	80 83       	st	Z, r24
     dc4:	c7 01       	movw	r24, r14
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	7c 01       	movw	r14, r24
     dca:	11 50       	subi	r17, 0x01	; 1
     dcc:	91 f7       	brne	.-28     	; 0xdb2 <vfscanf+0x154>
     dce:	4b c0       	rjmp	.+150    	; 0xe66 <vfscanf+0x208>
     dd0:	2b 35       	cpi	r18, 0x5B	; 91
     dd2:	51 f4       	brne	.+20     	; 0xde8 <vfscanf+0x18a>
     dd4:	92 01       	movw	r18, r4
     dd6:	a7 01       	movw	r20, r14
     dd8:	61 2f       	mov	r22, r17
     dda:	c6 01       	movw	r24, r12
     ddc:	9e de       	rcall	.-708    	; 0xb1a <conv_brk>
     dde:	2c 01       	movw	r4, r24
     de0:	89 2b       	or	r24, r25
     de2:	09 f0       	breq	.+2      	; 0xde6 <vfscanf+0x188>
     de4:	40 c0       	rjmp	.+128    	; 0xe66 <vfscanf+0x208>
     de6:	3a c0       	rjmp	.+116    	; 0xe5c <vfscanf+0x1fe>
     de8:	c6 01       	movw	r24, r12
     dea:	29 83       	std	Y+1, r18	; 0x01
     dec:	f5 dd       	rcall	.-1046   	; 0x9d8 <skip_spaces>
     dee:	29 81       	ldd	r18, Y+1	; 0x01
     df0:	97 fd       	sbrc	r25, 7
     df2:	3d c0       	rjmp	.+122    	; 0xe6e <vfscanf+0x210>
     df4:	2f 36       	cpi	r18, 0x6F	; 111
     df6:	41 f1       	breq	.+80     	; 0xe48 <vfscanf+0x1ea>
     df8:	28 f4       	brcc	.+10     	; 0xe04 <vfscanf+0x1a6>
     dfa:	24 36       	cpi	r18, 0x64	; 100
     dfc:	19 f1       	breq	.+70     	; 0xe44 <vfscanf+0x1e6>
     dfe:	29 36       	cpi	r18, 0x69	; 105
     e00:	31 f1       	breq	.+76     	; 0xe4e <vfscanf+0x1f0>
     e02:	24 c0       	rjmp	.+72     	; 0xe4c <vfscanf+0x1ee>
     e04:	23 37       	cpi	r18, 0x73	; 115
     e06:	69 f0       	breq	.+26     	; 0xe22 <vfscanf+0x1c4>
     e08:	25 37       	cpi	r18, 0x75	; 117
     e0a:	e1 f0       	breq	.+56     	; 0xe44 <vfscanf+0x1e6>
     e0c:	1f c0       	rjmp	.+62     	; 0xe4c <vfscanf+0x1ee>
     e0e:	e1 14       	cp	r14, r1
     e10:	f1 04       	cpc	r15, r1
     e12:	29 f0       	breq	.+10     	; 0xe1e <vfscanf+0x1c0>
     e14:	f7 01       	movw	r30, r14
     e16:	80 82       	st	Z, r8
     e18:	c7 01       	movw	r24, r14
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	7c 01       	movw	r14, r24
     e1e:	11 50       	subi	r17, 0x01	; 1
     e20:	59 f0       	breq	.+22     	; 0xe38 <vfscanf+0x1da>
     e22:	c6 01       	movw	r24, r12
     e24:	65 d0       	rcall	.+202    	; 0xef0 <fgetc>
     e26:	4c 01       	movw	r8, r24
     e28:	97 fd       	sbrc	r25, 7
     e2a:	06 c0       	rjmp	.+12     	; 0xe38 <vfscanf+0x1da>
     e2c:	38 d0       	rcall	.+112    	; 0xe9e <isspace>
     e2e:	89 2b       	or	r24, r25
     e30:	71 f3       	breq	.-36     	; 0xe0e <vfscanf+0x1b0>
     e32:	b6 01       	movw	r22, r12
     e34:	c4 01       	movw	r24, r8
     e36:	d2 d0       	rcall	.+420    	; 0xfdc <ungetc>
     e38:	e1 14       	cp	r14, r1
     e3a:	f1 04       	cpc	r15, r1
     e3c:	a1 f0       	breq	.+40     	; 0xe66 <vfscanf+0x208>
     e3e:	f7 01       	movw	r30, r14
     e40:	10 82       	st	Z, r1
     e42:	11 c0       	rjmp	.+34     	; 0xe66 <vfscanf+0x208>
     e44:	00 62       	ori	r16, 0x20	; 32
     e46:	03 c0       	rjmp	.+6      	; 0xe4e <vfscanf+0x1f0>
     e48:	00 61       	ori	r16, 0x10	; 16
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <vfscanf+0x1f0>
     e4c:	00 64       	ori	r16, 0x40	; 64
     e4e:	20 2f       	mov	r18, r16
     e50:	a7 01       	movw	r20, r14
     e52:	61 2f       	mov	r22, r17
     e54:	c6 01       	movw	r24, r12
     e56:	d6 dd       	rcall	.-1108   	; 0xa04 <conv_int>
     e58:	81 11       	cpse	r24, r1
     e5a:	05 c0       	rjmp	.+10     	; 0xe66 <vfscanf+0x208>
     e5c:	f6 01       	movw	r30, r12
     e5e:	83 81       	ldd	r24, Z+3	; 0x03
     e60:	80 73       	andi	r24, 0x30	; 48
     e62:	29 f4       	brne	.+10     	; 0xe6e <vfscanf+0x210>
     e64:	06 c0       	rjmp	.+12     	; 0xe72 <vfscanf+0x214>
     e66:	00 fd       	sbrc	r16, 0
     e68:	13 cf       	rjmp	.-474    	; 0xc90 <vfscanf+0x32>
     e6a:	73 94       	inc	r7
     e6c:	11 cf       	rjmp	.-478    	; 0xc90 <vfscanf+0x32>
     e6e:	77 20       	and	r7, r7
     e70:	19 f0       	breq	.+6      	; 0xe78 <vfscanf+0x21a>
     e72:	87 2d       	mov	r24, r7
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <vfscanf+0x21e>
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	9f ef       	ldi	r25, 0xFF	; 255
     e7c:	0f 90       	pop	r0
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	ef 90       	pop	r14
     e8a:	df 90       	pop	r13
     e8c:	cf 90       	pop	r12
     e8e:	bf 90       	pop	r11
     e90:	af 90       	pop	r10
     e92:	9f 90       	pop	r9
     e94:	8f 90       	pop	r8
     e96:	7f 90       	pop	r7
     e98:	5f 90       	pop	r5
     e9a:	4f 90       	pop	r4
     e9c:	08 95       	ret

00000e9e <isspace>:
     e9e:	91 11       	cpse	r25, r1
     ea0:	14 c1       	rjmp	.+552    	; 0x10ca <__ctype_isfalse>
     ea2:	80 32       	cpi	r24, 0x20	; 32
     ea4:	19 f0       	breq	.+6      	; 0xeac <isspace+0xe>
     ea6:	89 50       	subi	r24, 0x09	; 9
     ea8:	85 50       	subi	r24, 0x05	; 5
     eaa:	d0 f7       	brcc	.-12     	; 0xea0 <isspace+0x2>
     eac:	08 95       	ret

00000eae <strchr_P>:
     eae:	fc 01       	movw	r30, r24
     eb0:	05 90       	lpm	r0, Z+
     eb2:	06 16       	cp	r0, r22
     eb4:	21 f0       	breq	.+8      	; 0xebe <strchr_P+0x10>
     eb6:	00 20       	and	r0, r0
     eb8:	d9 f7       	brne	.-10     	; 0xeb0 <strchr_P+0x2>
     eba:	c0 01       	movw	r24, r0
     ebc:	08 95       	ret
     ebe:	31 97       	sbiw	r30, 0x01	; 1
     ec0:	cf 01       	movw	r24, r30
     ec2:	08 95       	ret

00000ec4 <strnlen_P>:
     ec4:	fc 01       	movw	r30, r24
     ec6:	05 90       	lpm	r0, Z+
     ec8:	61 50       	subi	r22, 0x01	; 1
     eca:	70 40       	sbci	r23, 0x00	; 0
     ecc:	01 10       	cpse	r0, r1
     ece:	d8 f7       	brcc	.-10     	; 0xec6 <strnlen_P+0x2>
     ed0:	80 95       	com	r24
     ed2:	90 95       	com	r25
     ed4:	8e 0f       	add	r24, r30
     ed6:	9f 1f       	adc	r25, r31
     ed8:	08 95       	ret

00000eda <strnlen>:
     eda:	fc 01       	movw	r30, r24
     edc:	61 50       	subi	r22, 0x01	; 1
     ede:	70 40       	sbci	r23, 0x00	; 0
     ee0:	01 90       	ld	r0, Z+
     ee2:	01 10       	cpse	r0, r1
     ee4:	d8 f7       	brcc	.-10     	; 0xedc <strnlen+0x2>
     ee6:	80 95       	com	r24
     ee8:	90 95       	com	r25
     eea:	8e 0f       	add	r24, r30
     eec:	9f 1f       	adc	r25, r31
     eee:	08 95       	ret

00000ef0 <fgetc>:
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	ec 01       	movw	r28, r24
     ef6:	2b 81       	ldd	r18, Y+3	; 0x03
     ef8:	20 ff       	sbrs	r18, 0
     efa:	33 c0       	rjmp	.+102    	; 0xf62 <fgetc+0x72>
     efc:	26 ff       	sbrs	r18, 6
     efe:	0a c0       	rjmp	.+20     	; 0xf14 <fgetc+0x24>
     f00:	2f 7b       	andi	r18, 0xBF	; 191
     f02:	2b 83       	std	Y+3, r18	; 0x03
     f04:	8e 81       	ldd	r24, Y+6	; 0x06
     f06:	9f 81       	ldd	r25, Y+7	; 0x07
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	9f 83       	std	Y+7, r25	; 0x07
     f0c:	8e 83       	std	Y+6, r24	; 0x06
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	29 c0       	rjmp	.+82     	; 0xf66 <fgetc+0x76>
     f14:	22 ff       	sbrs	r18, 2
     f16:	0f c0       	rjmp	.+30     	; 0xf36 <fgetc+0x46>
     f18:	e8 81       	ld	r30, Y
     f1a:	f9 81       	ldd	r31, Y+1	; 0x01
     f1c:	80 81       	ld	r24, Z
     f1e:	08 2e       	mov	r0, r24
     f20:	00 0c       	add	r0, r0
     f22:	99 0b       	sbc	r25, r25
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	19 f4       	brne	.+6      	; 0xf2e <fgetc+0x3e>
     f28:	20 62       	ori	r18, 0x20	; 32
     f2a:	2b 83       	std	Y+3, r18	; 0x03
     f2c:	1a c0       	rjmp	.+52     	; 0xf62 <fgetc+0x72>
     f2e:	31 96       	adiw	r30, 0x01	; 1
     f30:	f9 83       	std	Y+1, r31	; 0x01
     f32:	e8 83       	st	Y, r30
     f34:	0e c0       	rjmp	.+28     	; 0xf52 <fgetc+0x62>
     f36:	ea 85       	ldd	r30, Y+10	; 0x0a
     f38:	fb 85       	ldd	r31, Y+11	; 0x0b
     f3a:	09 95       	icall
     f3c:	97 ff       	sbrs	r25, 7
     f3e:	09 c0       	rjmp	.+18     	; 0xf52 <fgetc+0x62>
     f40:	2b 81       	ldd	r18, Y+3	; 0x03
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	11 f0       	breq	.+4      	; 0xf4a <fgetc+0x5a>
     f46:	80 e2       	ldi	r24, 0x20	; 32
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <fgetc+0x5c>
     f4a:	80 e1       	ldi	r24, 0x10	; 16
     f4c:	82 2b       	or	r24, r18
     f4e:	8b 83       	std	Y+3, r24	; 0x03
     f50:	08 c0       	rjmp	.+16     	; 0xf62 <fgetc+0x72>
     f52:	2e 81       	ldd	r18, Y+6	; 0x06
     f54:	3f 81       	ldd	r19, Y+7	; 0x07
     f56:	2f 5f       	subi	r18, 0xFF	; 255
     f58:	3f 4f       	sbci	r19, 0xFF	; 255
     f5a:	3f 83       	std	Y+7, r19	; 0x07
     f5c:	2e 83       	std	Y+6, r18	; 0x06
     f5e:	99 27       	eor	r25, r25
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <fgetc+0x76>
     f62:	8f ef       	ldi	r24, 0xFF	; 255
     f64:	9f ef       	ldi	r25, 0xFF	; 255
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <fputc>:
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	fb 01       	movw	r30, r22
     f76:	23 81       	ldd	r18, Z+3	; 0x03
     f78:	21 fd       	sbrc	r18, 1
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <fputc+0x16>
     f7c:	8f ef       	ldi	r24, 0xFF	; 255
     f7e:	9f ef       	ldi	r25, 0xFF	; 255
     f80:	28 c0       	rjmp	.+80     	; 0xfd2 <fputc+0x66>
     f82:	22 ff       	sbrs	r18, 2
     f84:	16 c0       	rjmp	.+44     	; 0xfb2 <fputc+0x46>
     f86:	46 81       	ldd	r20, Z+6	; 0x06
     f88:	57 81       	ldd	r21, Z+7	; 0x07
     f8a:	24 81       	ldd	r18, Z+4	; 0x04
     f8c:	35 81       	ldd	r19, Z+5	; 0x05
     f8e:	42 17       	cp	r20, r18
     f90:	53 07       	cpc	r21, r19
     f92:	44 f4       	brge	.+16     	; 0xfa4 <fputc+0x38>
     f94:	a0 81       	ld	r26, Z
     f96:	b1 81       	ldd	r27, Z+1	; 0x01
     f98:	9d 01       	movw	r18, r26
     f9a:	2f 5f       	subi	r18, 0xFF	; 255
     f9c:	3f 4f       	sbci	r19, 0xFF	; 255
     f9e:	31 83       	std	Z+1, r19	; 0x01
     fa0:	20 83       	st	Z, r18
     fa2:	8c 93       	st	X, r24
     fa4:	26 81       	ldd	r18, Z+6	; 0x06
     fa6:	37 81       	ldd	r19, Z+7	; 0x07
     fa8:	2f 5f       	subi	r18, 0xFF	; 255
     faa:	3f 4f       	sbci	r19, 0xFF	; 255
     fac:	37 83       	std	Z+7, r19	; 0x07
     fae:	26 83       	std	Z+6, r18	; 0x06
     fb0:	10 c0       	rjmp	.+32     	; 0xfd2 <fputc+0x66>
     fb2:	eb 01       	movw	r28, r22
     fb4:	09 2f       	mov	r16, r25
     fb6:	18 2f       	mov	r17, r24
     fb8:	00 84       	ldd	r0, Z+8	; 0x08
     fba:	f1 85       	ldd	r31, Z+9	; 0x09
     fbc:	e0 2d       	mov	r30, r0
     fbe:	09 95       	icall
     fc0:	89 2b       	or	r24, r25
     fc2:	e1 f6       	brne	.-72     	; 0xf7c <fputc+0x10>
     fc4:	8e 81       	ldd	r24, Y+6	; 0x06
     fc6:	9f 81       	ldd	r25, Y+7	; 0x07
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	9f 83       	std	Y+7, r25	; 0x07
     fcc:	8e 83       	std	Y+6, r24	; 0x06
     fce:	81 2f       	mov	r24, r17
     fd0:	90 2f       	mov	r25, r16
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	08 95       	ret

00000fdc <ungetc>:
     fdc:	fb 01       	movw	r30, r22
     fde:	23 81       	ldd	r18, Z+3	; 0x03
     fe0:	20 ff       	sbrs	r18, 0
     fe2:	12 c0       	rjmp	.+36     	; 0x1008 <ungetc+0x2c>
     fe4:	26 fd       	sbrc	r18, 6
     fe6:	10 c0       	rjmp	.+32     	; 0x1008 <ungetc+0x2c>
     fe8:	8f 3f       	cpi	r24, 0xFF	; 255
     fea:	3f ef       	ldi	r19, 0xFF	; 255
     fec:	93 07       	cpc	r25, r19
     fee:	61 f0       	breq	.+24     	; 0x1008 <ungetc+0x2c>
     ff0:	82 83       	std	Z+2, r24	; 0x02
     ff2:	2f 7d       	andi	r18, 0xDF	; 223
     ff4:	20 64       	ori	r18, 0x40	; 64
     ff6:	23 83       	std	Z+3, r18	; 0x03
     ff8:	26 81       	ldd	r18, Z+6	; 0x06
     ffa:	37 81       	ldd	r19, Z+7	; 0x07
     ffc:	21 50       	subi	r18, 0x01	; 1
     ffe:	31 09       	sbc	r19, r1
    1000:	37 83       	std	Z+7, r19	; 0x07
    1002:	26 83       	std	Z+6, r18	; 0x06
    1004:	99 27       	eor	r25, r25
    1006:	08 95       	ret
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	9f ef       	ldi	r25, 0xFF	; 255
    100c:	08 95       	ret

0000100e <__ultoa_invert>:
    100e:	fa 01       	movw	r30, r20
    1010:	aa 27       	eor	r26, r26
    1012:	28 30       	cpi	r18, 0x08	; 8
    1014:	51 f1       	breq	.+84     	; 0x106a <__ultoa_invert+0x5c>
    1016:	20 31       	cpi	r18, 0x10	; 16
    1018:	81 f1       	breq	.+96     	; 0x107a <__ultoa_invert+0x6c>
    101a:	e8 94       	clt
    101c:	6f 93       	push	r22
    101e:	6e 7f       	andi	r22, 0xFE	; 254
    1020:	6e 5f       	subi	r22, 0xFE	; 254
    1022:	7f 4f       	sbci	r23, 0xFF	; 255
    1024:	8f 4f       	sbci	r24, 0xFF	; 255
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	af 4f       	sbci	r26, 0xFF	; 255
    102a:	b1 e0       	ldi	r27, 0x01	; 1
    102c:	3e d0       	rcall	.+124    	; 0x10aa <__ultoa_invert+0x9c>
    102e:	b4 e0       	ldi	r27, 0x04	; 4
    1030:	3c d0       	rcall	.+120    	; 0x10aa <__ultoa_invert+0x9c>
    1032:	67 0f       	add	r22, r23
    1034:	78 1f       	adc	r23, r24
    1036:	89 1f       	adc	r24, r25
    1038:	9a 1f       	adc	r25, r26
    103a:	a1 1d       	adc	r26, r1
    103c:	68 0f       	add	r22, r24
    103e:	79 1f       	adc	r23, r25
    1040:	8a 1f       	adc	r24, r26
    1042:	91 1d       	adc	r25, r1
    1044:	a1 1d       	adc	r26, r1
    1046:	6a 0f       	add	r22, r26
    1048:	71 1d       	adc	r23, r1
    104a:	81 1d       	adc	r24, r1
    104c:	91 1d       	adc	r25, r1
    104e:	a1 1d       	adc	r26, r1
    1050:	20 d0       	rcall	.+64     	; 0x1092 <__ultoa_invert+0x84>
    1052:	09 f4       	brne	.+2      	; 0x1056 <__ultoa_invert+0x48>
    1054:	68 94       	set
    1056:	3f 91       	pop	r19
    1058:	2a e0       	ldi	r18, 0x0A	; 10
    105a:	26 9f       	mul	r18, r22
    105c:	11 24       	eor	r1, r1
    105e:	30 19       	sub	r19, r0
    1060:	30 5d       	subi	r19, 0xD0	; 208
    1062:	31 93       	st	Z+, r19
    1064:	de f6       	brtc	.-74     	; 0x101c <__ultoa_invert+0xe>
    1066:	cf 01       	movw	r24, r30
    1068:	08 95       	ret
    106a:	46 2f       	mov	r20, r22
    106c:	47 70       	andi	r20, 0x07	; 7
    106e:	40 5d       	subi	r20, 0xD0	; 208
    1070:	41 93       	st	Z+, r20
    1072:	b3 e0       	ldi	r27, 0x03	; 3
    1074:	0f d0       	rcall	.+30     	; 0x1094 <__ultoa_invert+0x86>
    1076:	c9 f7       	brne	.-14     	; 0x106a <__ultoa_invert+0x5c>
    1078:	f6 cf       	rjmp	.-20     	; 0x1066 <__ultoa_invert+0x58>
    107a:	46 2f       	mov	r20, r22
    107c:	4f 70       	andi	r20, 0x0F	; 15
    107e:	40 5d       	subi	r20, 0xD0	; 208
    1080:	4a 33       	cpi	r20, 0x3A	; 58
    1082:	18 f0       	brcs	.+6      	; 0x108a <__ultoa_invert+0x7c>
    1084:	49 5d       	subi	r20, 0xD9	; 217
    1086:	31 fd       	sbrc	r19, 1
    1088:	40 52       	subi	r20, 0x20	; 32
    108a:	41 93       	st	Z+, r20
    108c:	02 d0       	rcall	.+4      	; 0x1092 <__ultoa_invert+0x84>
    108e:	a9 f7       	brne	.-22     	; 0x107a <__ultoa_invert+0x6c>
    1090:	ea cf       	rjmp	.-44     	; 0x1066 <__ultoa_invert+0x58>
    1092:	b4 e0       	ldi	r27, 0x04	; 4
    1094:	a6 95       	lsr	r26
    1096:	97 95       	ror	r25
    1098:	87 95       	ror	r24
    109a:	77 95       	ror	r23
    109c:	67 95       	ror	r22
    109e:	ba 95       	dec	r27
    10a0:	c9 f7       	brne	.-14     	; 0x1094 <__ultoa_invert+0x86>
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	61 05       	cpc	r22, r1
    10a6:	71 05       	cpc	r23, r1
    10a8:	08 95       	ret
    10aa:	9b 01       	movw	r18, r22
    10ac:	ac 01       	movw	r20, r24
    10ae:	0a 2e       	mov	r0, r26
    10b0:	06 94       	lsr	r0
    10b2:	57 95       	ror	r21
    10b4:	47 95       	ror	r20
    10b6:	37 95       	ror	r19
    10b8:	27 95       	ror	r18
    10ba:	ba 95       	dec	r27
    10bc:	c9 f7       	brne	.-14     	; 0x10b0 <__ultoa_invert+0xa2>
    10be:	62 0f       	add	r22, r18
    10c0:	73 1f       	adc	r23, r19
    10c2:	84 1f       	adc	r24, r20
    10c4:	95 1f       	adc	r25, r21
    10c6:	a0 1d       	adc	r26, r0
    10c8:	08 95       	ret

000010ca <__ctype_isfalse>:
    10ca:	99 27       	eor	r25, r25
    10cc:	88 27       	eor	r24, r24

000010ce <__ctype_istrue>:
    10ce:	08 95       	ret

000010d0 <__prologue_saves__>:
    10d0:	2f 92       	push	r2
    10d2:	3f 92       	push	r3
    10d4:	4f 92       	push	r4
    10d6:	5f 92       	push	r5
    10d8:	6f 92       	push	r6
    10da:	7f 92       	push	r7
    10dc:	8f 92       	push	r8
    10de:	9f 92       	push	r9
    10e0:	af 92       	push	r10
    10e2:	bf 92       	push	r11
    10e4:	cf 92       	push	r12
    10e6:	df 92       	push	r13
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	ca 1b       	sub	r28, r26
    10fa:	db 0b       	sbc	r29, r27
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	09 94       	ijmp

00001108 <__epilogue_restores__>:
    1108:	2a 88       	ldd	r2, Y+18	; 0x12
    110a:	39 88       	ldd	r3, Y+17	; 0x11
    110c:	48 88       	ldd	r4, Y+16	; 0x10
    110e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1110:	6e 84       	ldd	r6, Y+14	; 0x0e
    1112:	7d 84       	ldd	r7, Y+13	; 0x0d
    1114:	8c 84       	ldd	r8, Y+12	; 0x0c
    1116:	9b 84       	ldd	r9, Y+11	; 0x0b
    1118:	aa 84       	ldd	r10, Y+10	; 0x0a
    111a:	b9 84       	ldd	r11, Y+9	; 0x09
    111c:	c8 84       	ldd	r12, Y+8	; 0x08
    111e:	df 80       	ldd	r13, Y+7	; 0x07
    1120:	ee 80       	ldd	r14, Y+6	; 0x06
    1122:	fd 80       	ldd	r15, Y+5	; 0x05
    1124:	0c 81       	ldd	r16, Y+4	; 0x04
    1126:	1b 81       	ldd	r17, Y+3	; 0x03
    1128:	aa 81       	ldd	r26, Y+2	; 0x02
    112a:	b9 81       	ldd	r27, Y+1	; 0x01
    112c:	ce 0f       	add	r28, r30
    112e:	d1 1d       	adc	r29, r1
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	ed 01       	movw	r28, r26
    113c:	08 95       	ret

0000113e <_exit>:
    113e:	f8 94       	cli

00001140 <__stop_program>:
    1140:	ff cf       	rjmp	.-2      	; 0x1140 <__stop_program>
