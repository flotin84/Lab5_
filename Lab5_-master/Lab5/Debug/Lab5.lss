
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000934  000009c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000934  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800166  00800166  00000a2e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000107f  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000030e  00000000  00000000  00001c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000464  00000000  00000000  00001f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  000023a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000539  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a9  00000000  00000000  00002b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000032e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	20 c0       	rjmp	.+64     	; 0x42 <__ctors_end>
   2:	3a c0       	rjmp	.+116    	; 0x78 <__bad_interrupt>
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	38 c0       	rjmp	.+112    	; 0x78 <__bad_interrupt>
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	36 c0       	rjmp	.+108    	; 0x78 <__bad_interrupt>
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	34 c0       	rjmp	.+104    	; 0x78 <__bad_interrupt>
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	32 c0       	rjmp	.+100    	; 0x78 <__bad_interrupt>
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	30 c0       	rjmp	.+96     	; 0x78 <__bad_interrupt>
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	2e c0       	rjmp	.+92     	; 0x78 <__bad_interrupt>
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	2c c0       	rjmp	.+88     	; 0x78 <__bad_interrupt>
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	2a c0       	rjmp	.+84     	; 0x78 <__bad_interrupt>
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	28 c0       	rjmp	.+80     	; 0x78 <__bad_interrupt>
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	26 c0       	rjmp	.+76     	; 0x78 <__bad_interrupt>
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	24 c0       	rjmp	.+72     	; 0x78 <__bad_interrupt>
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	22 c0       	rjmp	.+68     	; 0x78 <__bad_interrupt>

00000034 <__trampolines_end>:
  34:	46 6c       	ori	r20, 0xC6	; 198
  36:	61 73       	andi	r22, 0x31	; 49
  38:	68 20       	and	r6, r8
  3a:	47 6f       	ori	r20, 0xF7	; 247
  3c:	72 64       	ori	r23, 0x42	; 66
  3e:	6f 6e       	ori	r22, 0xEF	; 239
  40:	0a 00       	.word	0x000a	; ????

00000042 <__ctors_end>:
  42:	11 24       	eor	r1, r1
  44:	1f be       	out	0x3f, r1	; 63
  46:	cf ef       	ldi	r28, 0xFF	; 255
  48:	d4 e0       	ldi	r29, 0x04	; 4
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	cd bf       	out	0x3d, r28	; 61

0000004e <__do_copy_data>:
  4e:	11 e0       	ldi	r17, 0x01	; 1
  50:	a0 e0       	ldi	r26, 0x00	; 0
  52:	b1 e0       	ldi	r27, 0x01	; 1
  54:	e4 e3       	ldi	r30, 0x34	; 52
  56:	f9 e0       	ldi	r31, 0x09	; 9
  58:	02 c0       	rjmp	.+4      	; 0x5e <__do_copy_data+0x10>
  5a:	05 90       	lpm	r0, Z+
  5c:	0d 92       	st	X+, r0
  5e:	a6 36       	cpi	r26, 0x66	; 102
  60:	b1 07       	cpc	r27, r17
  62:	d9 f7       	brne	.-10     	; 0x5a <__do_copy_data+0xc>

00000064 <__do_clear_bss>:
  64:	21 e0       	ldi	r18, 0x01	; 1
  66:	a6 e6       	ldi	r26, 0x66	; 102
  68:	b1 e0       	ldi	r27, 0x01	; 1
  6a:	01 c0       	rjmp	.+2      	; 0x6e <.do_clear_bss_start>

0000006c <.do_clear_bss_loop>:
  6c:	1d 92       	st	X+, r1

0000006e <.do_clear_bss_start>:
  6e:	aa 36       	cpi	r26, 0x6A	; 106
  70:	b2 07       	cpc	r27, r18
  72:	e1 f7       	brne	.-8      	; 0x6c <.do_clear_bss_loop>
  74:	c1 d0       	rcall	.+386    	; 0x1f8 <main>
  76:	5c c4       	rjmp	.+2232   	; 0x930 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <lcd_write_4>:

			}
			break;
		case TW_MR_DATA_NACK:										// 0x58; data received, NACK issued
			// store final received data byte
			i2cReceiveData[i2cReceiveDataIndex++] = TWDR;
  7a:	43 98       	cbi	0x08, 3	; 8
  7c:	88 23       	and	r24, r24
  7e:	0c f4       	brge	.+2      	; 0x82 <lcd_write_4+0x8>
  80:	43 9a       	sbi	0x08, 3	; 8
  82:	42 98       	cbi	0x08, 2	; 8
  84:	86 fd       	sbrc	r24, 6
			// continue to transmit STOP condition
		case TW_MR_SLA_NACK:										// 0x48; slave address not acknowledged
		case TW_MT_SLA_NACK:										// 0x20; slave address not acknowledged
		case TW_MT_DATA_NACK:										// 0x30; data not acknowledged
			// transmit stop condition, enable sla ack
			i2c_sendStop();
  86:	42 9a       	sbi	0x08, 2	; 8
			// set state
			I2cState = I2C_IDLE;
  88:	41 98       	cbi	0x08, 1	; 8
  8a:	85 fd       	sbrc	r24, 5
			break;
  8c:	41 9a       	sbi	0x08, 1	; 8
		case TW_MT_ARB_LOST:										// 0x38; bus arbitration lost
		//case TW_MR_ARB_LOST:										// 0x38; bus arbitration lost
			// release bus
			TWCR = ((TWCR & TWCR_CMD_MASK)|1<<TWINT);
  8e:	40 98       	cbi	0x08, 0	; 8
  90:	84 fd       	sbrc	r24, 4
  92:	40 9a       	sbi	0x08, 0	; 8
  94:	2b 9a       	sbi	0x05, 3	; 5
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	8a 95       	dec	r24

			// set state
			I2cState = I2C_IDLE;
  9a:	f1 f7       	brne	.-4      	; 0x98 <lcd_write_4+0x1e>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <lcd_write_4+0x24>

			// release bus and transmit start when bus is free
			// TWCR = ((TWCR & TWCR_CMD_MASK)|1<<TWINT|1<<TWSTA);
			break;
  9e:	2b 98       	cbi	0x05, 3	; 5
		case TW_MR_DATA_ACK:										// 0x50; data acknowledged
			// store received data byte
			i2cReceiveData[i2cReceiveDataIndex++] = TWDR;
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_write_4+0x28>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <lcd_write_4+0x2e>
  a8:	08 95       	ret

000000aa <lcd_write_character_4d>:
  aa:	cf 93       	push	r28
  ac:	c8 2f       	mov	r28, r24
  ae:	2d 9a       	sbi	0x05, 5	; 5
  b0:	2b 98       	cbi	0x05, 3	; 5
  b2:	e3 df       	rcall	.-58     	; 0x7a <lcd_write_4>
  b4:	8c 2f       	mov	r24, r28
  b6:	82 95       	swap	r24
			
			// fall through to see if more bytes will be received
		case TW_MR_SLA_ACK:										// 0x40; slave address acknowledged
			if(i2cReceiveDataIndex < (i2cReceiveDataLength - 1))
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	df df       	rcall	.-66     	; 0x7a <lcd_write_4>
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <lcd_write_string_4d>:
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	ec 01       	movw	r28, r24
  c6:	88 81       	ld	r24, Y
  c8:	88 23       	and	r24, r24
  ca:	49 f0       	breq	.+18     	; 0xde <lcd_write_string_4d+0x1e>
			{
				// data byte will be received, reply with ack (more bytes in transfer)
				i2c_receiveByte(1);
  cc:	21 96       	adiw	r28, 0x01	; 1
  ce:	ed df       	rcall	.-38     	; 0xaa <lcd_write_character_4d>
  d0:	8a e6       	ldi	r24, 0x6A	; 106
			}
			else
			{
				// data byte will be received, reply with nack (final byte in transfer)
				i2c_receiveByte(0);
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_write_string_4d+0x12>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcd_write_string_4d+0x18>
		case TW_NO_INFO:											// 0xF8; no relevant state information	
			// do nothing
			break;
		case TW_BUS_ERROR:											// 0x00; bus error due to illegal start or stop condition
			// reset internal hardware and release bus
			TWCR = ((TWCR & TWCR_CMD_MASK)|1<<TWINT|1<<TWSTO|1<<TWEA);
  d8:	89 91       	ld	r24, Y+
  da:	81 11       	cpse	r24, r1
  dc:	f8 cf       	rjmp	.-16     	; 0xce <lcd_write_string_4d+0xe>
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <lcd_write_instruction_4d>:

			// set state
			I2cState = I2C_IDLE;
  e4:	cf 93       	push	r28
  e6:	c8 2f       	mov	r28, r24
			break;
	}
  e8:	2d 98       	cbi	0x05, 5	; 5
  ea:	2b 98       	cbi	0x05, 3	; 5
  ec:	c6 df       	rcall	.-116    	; 0x7a <lcd_write_4>
  ee:	8c 2f       	mov	r24, r28
  f0:	82 95       	swap	r24
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	c2 df       	rcall	.-124    	; 0x7a <lcd_write_4>
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <lcd_init_4d>:
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	80 e7       	ldi	r24, 0x70	; 112
  fe:	92 e0       	ldi	r25, 0x02	; 2
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <lcd_init_4d+0x6>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_init_4d+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	00 00       	nop
{
// Power-up delay
    _delay_ms(100);                                 // initial 100 mSec delay

// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
 10c:	2d 98       	cbi	0x05, 5	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 10e:	2b 98       	cbi	0x05, 3	; 5

// Reset the LCD controller
    lcd_write_4(lcd_FunctionSet8bit);                 // first part of reset sequence
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	b3 df       	rcall	.-154    	; 0x7a <lcd_write_4>
 114:	8f e1       	ldi	r24, 0x1F	; 31
 116:	9e e4       	ldi	r25, 0x4E	; 78
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_init_4d+0x1e>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_init_4d+0x24>
 11e:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionSet8bit);                 // second part of reset sequence
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	ab df       	rcall	.-170    	; 0x7a <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	8f e8       	ldi	r24, 0x8F	; 143
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_init_4d+0x2e>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_init_4d+0x34>
 12e:	00 00       	nop
    _delay_us(200);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionSet8bit);                 // third part of reset sequence
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	a3 df       	rcall	.-186    	; 0x7a <lcd_write_4>
 134:	8f e8       	ldi	r24, 0x8F	; 143
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_init_4d+0x3e>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_init_4d+0x44>
 13e:	00 00       	nop
    _delay_us(200);                                 // this delay is omitted in the data sheet
 
    lcd_write_4(lcd_functionSet4bit);               // set 4-bit mode
 140:	82 e8       	ldi	r24, 0x82	; 130
 142:	9b df       	rcall	.-202    	; 0x7a <lcd_write_4>
 144:	9d e0       	ldi	r25, 0x0D	; 13
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_init_4d+0x4c>
 14a:	00 00       	nop
    _delay_us(5);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_functionSet4bit);   // set mode, lines, and font
 14c:	82 e8       	ldi	r24, 0x82	; 130
 14e:	ca df       	rcall	.-108    	; 0xe4 <lcd_write_instruction_4d>
 150:	2a e6       	ldi	r18, 0x6A	; 106
 152:	2a 95       	dec	r18
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_init_4d+0x58>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_init_4d+0x5e>
    _delay_us(40);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_clear);             // clear display RAM
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	c4 df       	rcall	.-120    	; 0xe4 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e0       	ldi	r24, 0x0F	; 15
 15e:	97 e2       	ldi	r25, 0x27	; 39
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_init_4d+0x66>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_init_4d+0x6c>
 166:	00 00       	nop
    _delay_ms(5);                                   // 1.64 mS delay (min)

// Display On/Off Control instruction
	lcd_write_instruction_4d(lcd_displayOn);         // turn the display ON
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	bc df       	rcall	.-136    	; 0xe4 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	9a e6       	ldi	r25, 0x6A	; 106
 16e:	9a 95       	dec	r25
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_init_4d+0x74>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_init_4d+0x7a>
	_delay_us(40);                                  // 40uS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_entryMode);         // set desired shift characteristics
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	b6 df       	rcall	.-148    	; 0xe4 <lcd_write_instruction_4d>
 178:	2a e6       	ldi	r18, 0x6A	; 106
 17a:	2a 95       	dec	r18
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_init_4d+0x80>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_init_4d+0x86>
 180:	08 95       	ret

00000182 <uart_init>:
}

// UART
void uart_init()
{
	UBRR0 = 0;
 182:	e4 ec       	ldi	r30, 0xC4	; 196
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	11 82       	std	Z+1, r1	; 0x01
 188:	10 82       	st	Z, r1
	/* Setting the XCKn port pin as output, enables master
	mode. */
	XCK_DDR |= (1<<XCK_BIT);
 18a:	54 9a       	sbi	0x0a, 4	; 10
	/* Set MSPI mode of operation and SPI data mode 0. */
	UCSR0C =
 18c:	80 ec       	ldi	r24, 0xC0	; 192
 18e:	80 93 c2 00 	sts	0x00C2, r24
	(1<<UMSEL01)|(1<<UMSEL00)|(0<<UPM00)|(0<<UCPOL0);
	/* Enable receiver and transmitter. */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 192:	88 e1       	ldi	r24, 0x18	; 24
 194:	80 93 c1 00 	sts	0x00C1, r24
	/* Set baud rate. */
	/* IMPORTANT: The Baud Rate must be set after the
	transmitter is enabled */
	UBRR0 = BAUD;
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	95 e2       	ldi	r25, 0x25	; 37
 19c:	91 83       	std	Z+1, r25	; 0x01
 19e:	80 83       	st	Z, r24
 1a0:	08 95       	ret

000001a2 <uart_putc>:
}

// sends character
void uart_putc(char c)
{
	while(!((UCSR0A)& (_BV(UDRE0))));
 1a2:	e0 ec       	ldi	r30, 0xC0	; 192
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	90 81       	ld	r25, Z
 1a8:	95 ff       	sbrs	r25, 5
 1aa:	fd cf       	rjmp	.-6      	; 0x1a6 <uart_putc+0x4>
	UDR0 = c;
 1ac:	80 93 c6 00 	sts	0x00C6, r24
 1b0:	08 95       	ret

000001b2 <uart_printstr>:
	//UBRRN = BAUD
}

// Print a string
void uart_printstr(char *s)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
	while(*s){
 1b8:	88 81       	ld	r24, Y
 1ba:	88 23       	and	r24, r24
 1bc:	29 f0       	breq	.+10     	; 0x1c8 <uart_printstr+0x16>
 1be:	21 96       	adiw	r28, 0x01	; 1
		uart_putc(*s);
 1c0:	f0 df       	rcall	.-32     	; 0x1a2 <uart_putc>
}

// Print a string
void uart_printstr(char *s)
{
	while(*s){
 1c2:	89 91       	ld	r24, Y+
 1c4:	81 11       	cpse	r24, r1
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <uart_printstr+0xe>
		uart_putc(*s);
		s++;
	}
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <getDate>:
	while(!((UCSR0A)& (_BV(UDRE0))));
	UDR0 = c;
}

void getDate(int *yy, int *mm, int *dd)
{
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
	unsigned char c;
	char str[25];
	int i;
	// Get date from user
	// modify values yy, mm, dd
	uart_printstr("Please Enter Year (yyyy):");
 1d6:	8d e2       	ldi	r24, 0x2D	; 45
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	eb df       	rcall	.-42     	; 0x1b2 <uart_printstr>
 1dc:	c4 e0       	ldi	r28, 0x04	; 4
 1de:	d0 e0       	ldi	r29, 0x00	; 0
}

// Gets character
char uart_getc()
{
	return UDR0;
 1e0:	06 ec       	ldi	r16, 0xC6	; 198
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	f8 01       	movw	r30, r16
 1e6:	80 81       	ld	r24, Z
	// Get date from user
	// modify values yy, mm, dd
	uart_printstr("Please Enter Year (yyyy):");
	for (i=0;i<=4-1;i++){
		c = uart_getc(); // Get character
		uart_putc(c); // Echo it back
 1e8:	dc df       	rcall	.-72     	; 0x1a2 <uart_putc>
 1ea:	21 97       	sbiw	r28, 0x01	; 1
	char str[25];
	int i;
	// Get date from user
	// modify values yy, mm, dd
	uart_printstr("Please Enter Year (yyyy):");
	for (i=0;i<=4-1;i++){
 1ec:	d9 f7       	brne	.-10     	; 0x1e4 <getDate+0x16>
		c = uart_getc(); // Get character
		uart_putc(c); // Echo it back
		str[i] = c;
	}
	str[i] = '\0';
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	08 95       	ret

000001f8 <main>:
static uint8_t i2cReceiveDataLength;
	

/******************************* Main Program Code *************************/
int main(void)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	6f 97       	sbiw	r28, 0x1f	; 31
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
	// configure the microprocessor pins for the data lines
	lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
 20c:	3b 9a       	sbi	0x07, 3	; 7
	lcd_D6_ddr |= (1<<lcd_D6_bit);
 20e:	3a 9a       	sbi	0x07, 2	; 7
	lcd_D5_ddr |= (1<<lcd_D5_bit);
 210:	39 9a       	sbi	0x07, 1	; 7
	lcd_D4_ddr |= (1<<lcd_D4_bit);
 212:	38 9a       	sbi	0x07, 0	; 7

	// configure the microprocessor pins for the control lines
	lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
 214:	23 9a       	sbi	0x04, 3	; 4
	lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
 216:	25 9a       	sbi	0x04, 5	; 4
	
	// configure the microprocessor pins for the pushbutton
	pushbutton_ddr &= (1<<pushbutton_bit);
 218:	8a b1       	in	r24, 0x0a	; 10
 21a:	84 70       	andi	r24, 0x04	; 4
 21c:	8a b9       	out	0x0a, r24	; 10
	pushbutton_port |= (1<<pushbutton_bit);
 21e:	5a 9a       	sbi	0x0b, 2	; 11
	
	// initialize adc
	ADMUX = ((1<<REFS0)|(1<<MUX2)|(1<<MUX0));				// Aref = Vcc, select ADC5
 220:	85 e4       	ldi	r24, 0x45	; 69
 222:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ((1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<ADPS0));	// Prescaler div factor = 128
 226:	86 e8       	ldi	r24, 0x86	; 134
 228:	80 93 7a 00 	sts	0x007A, r24
	
	// initialize the LCD controller as determined by the defines (LCD instructions)
	lcd_init_4d();                                  // initialize the LCD display for a 4-bit interface
 22c:	66 df       	rcall	.-308    	; 0xfa <lcd_init_4d>

	// display the first line of information
	lcd_write_string_4d(disp_time);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	46 df       	rcall	.-372    	; 0xc0 <lcd_write_string_4d>
	
	// set cursor to start of second line
	lcd_write_instruction_4d(lcd_setCursor | lcd_lineTwo);
 234:	80 ec       	ldi	r24, 0xC0	; 192
 236:	56 df       	rcall	.-340    	; 0xe4 <lcd_write_instruction_4d>
 238:	8a e6       	ldi	r24, 0x6A	; 106
 23a:	8a 95       	dec	r24
 23c:	f1 f7       	brne	.-4      	; 0x23a <main+0x42>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x48>
	_delay_us(40);                                  // 40 uS delay (min)
	
	if (mode == 0)
 240:	80 91 68 01 	lds	r24, 0x0168
 244:	90 91 69 01 	lds	r25, 0x0169
 248:	00 97       	sbiw	r24, 0x00	; 0
 24a:	21 f4       	brne	.+8      	; 0x254 <main+0x5c>
	{
		lcd_write_string_4d(disp_volt);
 24c:	82 e2       	ldi	r24, 0x22	; 34
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	37 df       	rcall	.-402    	; 0xc0 <lcd_write_string_4d>
 252:	09 c0       	rjmp	.+18     	; 0x266 <main+0x6e>
	}
	else if (mode == 1)
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	21 f4       	brne	.+8      	; 0x260 <main+0x68>
	{
		lcd_write_string_4d(disp_freq);
 258:	85 e1       	ldi	r24, 0x15	; 21
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	31 df       	rcall	.-414    	; 0xc0 <lcd_write_string_4d>
 25e:	03 c0       	rjmp	.+6      	; 0x266 <main+0x6e>
	}
	else
	{
		lcd_write_string_4d(disp_temp);
 260:	8d e0       	ldi	r24, 0x0D	; 13
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	2d df       	rcall	.-422    	; 0xc0 <lcd_write_string_4d>
	}	

	// Code for interfacing with the serial connection
	char str[25];
	int yy,mm,dd;
	sei();					// Enable global interrupts
 266:	78 94       	sei
	uart_init();			// Initialize the USART using baud rate 9600
 268:	8c df       	rcall	.-232    	; 0x182 <uart_init>
	uart_printstr(sdata);		// Print a string from SRAM
 26a:	87 e5       	ldi	r24, 0x57	; 87
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	a1 df       	rcall	.-190    	; 0x1b2 <uart_printstr>
	uart_printstr(fdata);		// Print a string from FLASH
 270:	84 e3       	ldi	r24, 0x34	; 52
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	9e df       	rcall	.-196    	; 0x1b2 <uart_printstr>

	
	getDate(&yy,&mm,&dd);	// Get date from user
 276:	ae 01       	movw	r20, r28
 278:	42 5e       	subi	r20, 0xE2	; 226
 27a:	5f 4f       	sbci	r21, 0xFF	; 255
 27c:	be 01       	movw	r22, r28
 27e:	64 5e       	subi	r22, 0xE4	; 228
 280:	7f 4f       	sbci	r23, 0xFF	; 255
 282:	ce 01       	movw	r24, r28
 284:	4a 96       	adiw	r24, 0x1a	; 26
 286:	a3 df       	rcall	.-186    	; 0x1ce <getDate>
	sprintf(str,"Date: %d/%d/%d\n",yy,mm,dd);
 288:	8f 8d       	ldd	r24, Y+31	; 0x1f
 28a:	8f 93       	push	r24
 28c:	8e 8d       	ldd	r24, Y+30	; 0x1e
 28e:	8f 93       	push	r24
 290:	8d 8d       	ldd	r24, Y+29	; 0x1d
 292:	8f 93       	push	r24
 294:	8c 8d       	ldd	r24, Y+28	; 0x1c
 296:	8f 93       	push	r24
 298:	8b 8d       	ldd	r24, Y+27	; 0x1b
 29a:	8f 93       	push	r24
 29c:	8a 8d       	ldd	r24, Y+26	; 0x1a
 29e:	8f 93       	push	r24
 2a0:	87 e4       	ldi	r24, 0x47	; 71
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	9f 93       	push	r25
 2a6:	8f 93       	push	r24
 2a8:	8e 01       	movw	r16, r28
 2aa:	0f 5f       	subi	r16, 0xFF	; 255
 2ac:	1f 4f       	sbci	r17, 0xFF	; 255
 2ae:	1f 93       	push	r17
 2b0:	0f 93       	push	r16
 2b2:	78 d0       	rcall	.+240    	; 0x3a4 <sprintf>
	uart_printstr(str);
 2b4:	c8 01       	movw	r24, r16
 2b6:	7d df       	rcall	.-262    	; 0x1b2 <uart_printstr>
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
		uart_printstr(fdata);
		if(bit_is_clear(pushbutton_pin,pushbutton_bit))
		{
			_delay_ms(10);
			if(bit_is_clear(pushbutton_pin,pushbutton_bit))
			mode_new = (mode + 1) % 3;
 2c2:	03 e0       	ldi	r16, 0x03	; 3
 2c4:	10 e0       	ldi	r17, 0x00	; 0


	// endless loop
	while(1)
	{
		uart_printstr(sdata);		// Print a string from SRAM
 2c6:	87 e5       	ldi	r24, 0x57	; 87
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	73 df       	rcall	.-282    	; 0x1b2 <uart_printstr>
		uart_printstr(fdata);
 2cc:	84 e3       	ldi	r24, 0x34	; 52
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	70 df       	rcall	.-288    	; 0x1b2 <uart_printstr>
		if(bit_is_clear(pushbutton_pin,pushbutton_bit))
 2d2:	4a 99       	sbic	0x09, 2	; 9
 2d4:	13 c0       	rjmp	.+38     	; 0x2fc <main+0x104>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	8f e1       	ldi	r24, 0x1F	; 31
 2d8:	9e e4       	ldi	r25, 0x4E	; 78
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <main+0xe2>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0xe8>
 2e0:	00 00       	nop
		{
			_delay_ms(10);
			if(bit_is_clear(pushbutton_pin,pushbutton_bit))
 2e2:	4a 99       	sbic	0x09, 2	; 9
 2e4:	0b c0       	rjmp	.+22     	; 0x2fc <main+0x104>
			mode_new = (mode + 1) % 3;
 2e6:	80 91 68 01 	lds	r24, 0x0168
 2ea:	90 91 69 01 	lds	r25, 0x0169
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	b8 01       	movw	r22, r16
 2f2:	45 d0       	rcall	.+138    	; 0x37e <__divmodhi4>
 2f4:	90 93 67 01 	sts	0x0167, r25
 2f8:	80 93 66 01 	sts	0x0166, r24
		}
		
		if(mode_new != mode)
 2fc:	20 91 66 01 	lds	r18, 0x0166
 300:	30 91 67 01 	lds	r19, 0x0167
 304:	80 91 68 01 	lds	r24, 0x0168
 308:	90 91 69 01 	lds	r25, 0x0169
 30c:	28 17       	cp	r18, r24
 30e:	39 07       	cpc	r19, r25
 310:	c9 f0       	breq	.+50     	; 0x344 <main+0x14c>
		{
			// set cursor to start of second line
			lcd_write_instruction_4d(lcd_setCursor | lcd_lineTwo);
 312:	80 ec       	ldi	r24, 0xC0	; 192
 314:	e7 de       	rcall	.-562    	; 0xe4 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 316:	9a e6       	ldi	r25, 0x6A	; 106
 318:	9a 95       	dec	r25
 31a:	f1 f7       	brne	.-4      	; 0x318 <main+0x120>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0x126>
			_delay_us(40);                                  // 40 uS delay (min)
	
			if (mode_new == 0)
 31e:	80 91 66 01 	lds	r24, 0x0166
 322:	90 91 67 01 	lds	r25, 0x0167
 326:	00 97       	sbiw	r24, 0x00	; 0
 328:	21 f4       	brne	.+8      	; 0x332 <main+0x13a>
			{
				lcd_write_string_4d(disp_volt);
 32a:	82 e2       	ldi	r24, 0x22	; 34
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	c8 de       	rcall	.-624    	; 0xc0 <lcd_write_string_4d>
 330:	09 c0       	rjmp	.+18     	; 0x344 <main+0x14c>
			}
			else if (mode_new == 1)
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	21 f4       	brne	.+8      	; 0x33e <main+0x146>
			{
				lcd_write_string_4d(disp_freq);
 336:	85 e1       	ldi	r24, 0x15	; 21
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	c2 de       	rcall	.-636    	; 0xc0 <lcd_write_string_4d>
 33c:	03 c0       	rjmp	.+6      	; 0x344 <main+0x14c>
			}
			else
			{
				lcd_write_string_4d(disp_temp);
 33e:	8d e0       	ldi	r24, 0x0D	; 13
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	be de       	rcall	.-644    	; 0xc0 <lcd_write_string_4d>
			}			
		}
		
		mode = mode_new;
 344:	80 91 66 01 	lds	r24, 0x0166
 348:	90 91 67 01 	lds	r25, 0x0167
 34c:	90 93 69 01 	sts	0x0169, r25
 350:	80 93 68 01 	sts	0x0168, r24
	}
 354:	b8 cf       	rjmp	.-144    	; 0x2c6 <main+0xce>

00000356 <__udivmodhi4>:
 356:	aa 1b       	sub	r26, r26
 358:	bb 1b       	sub	r27, r27
 35a:	51 e1       	ldi	r21, 0x11	; 17
 35c:	07 c0       	rjmp	.+14     	; 0x36c <__udivmodhi4_ep>

0000035e <__udivmodhi4_loop>:
 35e:	aa 1f       	adc	r26, r26
 360:	bb 1f       	adc	r27, r27
 362:	a6 17       	cp	r26, r22
 364:	b7 07       	cpc	r27, r23
 366:	10 f0       	brcs	.+4      	; 0x36c <__udivmodhi4_ep>
 368:	a6 1b       	sub	r26, r22
 36a:	b7 0b       	sbc	r27, r23

0000036c <__udivmodhi4_ep>:
 36c:	88 1f       	adc	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	5a 95       	dec	r21
 372:	a9 f7       	brne	.-22     	; 0x35e <__udivmodhi4_loop>
 374:	80 95       	com	r24
 376:	90 95       	com	r25
 378:	bc 01       	movw	r22, r24
 37a:	cd 01       	movw	r24, r26
 37c:	08 95       	ret

0000037e <__divmodhi4>:
 37e:	97 fb       	bst	r25, 7
 380:	07 2e       	mov	r0, r23
 382:	16 f4       	brtc	.+4      	; 0x388 <__divmodhi4+0xa>
 384:	00 94       	com	r0
 386:	06 d0       	rcall	.+12     	; 0x394 <__divmodhi4_neg1>
 388:	77 fd       	sbrc	r23, 7
 38a:	08 d0       	rcall	.+16     	; 0x39c <__divmodhi4_neg2>
 38c:	e4 df       	rcall	.-56     	; 0x356 <__udivmodhi4>
 38e:	07 fc       	sbrc	r0, 7
 390:	05 d0       	rcall	.+10     	; 0x39c <__divmodhi4_neg2>
 392:	3e f4       	brtc	.+14     	; 0x3a2 <__divmodhi4_exit>

00000394 <__divmodhi4_neg1>:
 394:	90 95       	com	r25
 396:	81 95       	neg	r24
 398:	9f 4f       	sbci	r25, 0xFF	; 255
 39a:	08 95       	ret

0000039c <__divmodhi4_neg2>:
 39c:	70 95       	com	r23
 39e:	61 95       	neg	r22
 3a0:	7f 4f       	sbci	r23, 0xFF	; 255

000003a2 <__divmodhi4_exit>:
 3a2:	08 95       	ret

000003a4 <sprintf>:
 3a4:	ae e0       	ldi	r26, 0x0E	; 14
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	e7 ed       	ldi	r30, 0xD7	; 215
 3aa:	f1 e0       	ldi	r31, 0x01	; 1
 3ac:	98 c2       	rjmp	.+1328   	; 0x8de <__prologue_saves__+0x1c>
 3ae:	0d 89       	ldd	r16, Y+21	; 0x15
 3b0:	1e 89       	ldd	r17, Y+22	; 0x16
 3b2:	86 e0       	ldi	r24, 0x06	; 6
 3b4:	8c 83       	std	Y+4, r24	; 0x04
 3b6:	1a 83       	std	Y+2, r17	; 0x02
 3b8:	09 83       	std	Y+1, r16	; 0x01
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	9f e7       	ldi	r25, 0x7F	; 127
 3be:	9e 83       	std	Y+6, r25	; 0x06
 3c0:	8d 83       	std	Y+5, r24	; 0x05
 3c2:	ae 01       	movw	r20, r28
 3c4:	47 5e       	subi	r20, 0xE7	; 231
 3c6:	5f 4f       	sbci	r21, 0xFF	; 255
 3c8:	6f 89       	ldd	r22, Y+23	; 0x17
 3ca:	78 8d       	ldd	r23, Y+24	; 0x18
 3cc:	ce 01       	movw	r24, r28
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	09 d0       	rcall	.+18     	; 0x3e4 <vfprintf>
 3d2:	2f 81       	ldd	r18, Y+7	; 0x07
 3d4:	38 85       	ldd	r19, Y+8	; 0x08
 3d6:	f8 01       	movw	r30, r16
 3d8:	e2 0f       	add	r30, r18
 3da:	f3 1f       	adc	r31, r19
 3dc:	10 82       	st	Z, r1
 3de:	2e 96       	adiw	r28, 0x0e	; 14
 3e0:	e4 e0       	ldi	r30, 0x04	; 4
 3e2:	99 c2       	rjmp	.+1330   	; 0x916 <__epilogue_restores__+0x1c>

000003e4 <vfprintf>:
 3e4:	ac e0       	ldi	r26, 0x0C	; 12
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	e7 ef       	ldi	r30, 0xF7	; 247
 3ea:	f1 e0       	ldi	r31, 0x01	; 1
 3ec:	6a c2       	rjmp	.+1236   	; 0x8c2 <__prologue_saves__>
 3ee:	7c 01       	movw	r14, r24
 3f0:	6b 01       	movw	r12, r22
 3f2:	8a 01       	movw	r16, r20
 3f4:	fc 01       	movw	r30, r24
 3f6:	17 82       	std	Z+7, r1	; 0x07
 3f8:	16 82       	std	Z+6, r1	; 0x06
 3fa:	83 81       	ldd	r24, Z+3	; 0x03
 3fc:	81 ff       	sbrs	r24, 1
 3fe:	b0 c1       	rjmp	.+864    	; 0x760 <__stack+0x261>
 400:	ce 01       	movw	r24, r28
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	4c 01       	movw	r8, r24
 406:	f7 01       	movw	r30, r14
 408:	93 81       	ldd	r25, Z+3	; 0x03
 40a:	f6 01       	movw	r30, r12
 40c:	93 fd       	sbrc	r25, 3
 40e:	85 91       	lpm	r24, Z+
 410:	93 ff       	sbrs	r25, 3
 412:	81 91       	ld	r24, Z+
 414:	6f 01       	movw	r12, r30
 416:	88 23       	and	r24, r24
 418:	09 f4       	brne	.+2      	; 0x41c <vfprintf+0x38>
 41a:	9e c1       	rjmp	.+828    	; 0x758 <__stack+0x259>
 41c:	85 32       	cpi	r24, 0x25	; 37
 41e:	39 f4       	brne	.+14     	; 0x42e <vfprintf+0x4a>
 420:	93 fd       	sbrc	r25, 3
 422:	85 91       	lpm	r24, Z+
 424:	93 ff       	sbrs	r25, 3
 426:	81 91       	ld	r24, Z+
 428:	6f 01       	movw	r12, r30
 42a:	85 32       	cpi	r24, 0x25	; 37
 42c:	21 f4       	brne	.+8      	; 0x436 <vfprintf+0x52>
 42e:	b7 01       	movw	r22, r14
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	b1 d1       	rcall	.+866    	; 0x796 <fputc>
 434:	e8 cf       	rjmp	.-48     	; 0x406 <vfprintf+0x22>
 436:	51 2c       	mov	r5, r1
 438:	31 2c       	mov	r3, r1
 43a:	20 e0       	ldi	r18, 0x00	; 0
 43c:	20 32       	cpi	r18, 0x20	; 32
 43e:	a0 f4       	brcc	.+40     	; 0x468 <vfprintf+0x84>
 440:	8b 32       	cpi	r24, 0x2B	; 43
 442:	69 f0       	breq	.+26     	; 0x45e <vfprintf+0x7a>
 444:	30 f4       	brcc	.+12     	; 0x452 <vfprintf+0x6e>
 446:	80 32       	cpi	r24, 0x20	; 32
 448:	59 f0       	breq	.+22     	; 0x460 <vfprintf+0x7c>
 44a:	83 32       	cpi	r24, 0x23	; 35
 44c:	69 f4       	brne	.+26     	; 0x468 <vfprintf+0x84>
 44e:	20 61       	ori	r18, 0x10	; 16
 450:	2c c0       	rjmp	.+88     	; 0x4aa <vfprintf+0xc6>
 452:	8d 32       	cpi	r24, 0x2D	; 45
 454:	39 f0       	breq	.+14     	; 0x464 <vfprintf+0x80>
 456:	80 33       	cpi	r24, 0x30	; 48
 458:	39 f4       	brne	.+14     	; 0x468 <vfprintf+0x84>
 45a:	21 60       	ori	r18, 0x01	; 1
 45c:	26 c0       	rjmp	.+76     	; 0x4aa <vfprintf+0xc6>
 45e:	22 60       	ori	r18, 0x02	; 2
 460:	24 60       	ori	r18, 0x04	; 4
 462:	23 c0       	rjmp	.+70     	; 0x4aa <vfprintf+0xc6>
 464:	28 60       	ori	r18, 0x08	; 8
 466:	21 c0       	rjmp	.+66     	; 0x4aa <vfprintf+0xc6>
 468:	27 fd       	sbrc	r18, 7
 46a:	27 c0       	rjmp	.+78     	; 0x4ba <vfprintf+0xd6>
 46c:	30 ed       	ldi	r19, 0xD0	; 208
 46e:	38 0f       	add	r19, r24
 470:	3a 30       	cpi	r19, 0x0A	; 10
 472:	78 f4       	brcc	.+30     	; 0x492 <vfprintf+0xae>
 474:	26 ff       	sbrs	r18, 6
 476:	06 c0       	rjmp	.+12     	; 0x484 <vfprintf+0xa0>
 478:	fa e0       	ldi	r31, 0x0A	; 10
 47a:	5f 9e       	mul	r5, r31
 47c:	30 0d       	add	r19, r0
 47e:	11 24       	eor	r1, r1
 480:	53 2e       	mov	r5, r19
 482:	13 c0       	rjmp	.+38     	; 0x4aa <vfprintf+0xc6>
 484:	8a e0       	ldi	r24, 0x0A	; 10
 486:	38 9e       	mul	r3, r24
 488:	30 0d       	add	r19, r0
 48a:	11 24       	eor	r1, r1
 48c:	33 2e       	mov	r3, r19
 48e:	20 62       	ori	r18, 0x20	; 32
 490:	0c c0       	rjmp	.+24     	; 0x4aa <vfprintf+0xc6>
 492:	8e 32       	cpi	r24, 0x2E	; 46
 494:	21 f4       	brne	.+8      	; 0x49e <vfprintf+0xba>
 496:	26 fd       	sbrc	r18, 6
 498:	5f c1       	rjmp	.+702    	; 0x758 <__stack+0x259>
 49a:	20 64       	ori	r18, 0x40	; 64
 49c:	06 c0       	rjmp	.+12     	; 0x4aa <vfprintf+0xc6>
 49e:	8c 36       	cpi	r24, 0x6C	; 108
 4a0:	11 f4       	brne	.+4      	; 0x4a6 <vfprintf+0xc2>
 4a2:	20 68       	ori	r18, 0x80	; 128
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <vfprintf+0xc6>
 4a6:	88 36       	cpi	r24, 0x68	; 104
 4a8:	41 f4       	brne	.+16     	; 0x4ba <vfprintf+0xd6>
 4aa:	f6 01       	movw	r30, r12
 4ac:	93 fd       	sbrc	r25, 3
 4ae:	85 91       	lpm	r24, Z+
 4b0:	93 ff       	sbrs	r25, 3
 4b2:	81 91       	ld	r24, Z+
 4b4:	6f 01       	movw	r12, r30
 4b6:	81 11       	cpse	r24, r1
 4b8:	c1 cf       	rjmp	.-126    	; 0x43c <vfprintf+0x58>
 4ba:	98 2f       	mov	r25, r24
 4bc:	9f 7d       	andi	r25, 0xDF	; 223
 4be:	95 54       	subi	r25, 0x45	; 69
 4c0:	93 30       	cpi	r25, 0x03	; 3
 4c2:	28 f4       	brcc	.+10     	; 0x4ce <vfprintf+0xea>
 4c4:	0c 5f       	subi	r16, 0xFC	; 252
 4c6:	1f 4f       	sbci	r17, 0xFF	; 255
 4c8:	ff e3       	ldi	r31, 0x3F	; 63
 4ca:	f9 83       	std	Y+1, r31	; 0x01
 4cc:	0d c0       	rjmp	.+26     	; 0x4e8 <vfprintf+0x104>
 4ce:	83 36       	cpi	r24, 0x63	; 99
 4d0:	31 f0       	breq	.+12     	; 0x4de <vfprintf+0xfa>
 4d2:	83 37       	cpi	r24, 0x73	; 115
 4d4:	71 f0       	breq	.+28     	; 0x4f2 <vfprintf+0x10e>
 4d6:	83 35       	cpi	r24, 0x53	; 83
 4d8:	09 f0       	breq	.+2      	; 0x4dc <vfprintf+0xf8>
 4da:	57 c0       	rjmp	.+174    	; 0x58a <__stack+0x8b>
 4dc:	21 c0       	rjmp	.+66     	; 0x520 <__stack+0x21>
 4de:	f8 01       	movw	r30, r16
 4e0:	80 81       	ld	r24, Z
 4e2:	89 83       	std	Y+1, r24	; 0x01
 4e4:	0e 5f       	subi	r16, 0xFE	; 254
 4e6:	1f 4f       	sbci	r17, 0xFF	; 255
 4e8:	44 24       	eor	r4, r4
 4ea:	43 94       	inc	r4
 4ec:	51 2c       	mov	r5, r1
 4ee:	54 01       	movw	r10, r8
 4f0:	14 c0       	rjmp	.+40     	; 0x51a <__stack+0x1b>
 4f2:	38 01       	movw	r6, r16
 4f4:	f2 e0       	ldi	r31, 0x02	; 2
 4f6:	6f 0e       	add	r6, r31
 4f8:	71 1c       	adc	r7, r1
 4fa:	f8 01       	movw	r30, r16
 4fc:	a0 80       	ld	r10, Z
 4fe:	b1 80       	ldd	r11, Z+1	; 0x01
 500:	26 ff       	sbrs	r18, 6
 502:	03 c0       	rjmp	.+6      	; 0x50a <__stack+0xb>
 504:	65 2d       	mov	r22, r5
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <__stack+0xf>
 50a:	6f ef       	ldi	r22, 0xFF	; 255
 50c:	7f ef       	ldi	r23, 0xFF	; 255
 50e:	c5 01       	movw	r24, r10
 510:	2c 87       	std	Y+12, r18	; 0x0c
 512:	36 d1       	rcall	.+620    	; 0x780 <strnlen>
 514:	2c 01       	movw	r4, r24
 516:	83 01       	movw	r16, r6
 518:	2c 85       	ldd	r18, Y+12	; 0x0c
 51a:	2f 77       	andi	r18, 0x7F	; 127
 51c:	22 2e       	mov	r2, r18
 51e:	16 c0       	rjmp	.+44     	; 0x54c <__stack+0x4d>
 520:	38 01       	movw	r6, r16
 522:	f2 e0       	ldi	r31, 0x02	; 2
 524:	6f 0e       	add	r6, r31
 526:	71 1c       	adc	r7, r1
 528:	f8 01       	movw	r30, r16
 52a:	a0 80       	ld	r10, Z
 52c:	b1 80       	ldd	r11, Z+1	; 0x01
 52e:	26 ff       	sbrs	r18, 6
 530:	03 c0       	rjmp	.+6      	; 0x538 <__stack+0x39>
 532:	65 2d       	mov	r22, r5
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <__stack+0x3d>
 538:	6f ef       	ldi	r22, 0xFF	; 255
 53a:	7f ef       	ldi	r23, 0xFF	; 255
 53c:	c5 01       	movw	r24, r10
 53e:	2c 87       	std	Y+12, r18	; 0x0c
 540:	14 d1       	rcall	.+552    	; 0x76a <strnlen_P>
 542:	2c 01       	movw	r4, r24
 544:	2c 85       	ldd	r18, Y+12	; 0x0c
 546:	20 68       	ori	r18, 0x80	; 128
 548:	22 2e       	mov	r2, r18
 54a:	83 01       	movw	r16, r6
 54c:	23 fc       	sbrc	r2, 3
 54e:	19 c0       	rjmp	.+50     	; 0x582 <__stack+0x83>
 550:	83 2d       	mov	r24, r3
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	48 16       	cp	r4, r24
 556:	59 06       	cpc	r5, r25
 558:	a0 f4       	brcc	.+40     	; 0x582 <__stack+0x83>
 55a:	b7 01       	movw	r22, r14
 55c:	80 e2       	ldi	r24, 0x20	; 32
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	1a d1       	rcall	.+564    	; 0x796 <fputc>
 562:	3a 94       	dec	r3
 564:	f5 cf       	rjmp	.-22     	; 0x550 <__stack+0x51>
 566:	f5 01       	movw	r30, r10
 568:	27 fc       	sbrc	r2, 7
 56a:	85 91       	lpm	r24, Z+
 56c:	27 fe       	sbrs	r2, 7
 56e:	81 91       	ld	r24, Z+
 570:	5f 01       	movw	r10, r30
 572:	b7 01       	movw	r22, r14
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0f d1       	rcall	.+542    	; 0x796 <fputc>
 578:	31 10       	cpse	r3, r1
 57a:	3a 94       	dec	r3
 57c:	f1 e0       	ldi	r31, 0x01	; 1
 57e:	4f 1a       	sub	r4, r31
 580:	51 08       	sbc	r5, r1
 582:	41 14       	cp	r4, r1
 584:	51 04       	cpc	r5, r1
 586:	79 f7       	brne	.-34     	; 0x566 <__stack+0x67>
 588:	de c0       	rjmp	.+444    	; 0x746 <__stack+0x247>
 58a:	84 36       	cpi	r24, 0x64	; 100
 58c:	11 f0       	breq	.+4      	; 0x592 <__stack+0x93>
 58e:	89 36       	cpi	r24, 0x69	; 105
 590:	31 f5       	brne	.+76     	; 0x5de <__stack+0xdf>
 592:	f8 01       	movw	r30, r16
 594:	27 ff       	sbrs	r18, 7
 596:	07 c0       	rjmp	.+14     	; 0x5a6 <__stack+0xa7>
 598:	60 81       	ld	r22, Z
 59a:	71 81       	ldd	r23, Z+1	; 0x01
 59c:	82 81       	ldd	r24, Z+2	; 0x02
 59e:	93 81       	ldd	r25, Z+3	; 0x03
 5a0:	0c 5f       	subi	r16, 0xFC	; 252
 5a2:	1f 4f       	sbci	r17, 0xFF	; 255
 5a4:	08 c0       	rjmp	.+16     	; 0x5b6 <__stack+0xb7>
 5a6:	60 81       	ld	r22, Z
 5a8:	71 81       	ldd	r23, Z+1	; 0x01
 5aa:	07 2e       	mov	r0, r23
 5ac:	00 0c       	add	r0, r0
 5ae:	88 0b       	sbc	r24, r24
 5b0:	99 0b       	sbc	r25, r25
 5b2:	0e 5f       	subi	r16, 0xFE	; 254
 5b4:	1f 4f       	sbci	r17, 0xFF	; 255
 5b6:	2f 76       	andi	r18, 0x6F	; 111
 5b8:	72 2e       	mov	r7, r18
 5ba:	97 ff       	sbrs	r25, 7
 5bc:	09 c0       	rjmp	.+18     	; 0x5d0 <__stack+0xd1>
 5be:	90 95       	com	r25
 5c0:	80 95       	com	r24
 5c2:	70 95       	com	r23
 5c4:	61 95       	neg	r22
 5c6:	7f 4f       	sbci	r23, 0xFF	; 255
 5c8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ca:	9f 4f       	sbci	r25, 0xFF	; 255
 5cc:	20 68       	ori	r18, 0x80	; 128
 5ce:	72 2e       	mov	r7, r18
 5d0:	2a e0       	ldi	r18, 0x0A	; 10
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	a4 01       	movw	r20, r8
 5d6:	17 d1       	rcall	.+558    	; 0x806 <__ultoa_invert>
 5d8:	a8 2e       	mov	r10, r24
 5da:	a8 18       	sub	r10, r8
 5dc:	43 c0       	rjmp	.+134    	; 0x664 <__stack+0x165>
 5de:	85 37       	cpi	r24, 0x75	; 117
 5e0:	29 f4       	brne	.+10     	; 0x5ec <__stack+0xed>
 5e2:	2f 7e       	andi	r18, 0xEF	; 239
 5e4:	b2 2e       	mov	r11, r18
 5e6:	2a e0       	ldi	r18, 0x0A	; 10
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	25 c0       	rjmp	.+74     	; 0x636 <__stack+0x137>
 5ec:	f2 2f       	mov	r31, r18
 5ee:	f9 7f       	andi	r31, 0xF9	; 249
 5f0:	bf 2e       	mov	r11, r31
 5f2:	8f 36       	cpi	r24, 0x6F	; 111
 5f4:	c1 f0       	breq	.+48     	; 0x626 <__stack+0x127>
 5f6:	18 f4       	brcc	.+6      	; 0x5fe <__stack+0xff>
 5f8:	88 35       	cpi	r24, 0x58	; 88
 5fa:	79 f0       	breq	.+30     	; 0x61a <__stack+0x11b>
 5fc:	ad c0       	rjmp	.+346    	; 0x758 <__stack+0x259>
 5fe:	80 37       	cpi	r24, 0x70	; 112
 600:	19 f0       	breq	.+6      	; 0x608 <__stack+0x109>
 602:	88 37       	cpi	r24, 0x78	; 120
 604:	21 f0       	breq	.+8      	; 0x60e <__stack+0x10f>
 606:	a8 c0       	rjmp	.+336    	; 0x758 <__stack+0x259>
 608:	2f 2f       	mov	r18, r31
 60a:	20 61       	ori	r18, 0x10	; 16
 60c:	b2 2e       	mov	r11, r18
 60e:	b4 fe       	sbrs	r11, 4
 610:	0d c0       	rjmp	.+26     	; 0x62c <__stack+0x12d>
 612:	8b 2d       	mov	r24, r11
 614:	84 60       	ori	r24, 0x04	; 4
 616:	b8 2e       	mov	r11, r24
 618:	09 c0       	rjmp	.+18     	; 0x62c <__stack+0x12d>
 61a:	24 ff       	sbrs	r18, 4
 61c:	0a c0       	rjmp	.+20     	; 0x632 <__stack+0x133>
 61e:	9f 2f       	mov	r25, r31
 620:	96 60       	ori	r25, 0x06	; 6
 622:	b9 2e       	mov	r11, r25
 624:	06 c0       	rjmp	.+12     	; 0x632 <__stack+0x133>
 626:	28 e0       	ldi	r18, 0x08	; 8
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	05 c0       	rjmp	.+10     	; 0x636 <__stack+0x137>
 62c:	20 e1       	ldi	r18, 0x10	; 16
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	02 c0       	rjmp	.+4      	; 0x636 <__stack+0x137>
 632:	20 e1       	ldi	r18, 0x10	; 16
 634:	32 e0       	ldi	r19, 0x02	; 2
 636:	f8 01       	movw	r30, r16
 638:	b7 fe       	sbrs	r11, 7
 63a:	07 c0       	rjmp	.+14     	; 0x64a <__stack+0x14b>
 63c:	60 81       	ld	r22, Z
 63e:	71 81       	ldd	r23, Z+1	; 0x01
 640:	82 81       	ldd	r24, Z+2	; 0x02
 642:	93 81       	ldd	r25, Z+3	; 0x03
 644:	0c 5f       	subi	r16, 0xFC	; 252
 646:	1f 4f       	sbci	r17, 0xFF	; 255
 648:	06 c0       	rjmp	.+12     	; 0x656 <__stack+0x157>
 64a:	60 81       	ld	r22, Z
 64c:	71 81       	ldd	r23, Z+1	; 0x01
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 5f       	subi	r16, 0xFE	; 254
 654:	1f 4f       	sbci	r17, 0xFF	; 255
 656:	a4 01       	movw	r20, r8
 658:	d6 d0       	rcall	.+428    	; 0x806 <__ultoa_invert>
 65a:	a8 2e       	mov	r10, r24
 65c:	a8 18       	sub	r10, r8
 65e:	fb 2d       	mov	r31, r11
 660:	ff 77       	andi	r31, 0x7F	; 127
 662:	7f 2e       	mov	r7, r31
 664:	76 fe       	sbrs	r7, 6
 666:	0b c0       	rjmp	.+22     	; 0x67e <__stack+0x17f>
 668:	37 2d       	mov	r19, r7
 66a:	3e 7f       	andi	r19, 0xFE	; 254
 66c:	a5 14       	cp	r10, r5
 66e:	50 f4       	brcc	.+20     	; 0x684 <__stack+0x185>
 670:	74 fe       	sbrs	r7, 4
 672:	0a c0       	rjmp	.+20     	; 0x688 <__stack+0x189>
 674:	72 fc       	sbrc	r7, 2
 676:	08 c0       	rjmp	.+16     	; 0x688 <__stack+0x189>
 678:	37 2d       	mov	r19, r7
 67a:	3e 7e       	andi	r19, 0xEE	; 238
 67c:	05 c0       	rjmp	.+10     	; 0x688 <__stack+0x189>
 67e:	ba 2c       	mov	r11, r10
 680:	37 2d       	mov	r19, r7
 682:	03 c0       	rjmp	.+6      	; 0x68a <__stack+0x18b>
 684:	ba 2c       	mov	r11, r10
 686:	01 c0       	rjmp	.+2      	; 0x68a <__stack+0x18b>
 688:	b5 2c       	mov	r11, r5
 68a:	34 ff       	sbrs	r19, 4
 68c:	0d c0       	rjmp	.+26     	; 0x6a8 <__stack+0x1a9>
 68e:	fe 01       	movw	r30, r28
 690:	ea 0d       	add	r30, r10
 692:	f1 1d       	adc	r31, r1
 694:	80 81       	ld	r24, Z
 696:	80 33       	cpi	r24, 0x30	; 48
 698:	11 f4       	brne	.+4      	; 0x69e <__stack+0x19f>
 69a:	39 7e       	andi	r19, 0xE9	; 233
 69c:	09 c0       	rjmp	.+18     	; 0x6b0 <__stack+0x1b1>
 69e:	32 ff       	sbrs	r19, 2
 6a0:	06 c0       	rjmp	.+12     	; 0x6ae <__stack+0x1af>
 6a2:	b3 94       	inc	r11
 6a4:	b3 94       	inc	r11
 6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <__stack+0x1b1>
 6a8:	83 2f       	mov	r24, r19
 6aa:	86 78       	andi	r24, 0x86	; 134
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <__stack+0x1b1>
 6ae:	b3 94       	inc	r11
 6b0:	33 fd       	sbrc	r19, 3
 6b2:	12 c0       	rjmp	.+36     	; 0x6d8 <__stack+0x1d9>
 6b4:	30 ff       	sbrs	r19, 0
 6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <__stack+0x1c5>
 6b8:	5a 2c       	mov	r5, r10
 6ba:	b3 14       	cp	r11, r3
 6bc:	18 f4       	brcc	.+6      	; 0x6c4 <__stack+0x1c5>
 6be:	53 0c       	add	r5, r3
 6c0:	5b 18       	sub	r5, r11
 6c2:	b3 2c       	mov	r11, r3
 6c4:	b3 14       	cp	r11, r3
 6c6:	60 f4       	brcc	.+24     	; 0x6e0 <__stack+0x1e1>
 6c8:	b7 01       	movw	r22, r14
 6ca:	80 e2       	ldi	r24, 0x20	; 32
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	3c 87       	std	Y+12, r19	; 0x0c
 6d0:	62 d0       	rcall	.+196    	; 0x796 <fputc>
 6d2:	b3 94       	inc	r11
 6d4:	3c 85       	ldd	r19, Y+12	; 0x0c
 6d6:	f6 cf       	rjmp	.-20     	; 0x6c4 <__stack+0x1c5>
 6d8:	b3 14       	cp	r11, r3
 6da:	10 f4       	brcc	.+4      	; 0x6e0 <__stack+0x1e1>
 6dc:	3b 18       	sub	r3, r11
 6de:	01 c0       	rjmp	.+2      	; 0x6e2 <__stack+0x1e3>
 6e0:	31 2c       	mov	r3, r1
 6e2:	34 ff       	sbrs	r19, 4
 6e4:	11 c0       	rjmp	.+34     	; 0x708 <__stack+0x209>
 6e6:	b7 01       	movw	r22, r14
 6e8:	80 e3       	ldi	r24, 0x30	; 48
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	3c 87       	std	Y+12, r19	; 0x0c
 6ee:	53 d0       	rcall	.+166    	; 0x796 <fputc>
 6f0:	3c 85       	ldd	r19, Y+12	; 0x0c
 6f2:	32 ff       	sbrs	r19, 2
 6f4:	16 c0       	rjmp	.+44     	; 0x722 <__stack+0x223>
 6f6:	31 fd       	sbrc	r19, 1
 6f8:	03 c0       	rjmp	.+6      	; 0x700 <__stack+0x201>
 6fa:	88 e7       	ldi	r24, 0x78	; 120
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <__stack+0x205>
 700:	88 e5       	ldi	r24, 0x58	; 88
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	b7 01       	movw	r22, r14
 706:	0c c0       	rjmp	.+24     	; 0x720 <__stack+0x221>
 708:	83 2f       	mov	r24, r19
 70a:	86 78       	andi	r24, 0x86	; 134
 70c:	51 f0       	breq	.+20     	; 0x722 <__stack+0x223>
 70e:	31 ff       	sbrs	r19, 1
 710:	02 c0       	rjmp	.+4      	; 0x716 <__stack+0x217>
 712:	8b e2       	ldi	r24, 0x2B	; 43
 714:	01 c0       	rjmp	.+2      	; 0x718 <__stack+0x219>
 716:	80 e2       	ldi	r24, 0x20	; 32
 718:	37 fd       	sbrc	r19, 7
 71a:	8d e2       	ldi	r24, 0x2D	; 45
 71c:	b7 01       	movw	r22, r14
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	3a d0       	rcall	.+116    	; 0x796 <fputc>
 722:	a5 14       	cp	r10, r5
 724:	30 f4       	brcc	.+12     	; 0x732 <__stack+0x233>
 726:	b7 01       	movw	r22, r14
 728:	80 e3       	ldi	r24, 0x30	; 48
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	34 d0       	rcall	.+104    	; 0x796 <fputc>
 72e:	5a 94       	dec	r5
 730:	f8 cf       	rjmp	.-16     	; 0x722 <__stack+0x223>
 732:	aa 94       	dec	r10
 734:	f4 01       	movw	r30, r8
 736:	ea 0d       	add	r30, r10
 738:	f1 1d       	adc	r31, r1
 73a:	80 81       	ld	r24, Z
 73c:	b7 01       	movw	r22, r14
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	2a d0       	rcall	.+84     	; 0x796 <fputc>
 742:	a1 10       	cpse	r10, r1
 744:	f6 cf       	rjmp	.-20     	; 0x732 <__stack+0x233>
 746:	33 20       	and	r3, r3
 748:	09 f4       	brne	.+2      	; 0x74c <__stack+0x24d>
 74a:	5d ce       	rjmp	.-838    	; 0x406 <vfprintf+0x22>
 74c:	b7 01       	movw	r22, r14
 74e:	80 e2       	ldi	r24, 0x20	; 32
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	21 d0       	rcall	.+66     	; 0x796 <fputc>
 754:	3a 94       	dec	r3
 756:	f7 cf       	rjmp	.-18     	; 0x746 <__stack+0x247>
 758:	f7 01       	movw	r30, r14
 75a:	86 81       	ldd	r24, Z+6	; 0x06
 75c:	97 81       	ldd	r25, Z+7	; 0x07
 75e:	02 c0       	rjmp	.+4      	; 0x764 <__stack+0x265>
 760:	8f ef       	ldi	r24, 0xFF	; 255
 762:	9f ef       	ldi	r25, 0xFF	; 255
 764:	2c 96       	adiw	r28, 0x0c	; 12
 766:	e2 e1       	ldi	r30, 0x12	; 18
 768:	c8 c0       	rjmp	.+400    	; 0x8fa <__epilogue_restores__>

0000076a <strnlen_P>:
 76a:	fc 01       	movw	r30, r24
 76c:	05 90       	lpm	r0, Z+
 76e:	61 50       	subi	r22, 0x01	; 1
 770:	70 40       	sbci	r23, 0x00	; 0
 772:	01 10       	cpse	r0, r1
 774:	d8 f7       	brcc	.-10     	; 0x76c <strnlen_P+0x2>
 776:	80 95       	com	r24
 778:	90 95       	com	r25
 77a:	8e 0f       	add	r24, r30
 77c:	9f 1f       	adc	r25, r31
 77e:	08 95       	ret

00000780 <strnlen>:
 780:	fc 01       	movw	r30, r24
 782:	61 50       	subi	r22, 0x01	; 1
 784:	70 40       	sbci	r23, 0x00	; 0
 786:	01 90       	ld	r0, Z+
 788:	01 10       	cpse	r0, r1
 78a:	d8 f7       	brcc	.-10     	; 0x782 <strnlen+0x2>
 78c:	80 95       	com	r24
 78e:	90 95       	com	r25
 790:	8e 0f       	add	r24, r30
 792:	9f 1f       	adc	r25, r31
 794:	08 95       	ret

00000796 <fputc>:
 796:	0f 93       	push	r16
 798:	1f 93       	push	r17
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	fb 01       	movw	r30, r22
 7a0:	23 81       	ldd	r18, Z+3	; 0x03
 7a2:	21 fd       	sbrc	r18, 1
 7a4:	03 c0       	rjmp	.+6      	; 0x7ac <fputc+0x16>
 7a6:	8f ef       	ldi	r24, 0xFF	; 255
 7a8:	9f ef       	ldi	r25, 0xFF	; 255
 7aa:	28 c0       	rjmp	.+80     	; 0x7fc <fputc+0x66>
 7ac:	22 ff       	sbrs	r18, 2
 7ae:	16 c0       	rjmp	.+44     	; 0x7dc <fputc+0x46>
 7b0:	46 81       	ldd	r20, Z+6	; 0x06
 7b2:	57 81       	ldd	r21, Z+7	; 0x07
 7b4:	24 81       	ldd	r18, Z+4	; 0x04
 7b6:	35 81       	ldd	r19, Z+5	; 0x05
 7b8:	42 17       	cp	r20, r18
 7ba:	53 07       	cpc	r21, r19
 7bc:	44 f4       	brge	.+16     	; 0x7ce <fputc+0x38>
 7be:	a0 81       	ld	r26, Z
 7c0:	b1 81       	ldd	r27, Z+1	; 0x01
 7c2:	9d 01       	movw	r18, r26
 7c4:	2f 5f       	subi	r18, 0xFF	; 255
 7c6:	3f 4f       	sbci	r19, 0xFF	; 255
 7c8:	31 83       	std	Z+1, r19	; 0x01
 7ca:	20 83       	st	Z, r18
 7cc:	8c 93       	st	X, r24
 7ce:	26 81       	ldd	r18, Z+6	; 0x06
 7d0:	37 81       	ldd	r19, Z+7	; 0x07
 7d2:	2f 5f       	subi	r18, 0xFF	; 255
 7d4:	3f 4f       	sbci	r19, 0xFF	; 255
 7d6:	37 83       	std	Z+7, r19	; 0x07
 7d8:	26 83       	std	Z+6, r18	; 0x06
 7da:	10 c0       	rjmp	.+32     	; 0x7fc <fputc+0x66>
 7dc:	eb 01       	movw	r28, r22
 7de:	09 2f       	mov	r16, r25
 7e0:	18 2f       	mov	r17, r24
 7e2:	00 84       	ldd	r0, Z+8	; 0x08
 7e4:	f1 85       	ldd	r31, Z+9	; 0x09
 7e6:	e0 2d       	mov	r30, r0
 7e8:	09 95       	icall
 7ea:	89 2b       	or	r24, r25
 7ec:	e1 f6       	brne	.-72     	; 0x7a6 <fputc+0x10>
 7ee:	8e 81       	ldd	r24, Y+6	; 0x06
 7f0:	9f 81       	ldd	r25, Y+7	; 0x07
 7f2:	01 96       	adiw	r24, 0x01	; 1
 7f4:	9f 83       	std	Y+7, r25	; 0x07
 7f6:	8e 83       	std	Y+6, r24	; 0x06
 7f8:	81 2f       	mov	r24, r17
 7fa:	90 2f       	mov	r25, r16
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	1f 91       	pop	r17
 802:	0f 91       	pop	r16
 804:	08 95       	ret

00000806 <__ultoa_invert>:
 806:	fa 01       	movw	r30, r20
 808:	aa 27       	eor	r26, r26
 80a:	28 30       	cpi	r18, 0x08	; 8
 80c:	51 f1       	breq	.+84     	; 0x862 <__ultoa_invert+0x5c>
 80e:	20 31       	cpi	r18, 0x10	; 16
 810:	81 f1       	breq	.+96     	; 0x872 <__ultoa_invert+0x6c>
 812:	e8 94       	clt
 814:	6f 93       	push	r22
 816:	6e 7f       	andi	r22, 0xFE	; 254
 818:	6e 5f       	subi	r22, 0xFE	; 254
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	8f 4f       	sbci	r24, 0xFF	; 255
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	af 4f       	sbci	r26, 0xFF	; 255
 822:	b1 e0       	ldi	r27, 0x01	; 1
 824:	3e d0       	rcall	.+124    	; 0x8a2 <__ultoa_invert+0x9c>
 826:	b4 e0       	ldi	r27, 0x04	; 4
 828:	3c d0       	rcall	.+120    	; 0x8a2 <__ultoa_invert+0x9c>
 82a:	67 0f       	add	r22, r23
 82c:	78 1f       	adc	r23, r24
 82e:	89 1f       	adc	r24, r25
 830:	9a 1f       	adc	r25, r26
 832:	a1 1d       	adc	r26, r1
 834:	68 0f       	add	r22, r24
 836:	79 1f       	adc	r23, r25
 838:	8a 1f       	adc	r24, r26
 83a:	91 1d       	adc	r25, r1
 83c:	a1 1d       	adc	r26, r1
 83e:	6a 0f       	add	r22, r26
 840:	71 1d       	adc	r23, r1
 842:	81 1d       	adc	r24, r1
 844:	91 1d       	adc	r25, r1
 846:	a1 1d       	adc	r26, r1
 848:	20 d0       	rcall	.+64     	; 0x88a <__ultoa_invert+0x84>
 84a:	09 f4       	brne	.+2      	; 0x84e <__ultoa_invert+0x48>
 84c:	68 94       	set
 84e:	3f 91       	pop	r19
 850:	2a e0       	ldi	r18, 0x0A	; 10
 852:	26 9f       	mul	r18, r22
 854:	11 24       	eor	r1, r1
 856:	30 19       	sub	r19, r0
 858:	30 5d       	subi	r19, 0xD0	; 208
 85a:	31 93       	st	Z+, r19
 85c:	de f6       	brtc	.-74     	; 0x814 <__ultoa_invert+0xe>
 85e:	cf 01       	movw	r24, r30
 860:	08 95       	ret
 862:	46 2f       	mov	r20, r22
 864:	47 70       	andi	r20, 0x07	; 7
 866:	40 5d       	subi	r20, 0xD0	; 208
 868:	41 93       	st	Z+, r20
 86a:	b3 e0       	ldi	r27, 0x03	; 3
 86c:	0f d0       	rcall	.+30     	; 0x88c <__ultoa_invert+0x86>
 86e:	c9 f7       	brne	.-14     	; 0x862 <__ultoa_invert+0x5c>
 870:	f6 cf       	rjmp	.-20     	; 0x85e <__ultoa_invert+0x58>
 872:	46 2f       	mov	r20, r22
 874:	4f 70       	andi	r20, 0x0F	; 15
 876:	40 5d       	subi	r20, 0xD0	; 208
 878:	4a 33       	cpi	r20, 0x3A	; 58
 87a:	18 f0       	brcs	.+6      	; 0x882 <__ultoa_invert+0x7c>
 87c:	49 5d       	subi	r20, 0xD9	; 217
 87e:	31 fd       	sbrc	r19, 1
 880:	40 52       	subi	r20, 0x20	; 32
 882:	41 93       	st	Z+, r20
 884:	02 d0       	rcall	.+4      	; 0x88a <__ultoa_invert+0x84>
 886:	a9 f7       	brne	.-22     	; 0x872 <__ultoa_invert+0x6c>
 888:	ea cf       	rjmp	.-44     	; 0x85e <__ultoa_invert+0x58>
 88a:	b4 e0       	ldi	r27, 0x04	; 4
 88c:	a6 95       	lsr	r26
 88e:	97 95       	ror	r25
 890:	87 95       	ror	r24
 892:	77 95       	ror	r23
 894:	67 95       	ror	r22
 896:	ba 95       	dec	r27
 898:	c9 f7       	brne	.-14     	; 0x88c <__ultoa_invert+0x86>
 89a:	00 97       	sbiw	r24, 0x00	; 0
 89c:	61 05       	cpc	r22, r1
 89e:	71 05       	cpc	r23, r1
 8a0:	08 95       	ret
 8a2:	9b 01       	movw	r18, r22
 8a4:	ac 01       	movw	r20, r24
 8a6:	0a 2e       	mov	r0, r26
 8a8:	06 94       	lsr	r0
 8aa:	57 95       	ror	r21
 8ac:	47 95       	ror	r20
 8ae:	37 95       	ror	r19
 8b0:	27 95       	ror	r18
 8b2:	ba 95       	dec	r27
 8b4:	c9 f7       	brne	.-14     	; 0x8a8 <__ultoa_invert+0xa2>
 8b6:	62 0f       	add	r22, r18
 8b8:	73 1f       	adc	r23, r19
 8ba:	84 1f       	adc	r24, r20
 8bc:	95 1f       	adc	r25, r21
 8be:	a0 1d       	adc	r26, r0
 8c0:	08 95       	ret

000008c2 <__prologue_saves__>:
 8c2:	2f 92       	push	r2
 8c4:	3f 92       	push	r3
 8c6:	4f 92       	push	r4
 8c8:	5f 92       	push	r5
 8ca:	6f 92       	push	r6
 8cc:	7f 92       	push	r7
 8ce:	8f 92       	push	r8
 8d0:	9f 92       	push	r9
 8d2:	af 92       	push	r10
 8d4:	bf 92       	push	r11
 8d6:	cf 92       	push	r12
 8d8:	df 92       	push	r13
 8da:	ef 92       	push	r14
 8dc:	ff 92       	push	r15
 8de:	0f 93       	push	r16
 8e0:	1f 93       	push	r17
 8e2:	cf 93       	push	r28
 8e4:	df 93       	push	r29
 8e6:	cd b7       	in	r28, 0x3d	; 61
 8e8:	de b7       	in	r29, 0x3e	; 62
 8ea:	ca 1b       	sub	r28, r26
 8ec:	db 0b       	sbc	r29, r27
 8ee:	0f b6       	in	r0, 0x3f	; 63
 8f0:	f8 94       	cli
 8f2:	de bf       	out	0x3e, r29	; 62
 8f4:	0f be       	out	0x3f, r0	; 63
 8f6:	cd bf       	out	0x3d, r28	; 61
 8f8:	09 94       	ijmp

000008fa <__epilogue_restores__>:
 8fa:	2a 88       	ldd	r2, Y+18	; 0x12
 8fc:	39 88       	ldd	r3, Y+17	; 0x11
 8fe:	48 88       	ldd	r4, Y+16	; 0x10
 900:	5f 84       	ldd	r5, Y+15	; 0x0f
 902:	6e 84       	ldd	r6, Y+14	; 0x0e
 904:	7d 84       	ldd	r7, Y+13	; 0x0d
 906:	8c 84       	ldd	r8, Y+12	; 0x0c
 908:	9b 84       	ldd	r9, Y+11	; 0x0b
 90a:	aa 84       	ldd	r10, Y+10	; 0x0a
 90c:	b9 84       	ldd	r11, Y+9	; 0x09
 90e:	c8 84       	ldd	r12, Y+8	; 0x08
 910:	df 80       	ldd	r13, Y+7	; 0x07
 912:	ee 80       	ldd	r14, Y+6	; 0x06
 914:	fd 80       	ldd	r15, Y+5	; 0x05
 916:	0c 81       	ldd	r16, Y+4	; 0x04
 918:	1b 81       	ldd	r17, Y+3	; 0x03
 91a:	aa 81       	ldd	r26, Y+2	; 0x02
 91c:	b9 81       	ldd	r27, Y+1	; 0x01
 91e:	ce 0f       	add	r28, r30
 920:	d1 1d       	adc	r29, r1
 922:	0f b6       	in	r0, 0x3f	; 63
 924:	f8 94       	cli
 926:	de bf       	out	0x3e, r29	; 62
 928:	0f be       	out	0x3f, r0	; 63
 92a:	cd bf       	out	0x3d, r28	; 61
 92c:	ed 01       	movw	r28, r26
 92e:	08 95       	ret

00000930 <_exit>:
 930:	f8 94       	cli

00000932 <__stop_program>:
 932:	ff cf       	rjmp	.-2      	; 0x932 <__stop_program>
